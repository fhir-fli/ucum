import '../ucum.dart';

final List<DefinedUnit> definedUnitsList = <DefinedUnit>[
  DefinedUnit(
      code: '%',
      codeUC: '%',
      value: Value(
          unit: '10*-2',
          unitUC: '10*-2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'fraction',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        'percents',
      ],
      printSymbol: '%'),
  DefinedUnit(
      code: '%[slope]',
      codeUC: '%[SLOPE]',
      value:
          Value(unit: 'deg', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'slope',
      isMetric: false,
      isSpecial: true,
      class_: 'clinical',
      names: <String>[
        '% slope',
        '%slope',
        'percents slopes',
        'percent of slope',
      ],
      printSymbol: '%'),
  DefinedUnit(
      code: "'",
      codeUC: "'",
      value: Value(
          unit: 'deg/60',
          unitUC: 'DEG/60',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'plane angle',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'arcminutes',
        'arcmin',
        'arc minutes',
        'arc mins',
        'arc minute',
      ],
      printSymbol: '"'),
  DefinedUnit(
      code: "''",
      codeUC: "''",
      value: Value(
          unit: "'/60",
          unitUC: "'/60",
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'plane angle',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'arcseconds',
        'arcsecs',
        'arc second',
      ],
      printSymbol: "''"),
  DefinedUnit(
      code: '/(12.h)',
      codeUC: '/HR',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'per 12 hours',
        '/12 hrs',
        '/12hrs',
        'per twelve hour',
      ],
      printSymbol: '/h'),
  DefinedUnit(
      code: '/10*10',
      codeUC: '/10*10',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/10^10',
        'per 10*10',
        'per 10 billion  ',
      ],
      printSymbol: '/10<sup>10<.sup>'),
  DefinedUnit(
      code: '/10*12',
      codeUC: '/10*12',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/10^12',
        'per 10*12',
        'per trillion ',
      ],
      printSymbol: '/10<sup>12<.sup>'),
  DefinedUnit(
      code: '/10*3',
      codeUC: '/10*3',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/10^3',
        'per 10*3',
        'per thousand',
      ],
      printSymbol: '/10<sup>3<.sup>'),
  DefinedUnit(
      code: '/10*6',
      codeUC: '/10*6',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/10^6',
        'per 10*6;',
        'per million',
        'per 10*6',
      ],
      printSymbol: '/10<sup>6<.sup>'),
  DefinedUnit(
      code: '/10*9',
      codeUC: '/10*9',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/10^9',
        'per 10*9',
        'per billion',
      ],
      printSymbol: '/10<sup>9<.sup>'),
  DefinedUnit(
      code: '/100',
      codeUC: '',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'per hundred',
        '10^2',
        '10*2',
        'per 100',
      ]),
  DefinedUnit(
      code: '/100DefinedUnit(WBCs)',
      codeUC: '',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/100 WBCs',
        '/100WBCs',
        'per hundred',
        'per 100 white blood cells'
      ]),
  DefinedUnit(
      code: '/100DefinedUnit(cells)',
      codeUC: '',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/100 cells',
        '/100cells',
        'per hundred',
        'per 100 cells',
      ]),
  DefinedUnit(
      code: '/100DefinedUnit(neutrophils)',
      codeUC: '',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/100 neutrophils',
        '/100neutrophils',
        'per hundred',
        'per 100 neutrophils'
      ]),
  DefinedUnit(
      code: '/100DefinedUnit(spermatozoa)',
      codeUC: '',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/100 spermatozoa',
        '/100spermatozoa',
        'per hundred',
        'per 100 spermatozoa'
      ]),
  DefinedUnit(
      code: '/L',
      codeUC: '/L',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/liter',
        '/litre',
        'per liter',
      ],
      printSymbol: '/L'),
  DefinedUnit(
      code: '/U',
      codeUC: '/U',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/enzyme units',
        'per U',
        'per enzyme unit',
      ],
      printSymbol: '/U'),
  DefinedUnit(
      code: '/[HPF]',
      codeUC: '/[HPF]',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/HPF',
        'per HPF',
        'per high power field',
      ],
      printSymbol: '/HPF'),
  DefinedUnit(
      code: '/[IU]',
      codeUC: '/[IU]',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'international units',
        '/IU',
        'per IU',
        'per international unit',
      ],
      printSymbol: '/i/U.'),
  DefinedUnit(
      code: '/[LPF]',
      codeUC: '/[LPF]',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/LPF',
        'per LPF',
        'per low power field',
      ],
      printSymbol: '/LPF'),
  DefinedUnit(
      code: "/[arb'U]",
      codeUC: "/[ARB'U]",
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/arbU',
        'per arbitrary unit',
      ],
      printSymbol: '/arb/ U'),
  DefinedUnit(
      code: '/a',
      codeUC: '/ANN',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/Years',
        '/yrs',
        'yearly',
        'per year',
      ],
      printSymbol: '/a'),
  DefinedUnit(
      code: '/cm[H2O]',
      codeUC: '/CM[H2O]',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/cmH2O',
        '/cm H2O',
        'centimeters',
        'centimetres',
        'per centimeter of water'
      ],
      printSymbol: '/cm HO<sub><r>2<.r></sub>'),
  DefinedUnit(
      code: '/d',
      codeUC: '/D',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/dy',
        'per day',
      ],
      printSymbol: '/d'),
  DefinedUnit(
      code: '/dL',
      codeUC: '/DL',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'per dL',
        '/deciliter',
        '/decilitre',
        'per deciliter',
      ],
      printSymbol: '/dL'),
  DefinedUnit(
      code: '/g',
      codeUC: '/G',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/gm',
        '/gram',
        'per g',
        'per gram',
      ],
      printSymbol: '/g'),
  DefinedUnit(
      code: '/h',
      codeUC: '/HR',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/hr',
        '/hour',
        'per hr',
        'per hour',
      ],
      printSymbol: '/h'),
  DefinedUnit(
      code: '/kg',
      codeUC: '/KG',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'per kg',
        'per kilogram',
      ],
      printSymbol: '/kg'),
  DefinedUnit(
      code: '/m2',
      codeUC: '/M2',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/m^2',
        '/m*2',
        '/sq. m',
        'per square meter',
        'meter squared',
        'metre squared'
      ],
      printSymbol: '/m<sup>2<.sup>'),
  DefinedUnit(
      code: '/m3',
      codeUC: '/M3',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/m^3',
        '/m*3',
        '/cu. m',
        'per cubic meter',
        'meter cubed',
        'per m3',
        'metre^3'
      ],
      printSymbol: '/m<sup>3<.sup>'),
  DefinedUnit(
      code: '/mL',
      codeUC: '/ML',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/milliliter',
        'per mL',
        '/millilitre',
        'per milliliter',
      ],
      printSymbol: '/mL'),
  DefinedUnit(
      code: '/mg',
      codeUC: '/MG',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/milligram',
        'per mg',
        'per milligram',
      ],
      printSymbol: '/mg'),
  DefinedUnit(
      code: '/min',
      codeUC: '/MIN',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/minute',
        'per mins',
        'breaths beats per minute',
        'per minute',
      ],
      printSymbol: '/min'),
  DefinedUnit(
      code: '/mm',
      codeUC: '/MM',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/millimeter',
        'per mm',
        'millimetre',
        'per millimeter',
      ],
      printSymbol: '/mm'),
  DefinedUnit(
      code: '/mo',
      codeUC: '/MO',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/month',
        'per mo',
        'monthly',
        'per month',
      ],
      printSymbol: '/mo'),
  DefinedUnit(
      code: '/s',
      codeUC: '/S',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/second',
        '/sec',
        'per sec',
        'frequency',
        'Hertz',
        'Herz',
        'Hz',
        'becquerels',
        'Bq',
        's-1',
        's^-1',
        'per second'
      ],
      printSymbol: '/s'),
  DefinedUnit(
      code: '/uL',
      codeUC: '/UL',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/microliter',
        '/microlitre',
        '/mcl',
        'per uL',
        'per microliter',
      ],
      printSymbol: '/μL'),
  DefinedUnit(
      code: '/wk',
      codeUC: '/WK',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '/week',
        'per wk',
        'weekly',
        '/weeks',
        'per week',
      ],
      printSymbol: '/wk'),
  DefinedUnit(
      code: '10*',
      codeUC: '10*',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        'the number ten for arbitrary powers',
        '10^',
        '10 to the arbitrary powers',
      ],
      printSymbol: '10'),
  DefinedUnit(
      code: '10*12/L',
      codeUC: '(10*12)/L',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10^12/L',
        '10*12 per Liter',
        'trillion per liter',
        'trillion per litre',
      ],
      printSymbol: '(10<sup>12</sup>)/L'),
  DefinedUnit(
      code: '10*3',
      codeUC: '10*3',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10^3',
        'thousand',
        '10^3 (used for cell count)',
      ],
      printSymbol: '10<sup>3</sup>'),
  DefinedUnit(
      code: '10*3/L',
      codeUC: '(10*3)/L',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10^3/L',
        '10*3 per liter',
        'thousand per litre',
        'thousand per liter',
      ],
      printSymbol: '(10<sup>3</sup>)/L'),
  DefinedUnit(
      code: '10*3/mL',
      codeUC: '(10*3)/ML',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10^3/mL',
        '10*3 per mL',
        'thousand per milliliter',
        'thousand per millilitre'
      ],
      printSymbol: '(10<sup>3</sup>)/mL'),
  DefinedUnit(
      code: '10*3/uL',
      codeUC: '(10*3)/UL',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10^3/uL',
        '10*3 per uL',
        'thousand per microliter',
        'thousand per microlitre'
      ],
      printSymbol: '(10<sup>3</sup>)/μL'),
  DefinedUnit(
      code: '10*4/uL',
      codeUC: '(10*4)/UL',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10^4/uL',
        '10*4 per uL',
        '10 thousand per microliter',
      ],
      printSymbol: '(10<sup>4</sup>)/μL'),
  DefinedUnit(
      code: '10*5',
      codeUC: '10*5',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        'one hundred thousand',
        '10^5 ',
      ],
      printSymbol: '10<sup>5</sup>'),
  DefinedUnit(
      code: '10*6',
      codeUC: '10*6',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10^6',
      ],
      printSymbol: '10<sup>6</sup>'),
  DefinedUnit(
      code: '10*6.[CFU]/L',
      codeUC: '(10*6).[CFU]/L',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10*6 CFU/L',
        '10^6 CFU/L',
        '10^6CFU',
        '10^6 CFU per liter',
        'million colony forming units',
        'million colony forming unit per liter'
      ],
      printSymbol: '(10<sup>6</sup>).CFU/L'),
  DefinedUnit(
      code: '10*6.[IU]',
      codeUC: '(10*6).[IU]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10*6 IU',
        '10^6 IU',
        'international units',
        'million international unit'
      ],
      printSymbol: '(10<sup>6</sup>).(i.U.)'),
  DefinedUnit(
      code: '10*6/(24.h)',
      codeUC: '(10*6)/HR',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10*6/24hrs',
        '10^6/24 hrs',
        '10*6 per 24 hrs',
        '10^6 per 24 hours',
        'million per 24 hour'
      ],
      printSymbol: '(10<sup>6</sup>)/h'),
  DefinedUnit(
      code: '10*6/L',
      codeUC: '(10*6)/L',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10^6/L',
        '10*6 per Liter',
        '10^6 per Liter',
        'mllion per litre',
        'million per liter'
      ],
      printSymbol: '(10<sup>6</sup>)/L'),
  DefinedUnit(
      code: '10*6/kg',
      codeUC: '(10*6)/KG',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10^6/kg',
        '10*6 per kg',
        '10*6 per kilogram',
        'millions per kilogram',
        'million per kilogram'
      ],
      printSymbol: '(10<sup>6</sup>)/kg'),
  DefinedUnit(
      code: '10*6/mL',
      codeUC: '(10*6)/ML',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10^6/mL',
        '10*6 per mL',
        '10*6 per milliliter',
        'million per millilitre',
        'million per milliliter'
      ],
      printSymbol: '(10<sup>6</sup>)/mL'),
  DefinedUnit(
      code: '10*6/uL',
      codeUC: '(10*6)/UL',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10^6/uL',
        '10^6 per uL',
        '10^6/mcl',
        '10^6 per mcl',
        '10^6 per microliter',
        'million per microlitre',
        'million per microliter'
      ],
      printSymbol: '(10<sup>6</sup>)/μL'),
  DefinedUnit(
      code: '10*8',
      codeUC: '10*8',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '100 million',
        'one hundred million',
        '10^8',
      ],
      printSymbol: '10<sup>8</sup>'),
  DefinedUnit(
      code: '10*9/L',
      codeUC: '(10*9)/L',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10^9/L',
        '10*9 per Liter',
        'billion per litre',
        'billion per liter',
      ],
      printSymbol: '(10<sup>9</sup>)/L'),
  DefinedUnit(
      code: '10*9/mL',
      codeUC: '(10*9)/ML',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10^9/mL',
        '10*9 per mL',
        '10^9 per mL',
        '10*9 per milliliter',
        'billion per millilitre',
        'billion per milliliter'
      ],
      printSymbol: '(10<sup>9</sup>)/mL'),
  DefinedUnit(
      code: '10*9/uL',
      codeUC: '(10*9)/UL',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10^9/uL',
        '10^9 per uL',
        '10^9/mcl',
        '10^9 per mcl',
        '10*9 per uL',
        '10*9 per mcl',
        '10*9/mcl',
        '10^9 per microliter',
        'billion per microlitre',
        'billion per microliter'
      ],
      printSymbol: '(10<sup>9</sup>)/μL'),
  DefinedUnit(
      code: '10.L/(min.m2)',
      codeUC: 'L/(MIN.M2)',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '10 liters per minutes per square meter',
        '10 L per min per m2',
        'm^2',
        '10 L/(min*m2)',
        '10L/(min*m^2)',
        'litres',
        'sq. meter',
        'metre',
        'meters squared',
        '10 liter per minute per square meter'
      ],
      printSymbol: 'L/(min.(m<sup>2</sup>))'),
  DefinedUnit(
      code: '10.L/min',
      codeUC: 'L/MIN',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '10 liters per minute',
        '10 L per min',
        '10L per min',
        '10 L/min',
        '10 litre per minute',
        '10 liter per minute'
      ],
      printSymbol: 'L/min'),
  DefinedUnit(
      code: '10.uN.s/(cm5.m2)',
      codeUC: '(UN.S)/(CM5.M2)',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'dyne seconds per centimeter5 and square meter',
        'dyn.s/(cm5.m2)',
        'dyn.s/cm5/m2',
        'cm^5',
        'm^2',
        '10 micronewton second per centimeter to the fifth power per square meter'
      ],
      printSymbol: '(μN.s)/(cm<sup>5</sup>).(m<sup>2</sup>)'),
  DefinedUnit(
      code: '10^',
      codeUC: '10^',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        '10*',
        '10 to the arbitrary power',
        'the number ten for arbitrary powers'
      ],
      printSymbol: '10'),
  DefinedUnit(
      code: '24.h',
      codeUC: 'HR',
      value: Value(
          unit: 'h',
          unitUC: 'HR',
          value: UcumDecimal.fromString('24'),
          text: '24'),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '24hrs',
        '24 hrs',
        '24 hours',
        'days',
        'dy',
        '24 hour',
      ],
      printSymbol: 'h'),
  DefinedUnit(
      code: 'A',
      codeUC: 'A',
      value: Value(
          unit: 'C/s',
          unitUC: 'C/S',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'electric current',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'Ampère',
        'Amperes',
        'Ampere',
      ],
      printSymbol: 'A'),
  DefinedUnit(
      code: 'A/m',
      codeUC: 'A/M',
      value: Value(
          unit: 'C/s',
          unitUC: 'C/S',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'electric current',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'A/m',
        'amp/meter',
        'magnetic field strength',
        'H',
        'amperes per meter',
        'metre',
        'ampere per meter'
      ],
      printSymbol: 'A/m'),
  DefinedUnit(
      code: 'AU',
      codeUC: 'ASU',
      value: Value(
          unit: 'Mm',
          unitUC: 'MAM',
          value: UcumDecimal.fromString('149597.870691'),
          text: '149597.870691'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'AU',
        'units',
        'astronomic unit',
      ],
      printSymbol: 'AU'),
  DefinedUnit(
      code: 'Ao',
      codeUC: 'AO',
      value: Value(
          unit: 'nm',
          unitUC: 'NM',
          value: UcumDecimal.fromString('0.1'),
          text: '0.1'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'misc',
      names: <String>[
        'Å',
        'Angstroms',
        'Ao',
        'Ångströms',
        'Ångström',
      ],
      printSymbol: 'Å'),
  DefinedUnit(
      code: 'B',
      codeUC: 'B',
      value:
          Value(unit: '1', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'level',
      isMetric: true,
      isSpecial: true,
      class_: 'levels',
      names: <String>[
        'bels',
        'bel',
      ],
      printSymbol: 'B'),
  DefinedUnit(
      code: 'B[10.nV]',
      codeUC: 'B[10.NV]',
      value: Value(
          unit: 'nV', value: UcumDecimal.fromString('10.0'), text: '10.0'),
      property: 'electric potential level',
      isMetric: true,
      isSpecial: true,
      class_: 'levels',
      names: <String>[
        'bel 10 nV',
        'B 10 nV',
        '10 nanovolts bels',
        'bel 10 nanovolt',
      ],
      printSymbol: 'B(10 nV)'),
  DefinedUnit(
      code: 'B[SPL]',
      codeUC: 'B[SPL]',
      value: Value(
          unit: 'Pa',
          value: UcumDecimal.fromString('0.00002'),
          text: '0.00002'),
      property: 'pressure level',
      isMetric: true,
      isSpecial: true,
      class_: 'levels',
      names: <String>[
        'bel SPL',
        'B SPL',
        'sound pressure bels',
        'bel sound pressure',
      ],
      printSymbol: 'B(SPL)'),
  DefinedUnit(
      code: 'B[V]',
      codeUC: 'B[V]',
      value:
          Value(unit: 'V', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'electric potential level',
      isMetric: true,
      isSpecial: true,
      class_: 'levels',
      names: <String>[
        'bel V',
        'B V',
        'volts bels',
        'bel volt',
      ],
      printSymbol: 'B(V)'),
  DefinedUnit(
      code: 'B[W]',
      codeUC: 'B[W]',
      value:
          Value(unit: 'W', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'power level',
      isMetric: true,
      isSpecial: true,
      class_: 'levels',
      names: <String>[
        'bel W',
        'b W',
        'b Watt',
        'Watts bels',
        'bel watt',
      ],
      printSymbol: 'B(W)'),
  DefinedUnit(
      code: 'B[kW]',
      codeUC: 'B[KW]',
      value:
          Value(unit: 'kW', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'power level',
      isMetric: true,
      isSpecial: true,
      class_: 'levels',
      names: <String>[
        'bel kW',
        'B kW',
        'kilowatt bel',
        'kW bel',
        'kW B',
        'bel kilowatt'
      ],
      printSymbol: 'B(kW)'),
  DefinedUnit(
      code: 'B[mV]',
      codeUC: 'B[MV]',
      value:
          Value(unit: 'mV', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'electric potential level',
      isMetric: true,
      isSpecial: true,
      class_: 'levels',
      names: <String>[
        'bel mV',
        'B mV',
        'millivolt bels',
        '10^-3V bels',
        '10*-3V',
        'bel millivolt'
      ],
      printSymbol: 'B(mV)'),
  DefinedUnit(
      code: 'B[uV]',
      codeUC: 'B[UV]',
      value:
          Value(unit: 'uV', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'electric potential level',
      isMetric: true,
      isSpecial: true,
      class_: 'levels',
      names: <String>[
        'bel uV',
        'B uV',
        'microvolts bels',
        '10^-6V bel',
        '10*-6V bel',
        'bel microvolt'
      ],
      printSymbol: 'B(μV)'),
  DefinedUnit(
      code: 'Bd',
      codeUC: 'BD',
      value: Value(
          unit: 's',
          unitUC: '/s',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'signal transmission rate',
      isMetric: true,
      isSpecial: false,
      class_: 'infotech',
      names: <String>[
        'Bd',
        'bauds',
        'baud',
      ],
      printSymbol: 'Bd'),
  DefinedUnit(
      code: 'Bi',
      codeUC: 'BI',
      value: Value(
          unit: 'A',
          unitUC: 'A',
          value: UcumDecimal.fromString('10'),
          text: '10'),
      property: 'electric current',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'Bi',
        'abamperes',
        'abA',
        'Biot',
      ],
      printSymbol: 'Bi'),
  DefinedUnit(
      code: 'Bq',
      codeUC: 'BQ',
      value: Value(
          unit: 's-1',
          unitUC: 'S-1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'radioactivity',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'activity',
        'radiation',
        'becquerels',
        'becquerel',
      ],
      printSymbol: 'Bq'),
  DefinedUnit(
      code: 'By',
      codeUC: 'BY',
      value: Value(
          unit: 'bit',
          unitUC: 'bit',
          value: UcumDecimal.fromString('8'),
          text: '8'),
      property: 'amount of information',
      isMetric: true,
      isSpecial: false,
      class_: 'infotech',
      names: <String>[
        'bytes',
        'byte',
      ],
      printSymbol: 'B'),
  DefinedUnit(
      code: 'Cel',
      codeUC: 'CEL',
      value:
          Value(unit: 'K', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'temperature',
      isMetric: true,
      isSpecial: true,
      class_: 'si',
      names: <String>[
        '°C',
        'degrees',
        'degree Celsius',
      ],
      printSymbol: '°C'),
  DefinedUnit(
      code: 'Ci',
      codeUC: 'CI',
      value: Value(
          unit: 'Bq',
          unitUC: 'BQ',
          value: UcumDecimal.fromString('37000000000'),
          text: '37e9'),
      property: 'radioactivity',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'curies',
        'Curie',
      ],
      printSymbol: 'Ci'),
  DefinedUnit(
      code: 'F',
      codeUC: 'F',
      value: Value(
          unit: 'C/V',
          unitUC: 'C/V',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'electric capacitance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'farads',
        'electric capacitance',
        'farad',
      ],
      printSymbol: 'F'),
  DefinedUnit(
      code: 'G',
      codeUC: 'GS',
      value: Value(
          unit: 'T',
          unitUC: 'T',
          value: UcumDecimal.fromString('0.0001'),
          text: '1e-4'),
      property: 'magnetic flux density',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'magnetic fields',
        'magnetic flux density',
        'induction',
        'B',
        'Gauss'
      ],
      printSymbol: 'Gs'),
  DefinedUnit(
      code: 'Gal',
      codeUC: 'GL',
      value: Value(
          unit: 'cm/s2',
          unitUC: 'CM/S2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'acceleration',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'galileos',
        'Gals',
        'Gal',
      ],
      printSymbol: 'Gal'),
  DefinedUnit(
      code: 'Gb',
      codeUC: 'GB',
      value: Value(
          unit: 'Oe.cm',
          unitUC: 'OE.CM',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'magnetic tension',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'Gi',
        'magnetomotive force',
        'Gilberts',
        'Gilbert',
      ],
      printSymbol: 'Gb'),
  DefinedUnit(
      code: 'Gy',
      codeUC: 'GY',
      value: Value(
          unit: 'J/kg',
          unitUC: 'J/KG',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'energy dose',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'absorbed doses',
        'ionizing radiation doses',
        'kerma',
        'grays',
        'gray'
      ],
      printSymbol: 'Gy'),
  DefinedUnit(
      code: 'H',
      codeUC: 'H',
      value: Value(
          unit: 'Wb/A',
          unitUC: 'WB/A',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'inductance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'henries',
        'inductance',
        'henry',
      ],
      printSymbol: 'H'),
  DefinedUnit(
      code: 'Hz',
      codeUC: 'HZ',
      value: Value(
          unit: 's-1',
          unitUC: 'S-1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'frequency',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'Herz',
        'frequency',
        'frequencies',
        'hertz',
      ],
      printSymbol: 'Hz'),
  DefinedUnit(
      code: 'J',
      codeUC: 'J',
      value: Value(
          unit: 'N.m',
          unitUC: 'N.M',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'energy',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'joules',
        'joule',
      ],
      printSymbol: 'J'),
  DefinedUnit(
      code: 'J/L',
      codeUC: 'J/L',
      value: Value(
          unit: 'N.m',
          unitUC: 'N.M',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'energy',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'joules per liter',
        'J per L',
        'joule per liter',
      ],
      printSymbol: 'J/L'),
  DefinedUnit(
      code: 'K/W',
      codeUC: 'K/W',
      value: Value(),
      property: 'temperature',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'degree Kelvin/Watt',
        'K per W',
        'thermal ohm',
        'thermal resistance',
        'degrees',
        'degree Kelvin per Watt'
      ],
      printSymbol: 'K/W'),
  DefinedUnit(
      code: 'Ky',
      codeUC: 'KY',
      value: Value(
          unit: 'cm-1',
          unitUC: 'CM-1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'lineic number',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'wavenumbers',
        'kaysers',
        'Kayser',
      ],
      printSymbol: 'K'),
  DefinedUnit(
      code: 'L',
      codeUC: 'L',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'cubic decimeters',
        'decimeters cubed',
        'decimetres',
        'dm3',
        'dm^3',
        'litres',
        'liters, LT',
        'Liters'
      ],
      printSymbol: 'L'),
  DefinedUnit(
      code: 'L/(24.h)',
      codeUC: 'L/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'L/24hrs',
        'L/24 hrs',
        'L per 24hrs',
        'liters per 24 hours',
        'volume flow rate',
        'Liters per 24 hour'
      ],
      printSymbol: 'L/h'),
  DefinedUnit(
      code: 'L/(8.h)',
      codeUC: 'L/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'L/8hrs',
        'L/8 hrs',
        'L per 8hrs',
        'liters per 8 hours',
        'volume flow rate',
        'Liters per 8 hour'
      ],
      printSymbol: 'L/h'),
  DefinedUnit(
      code: 'L/(min.m2) ',
      codeUC: 'L/(MIN.M2)',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'L/(min.m2)',
        'L/min/m^2',
        'L/min/sq. meter',
        'L per min per m2',
        'liters per minutes per square meter',
        'litres per minute per meter squared',
        'Liters per minute per square meter'
      ],
      printSymbol: 'L/(min.(m<sup>2</sup>))'),
  DefinedUnit(
      code: 'L/L',
      codeUC: 'L/L',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'L per L',
        'liter/liter',
        'Liters per liter',
      ],
      printSymbol: 'L/L'),
  DefinedUnit(
      code: 'L/d',
      codeUC: 'L/D',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'L/dy',
        'L per day',
        'liters per 24 hrs',
        'liters per day',
        'liters per day',
        'litres per 24 hrs',
        'litres per day',
        'litres per 24hrs',
        'Liters per day'
      ],
      printSymbol: 'L/d'),
  DefinedUnit(
      code: 'L/h',
      codeUC: 'L/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'L/hr',
        'L per hr',
        'litres per hour',
        'Liters per hour',
      ],
      printSymbol: 'L/h'),
  DefinedUnit(
      code: 'L/kg',
      codeUC: 'L/KG',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'L per kg',
        'litre per kilogram',
        'Liters per kilogram',
      ],
      printSymbol: 'L/kg'),
  DefinedUnit(
      code: 'L/min',
      codeUC: 'L/MIN',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'liters per minute',
        'litres per minute',
        'Liters per minute',
      ],
      printSymbol: 'L/min'),
  DefinedUnit(
      code: 'L/min/m2',
      codeUC: '(L/MIN)/M2',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'L/(min.m2)',
        'L/min/m^2',
        'L/min/sq. meter',
        'L per min per m2',
        'liters per minutes per square meter',
        'Liters per minute per square meter'
      ],
      printSymbol: '(L/min)/(m<sup>2</sup>)'),
  DefinedUnit(
      code: 'L/s',
      codeUC: 'L/S',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'L per sec',
        'Liters per second',
      ],
      printSymbol: 'L/s'),
  DefinedUnit(
      code: 'L/s/s2',
      codeUC: '(L/S)/S2',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'L/s/s^2',
        'L/sec/sec2',
        'L/sec/sec^2',
        'L/sec/sq. sec',
        'L per s per s2',
        'L per sec per sec2',
        'liters per seconds per square second',
        'litres per second squared',
        'Liters per second per square second'
      ],
      printSymbol: '(L/s)/(s<sup>2</sup>)'),
  DefinedUnit(
      code: 'Lmb',
      codeUC: 'LMB',
      value: Value(
          unit: 'cd/cm2/[pi]',
          unitUC: 'CD/CM2/[PI]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'brightness',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'luminance',
        'lamberts',
        'Lambert',
      ],
      printSymbol: 'L'),
  DefinedUnit(
      code: 'Ms',
      codeUC: 'MAS',
      value: Value(),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'megaseconds',
        'megasecond',
      ],
      printSymbol: 'Ms'),
  DefinedUnit(
      code: 'Mx',
      codeUC: 'MX',
      value: Value(
          unit: 'Wb',
          unitUC: 'WB',
          value: UcumDecimal.fromString('0.00000001'),
          text: '1e-8'),
      property: 'flux of magnetic induction',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'magnetix flux',
        'Maxwells',
        'Maxwell',
      ],
      printSymbol: 'Mx'),
  DefinedUnit(
      code: 'N',
      codeUC: 'N',
      value: Value(
          unit: 'kg.m/s2',
          unitUC: 'KG.M/S2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'force',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'Newton',
        'Newtons',
        'newton',
      ],
      printSymbol: 'N'),
  DefinedUnit(
      code: 'N.cm',
      codeUC: 'N.CM',
      value: Value(
          unit: 'kg.m/s2',
          unitUC: 'KG.M/S2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'force',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'N*cm',
        'Ncm',
        'N cm',
        'Newton*centimeters',
        'Newton* centimetres',
        'torque',
        'work',
        'Newton centimeter'
      ],
      printSymbol: 'N.cm'),
  DefinedUnit(
      code: 'N.s',
      codeUC: 'N.S',
      value: Value(
          unit: 'kg.m/s2',
          unitUC: 'KG.M/S2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'force',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'Newton*seconds',
        'N*s',
        'N s',
        'Ns',
        'impulse',
        'imp',
        'Newton second'
      ],
      printSymbol: 'N.s'),
  DefinedUnit(
      code: 'Np',
      codeUC: 'NEP',
      value:
          Value(unit: '1', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'level',
      isMetric: true,
      isSpecial: true,
      class_: 'levels',
      names: <String>[
        'nepers',
        'neper',
      ],
      printSymbol: 'Np'),
  DefinedUnit(
      code: 'Oe',
      codeUC: 'OE',
      value: Value(
          unit: 'A/m',
          unitUC: '/[PI].A/M',
          value: UcumDecimal.fromString('250'),
          text: '250'),
      property: 'magnetic field intensity',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'H magnetic B field',
        'Oersteds',
        'Oersted',
      ],
      printSymbol: 'Oe'),
  DefinedUnit(
      code: 'Ohm',
      codeUC: 'OHM',
      value: Value(
          unit: 'V/A',
          unitUC: 'V/A',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'electric resistance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'Ω',
        'resistance',
        'ohms',
        'ohm',
      ],
      printSymbol: 'Ω'),
  DefinedUnit(
      code: 'Ohm.m',
      codeUC: 'OHM.M',
      value: Value(
          unit: 'V/A',
          unitUC: 'V/A',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'electric resistance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'electric resistivity',
        'meters',
        'metres',
        'Ohm meter',
      ],
      printSymbol: 'Ω.m'),
  DefinedUnit(
      code: 'P',
      codeUC: 'P',
      value: Value(
          unit: 'dyn.s/cm2',
          unitUC: 'DYN.S/CM2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'dynamic viscosity',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'dynamic viscosity',
        'poises',
        'Poise',
      ],
      printSymbol: 'P'),
  DefinedUnit(
      code: 'Pa',
      codeUC: 'PAL',
      value: Value(
          unit: 'N/m2',
          unitUC: 'N/M2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'pressure',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'Pascal',
        'pascals',
        'pascal',
      ],
      printSymbol: 'Pa'),
  DefinedUnit(
      code: 'R',
      codeUC: 'ROE',
      value: Value(
          unit: 'C/kg',
          unitUC: 'C/KG',
          value: UcumDecimal.fromString('0.000258'),
          text: '2.58e-4'),
      property: 'ion dose',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'röntgen',
        'Roentgens',
        'Roentgen',
      ],
      printSymbol: 'R'),
  DefinedUnit(
      code: 'RAD',
      codeUC: '[RAD]',
      value: Value(
          unit: 'erg/g',
          unitUC: 'ERG/G',
          value: UcumDecimal.fromString('100'),
          text: '100'),
      property: 'energy dose',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'doses',
        'radiation absorbed dose',
      ],
      printSymbol: 'RAD'),
  DefinedUnit(
      code: 'REM',
      codeUC: '[REM]',
      value: Value(
          unit: 'RAD',
          unitUC: '[RAD]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'dose equivalent',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'Roentgen Equivalent in Man',
        'rems',
        'dose equivalents',
        'radiation equivalent man'
      ],
      printSymbol: 'REM'),
  DefinedUnit(
      code: 'S',
      codeUC: 'SIE',
      value: Value(
          unit: 'Ohm-1',
          unitUC: 'OHM-1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'electric conductance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'Reciprocal ohm',
        'mho',
        'Ω−1',
        'conductance',
        'siemens',
      ],
      printSymbol: 'S'),
  DefinedUnit(
      code: 'St',
      codeUC: 'ST',
      value: Value(
          unit: 'cm2/s',
          unitUC: 'CM2/S',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'kinematic viscosity',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'kinematic viscosity',
        'Stokes',
      ],
      printSymbol: 'St'),
  DefinedUnit(
      code: 'Sv',
      codeUC: 'SV',
      value: Value(
          unit: 'J/kg',
          unitUC: 'J/KG',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'dose equivalent',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'sieverts',
        'radiation dose quantities',
        'equivalent doses',
        'effective dose',
        'operational dose',
        'committed dose',
        'sievert'
      ],
      printSymbol: 'Sv'),
  DefinedUnit(
      code: 'T',
      codeUC: 'T',
      value: Value(
          unit: 'Wb/m2',
          unitUC: 'WB/M2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'magnetic flux density',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'Teslas',
        'magnetic field',
        'tesla',
      ],
      printSymbol: 'T'),
  DefinedUnit(
      code: 'Torr',
      codeUC: 'Torr',
      value: Value(
          unit: 'Pa',
          unitUC: 'PAL',
          value: UcumDecimal.fromString('133.322'),
          text: '133.322'),
      property: 'pressure',
      isMetric: false,
      isSpecial: false,
      class_: 'const',
      names: <String>[
        'torrs',
        'Torr',
      ],
      printSymbol: 'Torr'),
  DefinedUnit(
      code: 'U',
      codeUC: 'U',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'micromoles per minute',
        'umol/min',
        'umol per minute',
        'umol min-1',
        'enzyme unit'
      ],
      printSymbol: 'U'),
  DefinedUnit(
      code: 'U/(12.h)',
      codeUC: 'U/HR',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'U/12hrs',
        'U/ 12hrs',
        'U per 12 hrs',
        'enzyme units per 12 hours',
        'enzymatic activity per time',
        'umol per min per 12 hours',
        'micromoles per minute per 12 hours',
        'umol/min/12hr',
        'enzyme unit per 12 hour'
      ],
      printSymbol: 'U/h'),
  DefinedUnit(
      code: 'U/(2.h)',
      codeUC: 'U/HR',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'U/2hrs',
        'U/ 2hrs',
        'U per 2 hrs',
        'enzyme units per 2 hours',
        'enzymatic activity per time',
        'umol per minute per 2 hours',
        'micromoles per minute',
        'umol/min/2hr',
        'umol per min per 2hr',
        'enzyme unit per 2 hour'
      ],
      printSymbol: 'U/h'),
  DefinedUnit(
      code: 'U/(24.h)',
      codeUC: 'U/HR',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'U/24hrs',
        'U/ 24hrs',
        'U per 24 hrs',
        'enzyme units per 24 hours',
        'enzymatic activity per time',
        'micromoles per minute per 24 hours',
        'umol/min/24hr',
        'umol per min per 24hr',
        'enzyme unit per 24 hour'
      ],
      printSymbol: 'U/h'),
  DefinedUnit(
      code: 'U/10',
      codeUC: 'U',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'enzyme unit/10',
        'U per 10',
        'enzyme units per 10',
        'micromoles per minute',
        'umol/min/10',
        'enzyme unit per 10'
      ],
      printSymbol: 'U'),
  DefinedUnit(
      code: 'U/10*10',
      codeUC: 'U/(10*10)',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'U per 10*10',
        'enzyme units per 10*10',
        'U per 10 billion',
        'micromoles per minute per 10 billion',
        'umol/min/10*10',
        'enzyme unit per 10 billion'
      ],
      printSymbol: 'U/(10<sup>10</sup>)'),
  DefinedUnit(
      code: 'U/10*12',
      codeUC: 'U/(10*12)',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'enzyme unit/10*12',
        'U per 10*12',
        'enzyme units per 10*12',
        'enzyme units per trillion',
        'micromoles per minute per trillion',
        'umol/min/10*12',
        'umol per min per 10*12',
        'enzyme unit per trillion'
      ],
      printSymbol: 'U/(10<sup>12</sup>)'),
  DefinedUnit(
      code: 'U/10*6',
      codeUC: 'U/(10*6)',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'enzyme unit/10*6',
        'U per 10*6',
        'enzyme units per 10*6',
        'enzymatic activity per volume',
        'micromoles per minute per million',
        'umol/min/10*6',
        'umol per min per 10*6',
        'enzyme unit per million'
      ],
      printSymbol: 'U/(10<sup>6</sup>)'),
  DefinedUnit(
      code: 'U/10*9',
      codeUC: 'U/(10*9)',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'enzyme unit/10*9',
        'U per 10*9',
        'enzyme units per 10*9',
        'enzymatic activity per volume',
        'micromoles per minute per billion',
        'umol/min/10*9',
        'umol per min per 10*9',
        'enzyme unit per billion'
      ],
      printSymbol: 'U/(10<sup>9</sup>)'),
  DefinedUnit(
      code: 'U/L',
      codeUC: 'U/L',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'enzyme unit/liter',
        'enzyme unit/litre',
        'U per L',
        'enzyme units per liter',
        'enzyme unit per litre',
        'micromoles per minute per liter',
        'umol/min/L',
        'umol per min per L',
        'enzyme unit per liter'
      ],
      printSymbol: 'U/L'),
  DefinedUnit(
      code: 'U/d',
      codeUC: 'U/D',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'U/dy',
        'enzyme units per day',
        'enzymatic activity per time',
        'micromoles per minute per day',
        'umol/min/day',
        'umol per min per day',
        'enzyme unit per day'
      ],
      printSymbol: 'U/d'),
  DefinedUnit(
      code: 'U/dL',
      codeUC: 'U/DL',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'U per dL',
        'enzyme units per deciliter',
        'decilitre',
        'micromoles per minute per deciliter',
        'umol/min/dL',
        'umol per min per dL',
        'enzyme unit per deciliter'
      ],
      printSymbol: 'U/dL'),
  DefinedUnit(
      code: 'U/g',
      codeUC: 'U/G',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'U/gm',
        'U per gm',
        'enzyme units per gram',
        'micromoles per minute per gram',
        'umol/min/g',
        'umol per min per g',
        'enzyme unit per gram'
      ],
      printSymbol: 'U/g'),
  DefinedUnit(
      code: 'U/h',
      codeUC: 'U/HR',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'U/hr',
        'U per hr',
        'enzyme units per hour',
        'micromoles per minute per hour',
        'umol/min/hr',
        'umol per min per hr',
        'enzyme unit per hour'
      ],
      printSymbol: 'U/h'),
  DefinedUnit(
      code: 'U/mL',
      codeUC: 'U/ML',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'U per mL',
        'enzyme units per milliliter',
        'micromoles per minute per milliliter',
        'umol/min/mL',
        'umol per min per mL',
        'enzyme unit per milliliter'
      ],
      printSymbol: 'U/mL'),
  DefinedUnit(
      code: 'U/min',
      codeUC: 'U/MIN',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'enzyme unit/minute',
        'U per min',
        'umol/min/min',
        'micromoles per minute per minute',
        'micromoles per min per min',
        'enzyme unit per minute'
      ],
      printSymbol: 'U/min'),
  DefinedUnit(
      code: 'U/s',
      codeUC: 'U/S',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'U/sec',
        'U per second',
        'enzyme units per second',
        'micromoles per minute per second',
        'umol/min/sec',
        'umol per min per sec',
        'enzyme unit per second'
      ],
      printSymbol: 'U/s'),
  DefinedUnit(
      code: 'V',
      codeUC: 'V',
      value: Value(
          unit: 'J/C',
          unitUC: 'J/C',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'electric potential',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'volts',
        'volt',
      ],
      printSymbol: 'V'),
  DefinedUnit(
      code: 'W',
      codeUC: 'W',
      value: Value(
          unit: 'J/s',
          unitUC: 'J/S',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'power',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'watts',
        'watt',
      ],
      printSymbol: 'W'),
  DefinedUnit(
      code: 'Wb',
      codeUC: 'WB',
      value: Value(
          unit: 'V.s',
          unitUC: 'V.S',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'magnetic flux',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'magnetic flux',
        'webers',
        'weber',
      ],
      printSymbol: 'Wb'),
  DefinedUnit(
      code: "[APL'U]",
      codeUC: "[APL'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'biologic activity of anticardiolipin IgA',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'APL units',
        'APL U',
        'IgA anticardiolipin',
        'IgA Phospholipid',
        'biologic activity of',
        'APL unit'
      ]),
  DefinedUnit(
      code: "[APL'U]/mL",
      codeUC: "[APL'U]/ML",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'biologic activity of anticardiolipin IgA',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'APL/mL',
        "APL'U/mL",
        'APL U/mL',
        'APL/milliliter',
        'IgA anticardiolipin units per milliliter',
        'IgA Phospholipid Units',
        'millilitre',
        'biologic activity of',
        'APL unit per milliliter'
      ],
      printSymbol: '/mL'),
  DefinedUnit(
      code: '[AU]',
      codeUC: '[AU]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property:
          'procedure defined amount of an allergen using some reference standard',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'allergy units',
        'allergen units',
        'AU',
        'allergy unit',
      ],
      printSymbol: 'AU'),
  DefinedUnit(
      code: "[Amb'a'1'U]",
      codeUC: "[AMB'A'1'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'procedure defined amount of the major allergen of ragweed.',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'Amb a 1 unit',
        'Antigen E',
        'AgE U',
        'allergen units',
        'allergen unit for Ambrosia artemisiifolia'
      ],
      printSymbol: 'Amb a 1 U'),
  DefinedUnit(
      code: '[BAU]',
      codeUC: '[BAU]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property:
          'amount of an allergen callibrated through in-vivo testing based on the ID50EAL method of (intradermal dilution for 50mm sum of erythema diameters',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'BAU',
        'Bioequivalent Allergy Units',
        'bioequivalent allergen units',
        'bioequivalent allergen unit'
      ],
      printSymbol: 'BAU'),
  DefinedUnit(
      code: '[Btu]',
      codeUC: '[BTU]',
      value: Value(
          unit: '[Btu_th]',
          unitUC: '[BTU_TH]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'energy',
      isMetric: false,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'BTU',
        'B.T.U.',
        'B.Th.U.',
        'BThU',
        'British thermal units',
        'British thermal unit'
      ],
      printSymbol: 'btu'),
  DefinedUnit(
      code: '[Btu_39]',
      codeUC: '[BTU_39]',
      value: Value(
          unit: 'kJ',
          unitUC: 'kJ',
          value: UcumDecimal.fromString('1.05967'),
          text: '1.05967'),
      property: 'energy',
      isMetric: false,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'BTU 39F',
        'BTU 39 F',
        'B.T.U. 39 F',
        'B.Th.U. 39 F',
        'BThU 39 F',
        'British thermal units',
        'British thermal unit at 39°F'
      ],
      printSymbol: 'Btu<sub>39°F</sub>'),
  DefinedUnit(
      code: '[Btu_59]',
      codeUC: '[BTU_59]',
      value: Value(
          unit: 'kJ',
          unitUC: 'kJ',
          value: UcumDecimal.fromString('1.05480'),
          text: '1.05480'),
      property: 'energy',
      isMetric: false,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'BTU 59 F',
        'BTU 59F',
        'B.T.U. 59 F',
        'B.Th.U. 59 F',
        'BThU 59F',
        'British thermal units',
        'British thermal unit at 59°F'
      ],
      printSymbol: 'Btu<sub>59°F</sub>'),
  DefinedUnit(
      code: '[Btu_60]',
      codeUC: '[BTU_60]',
      value: Value(
          unit: 'kJ',
          unitUC: 'kJ',
          value: UcumDecimal.fromString('1.05468'),
          text: '1.05468'),
      property: 'energy',
      isMetric: false,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'BTU 60 F',
        'BTU 60F',
        'B.T.U. 60 F',
        'B.Th.U. 60 F',
        'BThU 60 F',
        'British thermal units 60 F',
        'British thermal unit at 60°F'
      ],
      printSymbol: 'Btu<sub>60°F</sub>'),
  DefinedUnit(
      code: '[Btu_IT]',
      codeUC: '[BTU_IT]',
      value: Value(
          unit: 'kJ',
          unitUC: 'kJ',
          value: UcumDecimal.fromString('1.05505585262'),
          text: '1.05505585262'),
      property: 'energy',
      isMetric: false,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'BTU IT',
        'B.T.U. IT',
        'B.Th.U. IT',
        'BThU IT',
        'British thermal units IT',
        'international table British thermal unit'
      ],
      printSymbol: 'Btu<sub>IT</sub>'),
  DefinedUnit(
      code: '[Btu_m]',
      codeUC: '[BTU_M]',
      value: Value(
          unit: 'kJ',
          unitUC: 'kJ',
          value: UcumDecimal.fromString('1.05587'),
          text: '1.05587'),
      property: 'energy',
      isMetric: false,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'BTU mean',
        'B.T.U. mean',
        'B.Th.U. mean',
        'BThU mean',
        'British thermal units mean',
        'mean British thermal unit'
      ],
      printSymbol: 'Btu<sub>m</sub>'),
  DefinedUnit(
      code: '[Btu_th]',
      codeUC: '[BTU_TH]',
      value: Value(
          unit: 'kJ',
          unitUC: 'kJ',
          value: UcumDecimal.fromString('1.054350'),
          text: '1.054350'),
      property: 'energy',
      isMetric: false,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'BTU Th',
        'B.T.U. Th',
        'B.Th.U. Th',
        'BThU Th',
        'thermochemical British thermal units',
        'thermochemical British thermal unit'
      ],
      printSymbol: 'Btu<sub>th</sub>'),
  DefinedUnit(
      code: '[CCID_50]',
      codeUC: '[CCID_50]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property:
          'biologic activity (infectivity) of an infectious agent preparation',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'CCID50',
        '50% cell culture infective doses',
        '50% cell culture infectious dose'
      ],
      printSymbol: 'CCID<sub>50</sub>'),
  DefinedUnit(
      code: '[CFU]',
      codeUC: '[CFU]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of a proliferating organism',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'CFU',
        'colony forming units',
      ],
      printSymbol: 'CFU'),
  DefinedUnit(
      code: '[CFU]/L',
      codeUC: '[CFU]/L',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of a proliferating organism',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'CFU per Liter',
        'CFU/L',
        'colony forming units per liter',
      ],
      printSymbol: 'CFU/L'),
  DefinedUnit(
      code: '[CFU]/mL',
      codeUC: '[CFU]/ML',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of a proliferating organism',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'CFU per mL',
        'CFU/mL',
        'colony forming units per milliliter',
      ],
      printSymbol: 'CFU/mL'),
  DefinedUnit(
      code: '[Cal]',
      codeUC: '[CAL]',
      value: Value(
          unit: 'kcal_th',
          unitUC: 'KCAL_TH',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'energy',
      isMetric: false,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'food calories',
        'Cal',
        'kcal',
        'nutrition label Calories',
      ],
      printSymbol: 'Cal'),
  DefinedUnit(
      code: '[Ch]',
      codeUC: '[CH]',
      value: Value(
          unit: 'mm/3',
          unitUC: 'MM/3',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'gauge of catheters',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'Charrières, French scales',
        'French gauges',
        'Fr, Fg, Ga, FR, Ch',
        'French (catheter gauge) '
      ],
      printSymbol: 'Ch'),
  DefinedUnit(
      code: "[D'ag'U]",
      codeUC: "[D'AG'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property:
          'procedure defined amount of a poliomyelitis d-antigen substance',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'DAgU',
        'units',
        'D-antigen unit (polio)',
      ]),
  DefinedUnit(
      code: '[EID_50]',
      codeUC: '[EID_50]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property:
          'biologic activity (infectivity) of an infectious agent preparation',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'EID50',
        '50% embryo infective doses',
        'EID50 Egg Infective Dosage',
        '50% embryo infectious dose'
      ],
      printSymbol: 'EID<sub>50</sub>'),
  DefinedUnit(
      code: '[ELU]',
      codeUC: '[ELU]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary ELISA unit',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'Enzyme-Linked Immunosorbent Assay Units',
        'ELU',
        'EL. U',
        'ELISA unit'
      ]),
  DefinedUnit(
      code: '[EU]',
      codeUC: '[EU]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'Ehrlich unit',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'EU/dL',
        'mgDefinedUnit(urobilinogen)/dL',
        'Ehrlich units (urobilinogen)'
      ]),
  DefinedUnit(
      code: '[FEU]',
      codeUC: '[FEU]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of fibrinogen broken down into the measured d-dimers',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'FEU',
        'fibrinogen equivalent units',
      ]),
  DefinedUnit(
      code: '[FFU]',
      codeUC: '[FFU]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of an infectious agent',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'FFU',
        'focus forming units (cells)',
      ],
      printSymbol: 'FFU'),
  DefinedUnit(
      code: "[GPL'U]",
      codeUC: "[GPL'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'biologic activity of anticardiolipin IgG',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'GPL Units',
        'GPL U',
        'IgG anticardiolipin units',
        'IgG Phospholipid',
        'GPL unit'
      ]),
  DefinedUnit(
      code: "[GPL'U]/mL",
      codeUC: "[GPL'U]/ML",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'biologic activity of anticardiolipin IgG',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'GPL U/mL',
        "GPL'U/mL",
        'GPL/mL',
        'GPL U per mL',
        'IgG Phospholipid Units per milliliters',
        'IgG anticardiolipin units',
        'millilitres',
        'GPL unit per milliliter'
      ],
      printSymbol: '/mL'),
  DefinedUnit(
      code: '[G]',
      codeUC: '[GC]',
      value: Value(
          unit: 'm3.kg-1.s-2',
          unitUC: 'M3.KG-1.S-2',
          value: UcumDecimal.fromString('0.0000000000667259'),
          text: '6.67259e-11'),
      property: '(unclassified)',
      isMetric: true,
      isSpecial: false,
      class_: 'const',
      names: <String>[
        'G',
        'gravitational constant',
        "Newton's constant",
        'Newtonian constant of gravitation'
      ],
      printSymbol: '<i>G</i>'),
  DefinedUnit(
      code: '[HPF]',
      codeUC: '[HPF]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'view area in microscope',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'HPF',
        'high power field (microscope)',
      ],
      printSymbol: 'HPF'),
  DefinedUnit(
      code: '[HP]',
      codeUC: '[HP]',
      value: Value(
          unit: '[ft_i].[lbf_av]/s',
          unitUC: '[FT_I].[LBF_AV]/S',
          value: UcumDecimal.fromString('550'),
          text: '550'),
      property: 'power',
      isMetric: false,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'imperial horsepowers',
        'horsepower - mechanical',
      ]),
  DefinedUnit(
      code: '[IR]',
      codeUC: '[IR]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property:
          'amount of an allergen callibrated through in-vivo testing using the Stallergenes® method.',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'IR',
        'indexes',
        'index of reactivity (allergen)',
      ],
      printSymbol: 'IR'),
  DefinedUnit(
      code: '[IU]',
      codeUC: '[IU]',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'international units',
        'IE',
        'F2',
        'international unit - arbitrary'
      ],
      printSymbol: 'i.U.'),
  DefinedUnit(
      code: '[IU]/(2.h)',
      codeUC: '[IU]/HR',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'IU/2hrs',
        'IU/2 hours',
        'IU per 2 hrs',
        'international units per 2 hours',
        'international unit per 2 hour'
      ],
      printSymbol: '(i.U.)/h'),
  DefinedUnit(
      code: '[IU]/(24.h)',
      codeUC: '[IU]/HR',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'IU/24hr',
        'IU/24 hours',
        'IU per 24 hrs',
        'international units per 24 hours',
        'international unit per 24 hour'
      ],
      printSymbol: '(i.U.)/h'),
  DefinedUnit(
      code: '[IU]/L',
      codeUC: '[IU]/L',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'IU/L',
        'IU/liter',
        'IU per liter',
        'international unit per liter'
      ],
      printSymbol: '(i.U.)/L'),
  DefinedUnit(
      code: '[IU]/d',
      codeUC: '[IU]/D',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'IU/dy',
        'IU/days',
        'IU per dys',
        'international units per day',
        'international unit per day'
      ],
      printSymbol: '(i.U.)/d'),
  DefinedUnit(
      code: '[IU]/dL',
      codeUC: '[IU]/DL',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'IU/dL',
        'IU per dL',
        'international units per deciliters',
        'international unit per deciliter'
      ],
      printSymbol: '(i.U.)/dL'),
  DefinedUnit(
      code: '[IU]/g',
      codeUC: '[IU]/G',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'IU/gm',
        'IU/gram',
        'IU per gm',
        'IU per g',
        'international units per gram',
        'international unit per gram'
      ],
      printSymbol: '(i.U.)/g'),
  DefinedUnit(
      code: '[IU]/h',
      codeUC: '[IU]/HR',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'IU/hrs',
        'IU per hours',
        'international units per hour',
        'international unit per hour'
      ],
      printSymbol: '(i.U.)/h'),
  DefinedUnit(
      code: '[IU]/kg',
      codeUC: '[IU]/KG',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'IU/kg',
        'IU/kilogram',
        'IU per kg',
        'international unit per kilogram'
      ],
      printSymbol: '(i.U.)/kg'),
  DefinedUnit(
      code: '[IU]/kg/d',
      codeUC: '[IU]/KG/D',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'IU/kg/dy',
        'IU/kg/day',
        'IU/kilogram/day',
        'IU per kg per day',
        'international unit per kilogram per day'
      ],
      printSymbol: '(i.U.)/kg/d'),
  DefinedUnit(
      code: '[IU]/mL',
      codeUC: '[IU]/ML',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'IU/mL',
        'IU per mL',
        'international units per milliliter',
        'international unit per milliliter'
      ],
      printSymbol: '(i.U.)/mL'),
  DefinedUnit(
      code: '[IU]/min',
      codeUC: '[IU]/MIN',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'IU/min',
        'IU/minute',
        'IU per minute',
        'international units per minute',
        'international unit per minute'
      ],
      printSymbol: '(i.U.)/min'),
  DefinedUnit(
      code: '[LPF]',
      codeUC: '[LPF]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('100'),
          text: '100'),
      property: 'view area in microscope',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'LPF',
        'fields',
        'low power field (microscope)',
      ],
      printSymbol: 'LPF'),
  DefinedUnit(
      code: '[Lf]',
      codeUC: '[LF]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'procedure defined amount of an antigen substance',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'Lf doses',
        'Limit of flocculation',
      ],
      printSymbol: 'Lf'),
  DefinedUnit(
      code: '[MET]',
      codeUC: '[MET]',
      value: Value(
          unit: 'mL/min/kg',
          unitUC: 'ML/MIN/KG',
          value: UcumDecimal.fromString('3.5'),
          text: '3.5'),
      property: 'metabolic cost of physical activity',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'metabolic equivalents',
        'Metabolic Equivalent of Task ',
      ],
      printSymbol: 'MET'),
  DefinedUnit(
      code: "[MPL'U]",
      codeUC: "[MPL'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'biologic activity of anticardiolipin IgM',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'MPL units',
        'MPL U',
        "MPL'U",
        'IgM anticardiolipin units',
        'IgM Phospholipid Units',
        'MPL unit'
      ]),
  DefinedUnit(
      code: "[MPL'U]/mL",
      codeUC: "[MPL'U]/ML",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'biologic activity of anticardiolipin IgM',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'MPL/mL',
        'MPL U/mL',
        "MPL'U/mL",
        'IgM anticardiolipin units',
        'IgM Phospholipid Units',
        'MPL unit per milliliter'
      ],
      printSymbol: '/mL'),
  DefinedUnit(
      code: '[PFU]',
      codeUC: '[PFU]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of an infectious agent',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'PFU',
        'plaque forming units',
      ],
      printSymbol: 'PFU'),
  DefinedUnit(
      code: '[PNU]',
      codeUC: '[PNU]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'procedure defined amount of a protein substance',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'protein nitrogen units',
        'PNU',
        'protein nitrogen unit (allergen testing)'
      ],
      printSymbol: 'PNU'),
  DefinedUnit(
      code: '[PRU]',
      codeUC: '[PRU]',
      value: Value(
          unit: 'mm[Hg].s/ml',
          unitUC: 'MM[HG].S/ML',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'fluid resistance',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'peripheral vascular resistance units',
        'peripheral resistance unit',
        'peripheral resistance units',
        'PRU',
        'peripheral vascular resistance unit'
      ],
      printSymbol: 'P.R.U.'),
  DefinedUnit(
      code: '[S]',
      codeUC: '[S]',
      value: Value(
          unit: 's',
          unitUC: '10*-13.S',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'sedimentation coefficient',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'Sv',
        '10^-13 seconds',
        '100 fs',
        '100 femtoseconds',
        'Svedberg unit'
      ],
      printSymbol: 'S'),
  DefinedUnit(
      code: '[TCID_50]',
      codeUC: '[TCID_50]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property:
          'biologic activity (infectivity) of an infectious agent preparation',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'TCID50',
        '50% tissue culture infective dose',
        '50% tissue culture infectious dose'
      ],
      printSymbol: 'TCID<sub>50</sub>'),
  DefinedUnit(
      code: "[USP'U]",
      codeUC: "[USP'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'USP U',
        "USP'U",
        'United States Pharmacopeia unit',
      ],
      printSymbol: 'U.S.P.'),
  DefinedUnit(
      code: '[acr_br]',
      codeUC: '[ACR_BR]',
      value: Value(
          unit: '[yd_br]2',
          unitUC: '[YD_BR]2',
          value: UcumDecimal.fromString('4840'),
          text: '4840'),
      property: 'area',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-length',
      names: <String>[
        'Imperial acres',
        'British',
        'a',
        'ac',
        'ar',
        'acr',
        'acre',
      ]),
  DefinedUnit(
      code: '[acr_us]',
      codeUC: '[ACR_US]',
      value: Value(
          unit: '[rd_us]2',
          unitUC: '[RD_US]2',
          value: UcumDecimal.fromString('160'),
          text: '160'),
      property: 'area',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        'Acre USA Survey',
        'Acre USA',
        'survey acres',
        'acre - US',
      ]),
  DefinedUnit(
      code: "[anti'Xa'U]",
      codeUC: "[ANTI'XA'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'biologic activity of factor Xa inhibitor (heparin)',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'units',
        'anti factor Xa unit',
      ]),
  DefinedUnit(
      code: "[arb'U]",
      codeUC: "[ARB'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'arbitary units',
        'arb units',
        'arbU',
        'arbitary unit',
      ],
      printSymbol: 'arb. U'),
  DefinedUnit(
      code: "[arb'U]/mL",
      codeUC: "[ARB'U]/ML",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        "arb'U/mL",
        'arbU/mL',
        'arb U/mL',
        'arbitrary units per milliliter',
        'millilitre',
        'arbitrary unit per milliliter'
      ],
      printSymbol: '(arb. U)/mL'),
  DefinedUnit(
      code: '[bbl_us]',
      codeUC: '[BBL_US]',
      value: Value(
          unit: '[gal_us]',
          unitUC: '[GAL_US]',
          value: UcumDecimal.fromString('42'),
          text: '42'),
      property: 'fluid volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'bbl',
        'barrel - US',
      ]),
  DefinedUnit(
      code: "[bdsk'U]",
      codeUC: "[BDSK'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'biologic activity of phosphatase',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'Bodansky unit',
      ]),
  DefinedUnit(
      code: "[beth'U]",
      codeUC: "[BETH'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'biologic activity of factor VIII inhibitor',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'BU',
        'Bethesda unit',
      ]),
  DefinedUnit(
      code: '[bf_i]',
      codeUC: '[BF_I]',
      value: Value(
          unit: '[in_i]3',
          unitUC: '[IN_I]3',
          value: UcumDecimal.fromString('144'),
          text: '144'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'BDFT',
        'FBM',
        'BF',
        'board feet',
        'international',
        'board foot',
      ]),
  DefinedUnit(
      code: '[bu_br]',
      codeUC: '[BU_BR]',
      value: Value(
          unit: '[pk_br]',
          unitUC: '[PK_BR]',
          value: UcumDecimal.fromString('4'),
          text: '4'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-volumes',
      names: <String>[
        'British bushels',
        'imperial',
        'br bsh',
        'br bu',
        'imp',
        'bushel - British'
      ]),
  DefinedUnit(
      code: '[bu_us]',
      codeUC: '[BU_US]',
      value: Value(
          unit: '[in_i]3',
          unitUC: '[IN_I]3',
          value: UcumDecimal.fromString('2150.42'),
          text: '2150.42'),
      property: 'dry volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'US bushels',
        'US bsh',
        'US bu',
        'bushel - US',
      ]),
  DefinedUnit(
      code: '[c]',
      codeUC: '[C]',
      value: Value(
          unit: 'm/s',
          unitUC: 'M/S',
          value: UcumDecimal.fromString('299792458'),
          text: '299792458'),
      property: 'velocity',
      isMetric: true,
      isSpecial: false,
      class_: 'const',
      names: <String>[
        'speed of light',
        'velocity of light in a vacuum',
      ],
      printSymbol: '<i>c</i>'),
  DefinedUnit(
      code: '[car_Au]',
      codeUC: '[CAR_AU]',
      value: Value(
          unit: '/24',
          unitUC: '/24',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'mass fraction',
      isMetric: false,
      isSpecial: false,
      class_: 'misc',
      names: <String>[
        'karats',
        'k',
        'kt',
        'car au',
        'carats',
        'carat of gold alloys',
      ],
      printSymbol: 'ct<sub><r>Au</r></sub>'),
  DefinedUnit(
      code: '[car_m]',
      codeUC: '[CAR_M]',
      value: Value(
          unit: 'g',
          unitUC: 'G',
          value: UcumDecimal.fromString('0.2'),
          text: '2e-1'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'misc',
      names: <String>[
        'carats',
        'ct',
        'car m',
        'metric carat',
      ],
      printSymbol: 'ct<sub>m</sub>'),
  DefinedUnit(
      code: '[cft_i]',
      codeUC: '[CFT_I]',
      value: Value(
          unit: '[ft_i]3',
          unitUC: '[FT_I]3',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'ft3',
        'ft^3',
        'ft*3',
        'cu. ft',
        'cubic feet',
        'cubed',
        '[ft_i]3',
        'cubic foot'
      ]),
  DefinedUnit(
      code: '[ch_br]',
      codeUC: '[CH_BR]',
      value: Value(
          unit: '[rd_br]',
          unitUC: '[RD_BR]',
          value: UcumDecimal.fromString('4'),
          text: '4'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-length',
      names: <String>[
        "Gunter's Chain British",
        'Gunters Chain British',
        "Surveyor's Chain British",
        "Gunter's chain - British"
      ]),
  DefinedUnit(
      code: '[ch_us]',
      codeUC: '[CH_US]',
      value: Value(
          unit: '[rd_us]',
          unitUC: '[RD_US]',
          value: UcumDecimal.fromString('4'),
          text: '4'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        "surveyor's chain",
        "Surveyor's chain USA",
        'Gunter’s measurement',
        'surveyor’s measurement',
        "Gunter's Chain USA",
        "Gunter's chain - US"
      ]),
  DefinedUnit(
      code: '[cicero]',
      codeUC: '[CICERO]',
      value: Value(
          unit: '[didot]',
          unitUC: '[DIDOT]',
          value: UcumDecimal.fromString('12'),
          text: '12'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'typeset',
      names: <String>[
        "Didot's pica",
        'ciceros',
        'picas',
        'cicero',
      ]),
  DefinedUnit(
      code: '[cin_i]',
      codeUC: '[CIN_I]',
      value: Value(
          unit: '[in_i]3',
          unitUC: '[IN_I]3',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'in3',
        'in^3',
        'in*3',
        'inches^3',
        'inches*3',
        'cu. in',
        'cu in',
        'cubic inches',
        'inches cubed',
        'cin',
        'cubic inch'
      ]),
  DefinedUnit(
      code: '[cml_i]',
      codeUC: '[CML_I]',
      value: Value(
          unit: '[pi]/4.[mil_i]2',
          unitUC: '[PI]/4.[MIL_I]2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'area',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'circular mils',
        'cml I',
        'international',
        'circular mil',
      ],
      printSymbol: 'circ.mil'),
  DefinedUnit(
      code: '[cr_i]',
      codeUC: '[CR_I]',
      value: Value(
          unit: '[ft_i]3',
          unitUC: '[FT_I]3',
          value: UcumDecimal.fromString('128'),
          text: '128'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'crd I',
        'international cords',
        'cord',
      ]),
  DefinedUnit(
      code: '[crd_us]',
      codeUC: '[CRD_US]',
      value: Value(
          unit: '[ft_i]3',
          unitUC: '[FT_I]3',
          value: UcumDecimal.fromString('128'),
          text: '128'),
      property: 'fluid volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'US cord',
        'US cords',
        'crd us',
        'us crd',
        'cord - US',
      ]),
  DefinedUnit(
      code: '[cup_m]',
      codeUC: '[CUP_M]',
      value: Value(
          unit: 'mL',
          unitUC: 'ML',
          value: UcumDecimal.fromString('240'),
          text: '240'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'cup m',
        'metric cups',
        'cup - US legal',
      ]),
  DefinedUnit(
      code: '[cup_us]',
      codeUC: '[CUP_US]',
      value: Value(
          unit: '[tbs_us]',
          unitUC: '[TBS_US]',
          value: UcumDecimal.fromString('16'),
          text: '16'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'cup us',
        'us cups',
        'cup - US customary',
      ]),
  DefinedUnit(
      code: '[cyd_i]',
      codeUC: '[CYD_I]',
      value: Value(
          unit: '[yd_i]3',
          unitUC: '[YD_I]3',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'cubic yards',
        'cubic yds',
        'cu yards',
        'CYs',
        'yards^3',
        'yd^3',
        'yds^3',
        'yd3',
        'yds3',
        'cubic yard'
      ],
      printSymbol: 'cu.yd'),
  DefinedUnit(
      code: '[degF]',
      codeUC: '[DEGF]',
      value: Value(
          unit: 'K',
          value: UcumDecimal.fromString('0.5555555555555556'),
          text: '0.5555555555555556'),
      property: 'temperature',
      isMetric: false,
      isSpecial: true,
      class_: 'heat',
      names: <String>[
        '°F',
        'deg F',
        'degrees Fahrenheit',
      ],
      printSymbol: '°F'),
  DefinedUnit(
      code: '[degR]',
      codeUC: '[degR]',
      value: Value(
          unit: 'K/9',
          unitUC: 'K/9',
          value: UcumDecimal.fromString('5'),
          text: '5'),
      property: 'temperature',
      isMetric: false,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        '°R',
        '°Ra',
        'Rankine',
        'degrees Rankine',
      ],
      printSymbol: '°R'),
  DefinedUnit(
      code: '[degRe]',
      codeUC: '[degRe]',
      value:
          Value(unit: 'K', value: UcumDecimal.fromString('1.25'), text: '1.25'),
      property: 'temperature',
      isMetric: false,
      isSpecial: true,
      class_: 'heat',
      names: <String>[
        '°Ré, °Re, °r',
        'Réaumur',
        'degree Reaumur',
        'Reaumur',
        'degrees Réaumur'
      ],
      printSymbol: '°Ré'),
  DefinedUnit(
      code: '[den]',
      codeUC: '[DEN]',
      value: Value(
          unit: 'g/9/km',
          unitUC: 'G/9/KM',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'linear mass density (of textile thread)',
      isMetric: false,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'den',
        'deniers',
        'Denier (linear mass density)',
      ],
      printSymbol: 'den'),
  DefinedUnit(
      code: '[didot]',
      codeUC: '[DIDOT]',
      value: Value(
          unit: '[ligne]/6',
          unitUC: '[LIGNE]/6',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'typeset',
      names: <String>[
        'Didot point',
        'dd',
        'Didots Point',
        'didots',
        'points',
        'didot',
      ]),
  DefinedUnit(
      code: '[diop]',
      codeUC: '[DIOP]',
      value: Value(
          unit: 'm',
          unitUC: '/M',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'refraction of a lens',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'diopters',
        'diop',
        'dioptre',
        'dpt',
        'refractive power',
        'diopter (lens)'
      ],
      printSymbol: 'dpt'),
  DefinedUnit(
      code: '[dpt_us]',
      codeUC: '[DPT_US]',
      value: Value(
          unit: '[dqt_us]/2',
          unitUC: '[DQT_US]/2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'dry volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'dry pints',
        'dry pint US',
        'US dry pint',
        'dry pt',
        'dpt',
        'dpt us',
        'dry pint - US'
      ]),
  DefinedUnit(
      code: '[dqt_us]',
      codeUC: '[DQT_US]',
      value: Value(
          unit: '[pk_us]/8',
          unitUC: '[PK_US]/8',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'dry volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'dry quarts',
        'dry quart US',
        'US dry quart',
        'dry qt',
        'us dry qt',
        'dqt',
        'dqt us',
        'dry quart - US'
      ]),
  DefinedUnit(
      code: '[dr_ap]',
      codeUC: '[DR_AP]',
      value: Value(
          unit: '[sc_ap]',
          unitUC: '[SC_AP]',
          value: UcumDecimal.fromString('3'),
          text: '3'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'apoth',
      names: <String>[
        'ʒ',
        'drachm',
        'apothecaries drams',
        'dr ap',
        'dram ap',
        'dram - apothecary'
      ]),
  DefinedUnit(
      code: '[dr_av]',
      codeUC: '[DR_AV]',
      value: Value(
          unit: '[oz_av]/16',
          unitUC: '[OZ_AV]/16',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'avoirdupois',
      names: <String>[
        'Dram',
        'drams avoirdupois',
        'avoidupois dram',
        'international dram',
        'Dram mass unit'
      ]),
  DefinedUnit(
      code: '[drp]',
      codeUC: '[DRP]',
      value: Value(
          unit: 'ml/20',
          unitUC: 'ML/20',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'drop dosing units',
        'metric drops',
        'gtt',
        'drop - metric (1/20 mL)'
      ],
      printSymbol: 'drp'),
  DefinedUnit(
      code: "[dye'U]",
      codeUC: "[DYE'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'biologic activity of amylase',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'units',
        'Dye unit',
      ]),
  DefinedUnit(
      code: '[e]',
      codeUC: '[E]',
      value: Value(
          unit: 'C',
          unitUC: 'C',
          value: UcumDecimal.fromString('0.000000000000000000160217733'),
          text: '1.60217733e-19'),
      property: 'electric charge',
      isMetric: true,
      isSpecial: false,
      class_: 'const',
      names: <String>[
        'e',
        'q',
        'electric charges',
        'elementary charge',
      ],
      printSymbol: '<i>e</i>'),
  DefinedUnit(
      code: '[eps_0]',
      codeUC: '[EPS_0]',
      value: Value(
          unit: 'F/m',
          unitUC: 'F/M',
          value: UcumDecimal.fromString('0.000000000008854187817'),
          text: '8.854187817e-12'),
      property: 'electric permittivity',
      isMetric: true,
      isSpecial: false,
      class_: 'const',
      names: <String>[
        'ε0',
        'Electric Constant',
        'vacuum permittivity',
        'permittivity of free space',
        'permittivity of vacuum - electric'
      ],
      printSymbol: '<i>ε<sub><r>0</r></sub></i>'),
  DefinedUnit(
      code: '[fdr_br]',
      codeUC: '[FDR_BR]',
      value: Value(
          unit: '[foz_br]/8',
          unitUC: '[FOZ_BR]/8',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-volumes',
      names: <String>[
        'British fluid drams',
        'fdr br',
        'fluid dram - British',
      ]),
  DefinedUnit(
      code: '[fdr_us]',
      codeUC: '[FDR_US]',
      value: Value(
          unit: '[foz_us]/8',
          unitUC: '[FOZ_US]/8',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'fluid volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'US fluid drams',
        'fdr us',
        'fluid dram - US',
      ]),
  DefinedUnit(
      code: '[foz_br]',
      codeUC: '[FOZ_BR]',
      value: Value(
          unit: '[gil_br]/5',
          unitUC: '[GIL_BR]/5',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-volumes',
      names: <String>[
        'British fluid ounces',
        'Imperial fluid ounces',
        'br fozs',
        'imp fozs',
        'br fl ozs',
        'fluid ounce - British'
      ]),
  DefinedUnit(
      code: '[foz_m]',
      codeUC: '[FOZ_M]',
      value: Value(
          unit: 'mL',
          unitUC: 'ML',
          value: UcumDecimal.fromString('30'),
          text: '30'),
      property: 'fluid volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'metric fluid ounces',
        'fozs m',
        'fl ozs m',
        'fluid ounce - metric'
      ],
      printSymbol: 'oz fl'),
  DefinedUnit(
      code: '[foz_us]',
      codeUC: '[FOZ_US]',
      value: Value(
          unit: '[gil_us]/4',
          unitUC: '[GIL_US]/4',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'fluid volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'US fluid ounces',
        'fl ozs',
        'FO',
        'fl. oz.',
        'foz us',
        'fluid ounce - US'
      ],
      printSymbol: 'oz fl'),
  DefinedUnit(
      code: '[ft_br]',
      codeUC: '[FT_BR]',
      value: Value(
          unit: '[in_br]',
          unitUC: '[IN_BR]',
          value: UcumDecimal.fromString('12'),
          text: '12'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-length',
      names: <String>[
        'British Foot',
        'Imperial Foot',
        'feet',
        'imp fts',
        'br fts',
        'foot - British'
      ]),
  DefinedUnit(
      code: '[ft_i]',
      codeUC: '[FT_I]',
      value: Value(
          unit: '[in_i]',
          unitUC: '[IN_I]',
          value: UcumDecimal.fromString('12'),
          text: '12'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'ft',
        'fts',
        'foot',
        'international foot',
        'feet',
        'international feet',
        'height'
      ],
      printSymbol: 'ft'),
  DefinedUnit(
      code: '[ft_us]',
      codeUC: '[FT_US]',
      value: Value(
          unit: 'm/3937',
          unitUC: 'M/3937',
          value: UcumDecimal.fromString('1200'),
          text: '1200'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        'US foot',
        'foot US',
        'us ft',
        'ft us',
        'height',
        'visual distance',
        'feet',
        'foot - US'
      ],
      printSymbol: 'ft<sub>us</sub>'),
  DefinedUnit(
      code: '[ft_us]/[ft_us]',
      codeUC: '[FT_US]/[FT_US]',
      value: Value(
          unit: 'm/3937',
          unitUC: 'M/3937',
          value: UcumDecimal.fromString('1200'),
          text: '1200'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        'ft/ft',
        'ft per ft',
        'feet per feet',
        'visual acuity',
        'foot per foot - US'
      ],
      printSymbol: '(ft<sub>us</sub>)/(ft<sub>us</sub>)'),
  DefinedUnit(
      code: '[fth_br]',
      codeUC: '[FTH_BR]',
      value: Value(
          unit: '[ft_br]',
          unitUC: '[FT_BR]',
          value: UcumDecimal.fromString('6'),
          text: '6'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-length',
      names: <String>[
        'British fathoms',
        'imperial fathoms',
        'br fth',
        'imp fth',
        'fathom - British'
      ]),
  DefinedUnit(
      code: '[fth_i]',
      codeUC: '[FTH_I]',
      value: Value(
          unit: '[ft_i]',
          unitUC: '[FT_I]',
          value: UcumDecimal.fromString('6'),
          text: '6'),
      property: 'depth of water',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'international fathoms',
        'fathom',
      ],
      printSymbol: 'fth'),
  DefinedUnit(
      code: '[fth_us]',
      codeUC: '[FTH_US]',
      value: Value(
          unit: '[ft_us]',
          unitUC: '[FT_US]',
          value: UcumDecimal.fromString('6'),
          text: '6'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        'US fathoms',
        'fathom USA',
        'fth us',
        'fathom - US',
      ]),
  DefinedUnit(
      code: '[fur_us]',
      codeUC: '[FUR_US]',
      value: Value(
          unit: '[rd_us]',
          unitUC: '[RD_US]',
          value: UcumDecimal.fromString('40'),
          text: '40'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        'US furlongs',
        'fur us',
        'furlong - US',
      ]),
  DefinedUnit(
      code: '[g]',
      codeUC: '[G]',
      value: Value(
          unit: 'm/s2',
          unitUC: 'M/S2',
          value: UcumDecimal.fromString('9.80665'),
          text: '980665e-5'),
      property: 'acceleration',
      isMetric: true,
      isSpecial: false,
      class_: 'const',
      names: <String>[
        'standard gravity',
        'g',
        'ɡ0',
        'ɡn',
        'standard acceleration of free fall'
      ],
      printSymbol: '<i>g<sub>n</sub></i>'),
  DefinedUnit(
      code: '[gal_br]',
      codeUC: '[GAL_BR]',
      value: Value(
          unit: 'l',
          unitUC: 'L',
          value: UcumDecimal.fromString('4.54609'),
          text: '4.54609'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-volumes',
      names: <String>[
        'imperial gallons, UK gallons',
        'British gallons',
        'br gal',
        'imp gal',
        'gallon- British'
      ]),
  DefinedUnit(
      code: '[gal_us]',
      codeUC: '[GAL_US]',
      value: Value(
          unit: '[in_i]3',
          unitUC: '[IN_I]3',
          value: UcumDecimal.fromString('231'),
          text: '231'),
      property: 'fluid volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'US gallons',
        'US liquid gallon',
        'gal us',
        "Queen Anne's wine gallon",
        'gallon - US'
      ]),
  DefinedUnit(
      code: '[gal_wi]',
      codeUC: '[GAL_WI]',
      value: Value(
          unit: '[bu_us]/8',
          unitUC: '[BU_US]/8',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'dry volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'Corn Gallon British',
        'Dry Gallon US',
        'Gallons Historical',
        'Grain Gallon British',
        'Winchester Corn Gallon',
        'historical winchester gallons',
        'wi gal',
        'gallon - historical'
      ]),
  DefinedUnit(
      code: '[gil_br]',
      codeUC: '[GIL_BR]',
      value: Value(
          unit: '[pt_br]/4',
          unitUC: '[PT_BR]/4',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-volumes',
      names: <String>[
        'imperial gills',
        'British gills',
        'imp gill, br gill',
        'gill - British'
      ]),
  DefinedUnit(
      code: '[gil_us]',
      codeUC: '[GIL_US]',
      value: Value(
          unit: '[pt_us]/4',
          unitUC: '[PT_US]/4',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'fluid volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'US gills',
        'gil us',
        'gill - US',
      ]),
  DefinedUnit(
      code: '[gr]',
      codeUC: '[GR]',
      value: Value(
          unit: 'mg',
          unitUC: 'MG',
          value: UcumDecimal.fromString('64.79891'),
          text: '64.79891'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'avoirdupois',
      names: <String>[
        'gr',
        'grains',
        'grain',
      ]),
  DefinedUnit(
      code: '[h]',
      codeUC: '[H]',
      value: Value(
          unit: 'J.s',
          unitUC: 'J.S',
          value: UcumDecimal.fromString(
              '0.00000000000000000000000000000000066260755'),
          text: '6.6260755e-34'),
      property: 'action',
      isMetric: true,
      isSpecial: false,
      class_: 'const',
      names: <String>[
        "Planck's constant",
        'Planck constant',
      ],
      printSymbol: '<i>h</i>'),
  DefinedUnit(
      code: '[hd_i]',
      codeUC: '[HD_I]',
      value: Value(
          unit: '[in_i]',
          unitUC: '[IN_I]',
          value: UcumDecimal.fromString('4'),
          text: '4'),
      property: 'height of horses',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'hands',
        'international',
        'hand',
      ],
      printSymbol: 'hd'),
  DefinedUnit(
      code: "[hnsf'U]",
      codeUC: "[HNSF'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'x-ray attenuation',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'HU',
        'units',
        'Hounsfield unit',
      ],
      printSymbol: 'HF'),
  DefinedUnit(
      code: "[hp'_C]",
      codeUC: "[HP'_C]",
      value:
          Value(unit: '1', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'homeopathic potency (retired)',
      isMetric: false,
      isSpecial: true,
      class_: 'clinical',
      names: <String>[
        'homeopathic potency of centesimal series (retired)',
      ],
      printSymbol: 'C'),
  DefinedUnit(
      code: "[hp'_M]",
      codeUC: "[HP'_M]",
      value:
          Value(unit: '1', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'homeopathic potency (retired)',
      isMetric: false,
      isSpecial: true,
      class_: 'clinical',
      names: <String>[
        'homeopathic potency of millesimal series (retired)',
      ],
      printSymbol: 'M'),
  DefinedUnit(
      code: "[hp'_Q]",
      codeUC: "[HP'_Q]",
      value:
          Value(unit: '1', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'homeopathic potency (retired)',
      isMetric: false,
      isSpecial: true,
      class_: 'clinical',
      names: <String>[
        'homeopathic potency of quintamillesimal series (retired)',
      ],
      printSymbol: 'Q'),
  DefinedUnit(
      code: "[hp'_X]",
      codeUC: "[HP'_X]",
      value:
          Value(unit: '1', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'homeopathic potency (retired)',
      isMetric: false,
      isSpecial: true,
      class_: 'clinical',
      names: <String>[
        'homeopathic potency of decimal series (retired)',
      ],
      printSymbol: 'X'),
  DefinedUnit(
      code: '[hp_C]',
      codeUC: '[HP_C]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'homeopathic potency (Hahnemann)',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'homeopathic potency of centesimal hahnemannian series',
      ],
      printSymbol: 'C'),
  DefinedUnit(
      code: '[hp_M]',
      codeUC: '[HP_M]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'homeopathic potency (Hahnemann)',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'homeopathic potency of millesimal hahnemannian series',
      ],
      printSymbol: 'M'),
  DefinedUnit(
      code: '[hp_Q]',
      codeUC: '[HP_Q]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'homeopathic potency (Hahnemann)',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'homeopathic potency of quintamillesimal hahnemannian series',
      ],
      printSymbol: 'Q'),
  DefinedUnit(
      code: '[hp_X]',
      codeUC: '[HP_X]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'homeopathic potency (Hahnemann)',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'homeopathic potency of decimal hahnemannian series',
      ],
      printSymbol: 'X'),
  DefinedUnit(
      code: '[iU]',
      codeUC: '[IU]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'international units',
        'IE',
        'F2',
        'international unit - arbitrary'
      ],
      printSymbol: 'IU'),
  DefinedUnit(
      code: '[in_br]',
      codeUC: '[IN_BR]',
      value: Value(
          unit: 'cm',
          unitUC: 'CM',
          value: UcumDecimal.fromString('2.539998'),
          text: '2.539998'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-length',
      names: <String>[
        'imperial inches',
        'imp in',
        'br in',
        'british inches',
        'inch - British'
      ]),
  DefinedUnit(
      code: "[in_i'H2O]",
      codeUC: "[IN_I'H2O]",
      value: Value(
          unit: 'm[H2O].[in_i]/m',
          unitUC: 'M[H2O].[IN_I]/M',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'pressure',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'inches WC',
        'inAq',
        'in H2O',
        'inch of water gauge',
        'iwg',
        'pressure',
        'inch of water column'
      ],
      printSymbol: 'in HO<sub><r>2</r></sub>'),
  DefinedUnit(
      code: "[in_i'Hg]",
      codeUC: "[IN_I'HG]",
      value: Value(
          unit: 'm[Hg].[in_i]/m',
          unitUC: 'M[HG].[IN_I]/M',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'pressure',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'inHg',
        'in Hg',
        'pressure',
        'inches',
        'inch of mercury column',
      ],
      printSymbol: 'in Hg'),
  DefinedUnit(
      code: '[in_i]',
      codeUC: '[IN_I]',
      value: Value(
          unit: 'cm',
          unitUC: 'CM',
          value: UcumDecimal.fromString('2.54'),
          text: '254e-2'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'inches',
        'in',
        'international inch',
        'body height',
        'inch',
      ],
      printSymbol: 'in'),
  DefinedUnit(
      code: '[in_us]',
      codeUC: '[IN_US]',
      value: Value(
          unit: '[ft_us]/12',
          unitUC: '[FT_US]/12',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        'US inches',
        'in us',
        'us in',
        'inch US',
        'inch - US',
      ]),
  DefinedUnit(
      code: '[k]',
      codeUC: '[K]',
      value: Value(
          unit: 'J/K',
          unitUC: 'J/K',
          value: UcumDecimal.fromString('0.00000000000000000000001380658'),
          text: '1.380658e-23'),
      property: '(unclassified)',
      isMetric: true,
      isSpecial: false,
      class_: 'const',
      names: <String>[
        'k',
        'kB',
        'Boltzmann constant',
      ],
      printSymbol: '<i>k</i>'),
  DefinedUnit(
      code: "[ka'U]",
      codeUC: "[KA'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'biologic activity of phosphatase',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'King-Armstrong Units',
        'King units',
        'King-Armstrong unit',
      ]),
  DefinedUnit(
      code: '[kn_br]',
      codeUC: '[KN_BR]',
      value: Value(
          unit: '[nmi_br]/h',
          unitUC: '[NMI_BR]/H',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'velocity',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-length',
      names: <String>[
        'British knots',
        'kn br',
        'kt',
        'knot - British',
      ]),
  DefinedUnit(
      code: '[kn_i]',
      codeUC: '[KN_I]',
      value: Value(
          unit: '[nmi_i]/h',
          unitUC: '[NMI_I]/H',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'velocity',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'kn',
        'kt',
        'international knots',
        'knot',
      ],
      printSymbol: 'knot'),
  DefinedUnit(
      code: "[knk'U]",
      codeUC: "[KNK'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary biologic activity',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'Kunkel unit',
      ]),
  DefinedUnit(
      code: '[kp_C]',
      codeUC: '[KP_C]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'homeopathic potency (Korsakov)',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'homeopathic potency of centesimal korsakovian series',
      ],
      printSymbol: 'C'),
  DefinedUnit(
      code: '[kp_M]',
      codeUC: '[KP_M]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'homeopathic potency (Korsakov)',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'homeopathic potency of millesimal korsakovian series',
      ],
      printSymbol: 'M'),
  DefinedUnit(
      code: '[kp_Q]',
      codeUC: '[KP_Q]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'homeopathic potency (Korsakov)',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'homeopathic potency of quintamillesimal korsakovian series',
      ],
      printSymbol: 'Q'),
  DefinedUnit(
      code: '[kp_X]',
      codeUC: '[KP_X]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'homeopathic potency (Korsakov)',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'homeopathic potency of decimal korsakovian series',
      ],
      printSymbol: 'X'),
  DefinedUnit(
      code: '[lb_ap]',
      codeUC: '[LB_AP]',
      value: Value(
          unit: '[oz_ap]',
          unitUC: '[OZ_AP]',
          value: UcumDecimal.fromString('12'),
          text: '12'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'apoth',
      names: <String>[
        'apothecary pounds',
        'apothecaries pounds',
        'ap lb',
        'lb ap',
        'ap lbs',
        'lbs ap',
        'pound - apothecary'
      ]),
  DefinedUnit(
      code: '[lb_av]',
      codeUC: '[LB_AV]',
      value: Value(
          unit: '[gr]',
          unitUC: '[GR]',
          value: UcumDecimal.fromString('7000'),
          text: '7000'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'avoirdupois',
      names: <String>[
        'avoirdupois pounds, international pounds',
        'av lbs',
        'pounds',
        'pound'
      ],
      printSymbol: 'lb'),
  DefinedUnit(
      code: '[lb_tr]',
      codeUC: '[LB_TR]',
      value: Value(
          unit: '[oz_tr]',
          unitUC: '[OZ_TR]',
          value: UcumDecimal.fromString('12'),
          text: '12'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'troy',
      names: <String>[
        'troy pounds',
        'tr lbs',
        'pound - troy',
      ]),
  DefinedUnit(
      code: '[lbf_av]',
      codeUC: '[LBF_AV]',
      value: Value(
          unit: '[lb_av].[g]',
          unitUC: '[LB_AV].[G]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'force',
      isMetric: false,
      isSpecial: false,
      class_: 'const',
      names: <String>[
        'lbfs',
        'US lbf',
        'US pound forces',
        'pound force - US',
      ],
      printSymbol: 'lbf'),
  DefinedUnit(
      code: '[lcwt_av]',
      codeUC: '[LCWT_AV]',
      value: Value(
          unit: '[lb_av]',
          unitUC: '[LB_AV]',
          value: UcumDecimal.fromString('112'),
          text: '112'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'avoirdupois',
      names: <String>[
        'imperial hundredweights',
        'imp cwt',
        'lcwt',
        'avoirdupois',
        'long hundredweight'
      ]),
  DefinedUnit(
      code: '[ligne]',
      codeUC: '[LIGNE]',
      value: Value(
          unit: '[pouce]/12',
          unitUC: '[POUCE]/12',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'typeset',
      names: <String>[
        'Paris lines',
        'lignes',
        'ligne',
      ]),
  DefinedUnit(
      code: '[lk_br]',
      codeUC: '[LK_BR]',
      value: Value(
          unit: '[ch_br]/100',
          unitUC: '[CH_BR]/100',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-length',
      names: <String>[
        "Links for Gunter's Chain British",
        "link for Gunter's chain - British"
      ]),
  DefinedUnit(
      code: '[lk_us]',
      codeUC: '[LK_US]',
      value: Value(
          unit: '[ch_us]/100',
          unitUC: '[CH_US]/100',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        "Links for Gunter's Chain USA",
        "link for Gunter's chain - US",
      ]),
  DefinedUnit(
      code: '[lne]',
      codeUC: '[LNE]',
      value: Value(
          unit: '[in_i]/12',
          unitUC: '[IN_I]/12',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'typeset',
      names: <String>[
        'British lines',
        'br L',
        'L',
        'l',
        'line',
      ]),
  DefinedUnit(
      code: '[lton_av]',
      codeUC: '[LTON_AV]',
      value: Value(
          unit: '[lcwt_av]',
          unitUC: '[LCWT_AV]',
          value: UcumDecimal.fromString('20'),
          text: '20'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'avoirdupois',
      names: <String>[
        'imperial tons',
        'weight tons',
        'British long tons',
        'long ton avoirdupois',
        'long ton - British'
      ]),
  DefinedUnit(
      code: '[ly]',
      codeUC: '[LY]',
      value: Value(
          unit: '[c].a_j',
          unitUC: '[C].ANN_J',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'length',
      isMetric: true,
      isSpecial: false,
      class_: 'const',
      names: <String>[
        'light years',
        'ly',
        'light-year',
      ],
      printSymbol: 'l.y.'),
  DefinedUnit(
      code: '[m/s2/Hz^(1/2)]',
      codeUC: '[M/S2/HZ^(1/2)]',
      value: Value(
          unit: 'm2/s4/Hz', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'amplitude spectral density',
      isMetric: false,
      isSpecial: true,
      class_: 'misc',
      names: <String>[
        'm/s2/(Hz^.5)',
        'm/s2/(Hz^(1/2))',
        'm per s2 per Hz^1/2',
        'meter per square seconds per square root of hertz'
      ]),
  DefinedUnit(
      code: '[m_e]',
      codeUC: '[M_E]',
      value: Value(
          unit: 'g',
          unitUC: 'g',
          value:
              UcumDecimal.fromString('0.00000000000000000000000000091093897'),
          text: '9.1093897e-28'),
      property: 'mass',
      isMetric: true,
      isSpecial: false,
      class_: 'const',
      names: <String>[
        'electron rest mass',
        'me',
        'electron mass',
      ],
      printSymbol: '<i>m<sub><r>e</r></sub></i>'),
  DefinedUnit(
      code: '[m_p]',
      codeUC: '[M_P]',
      value: Value(
          unit: 'g',
          unitUC: 'g',
          value: UcumDecimal.fromString('0.0000000000000000000000016726231'),
          text: '1.6726231e-24'),
      property: 'mass',
      isMetric: true,
      isSpecial: false,
      class_: 'const',
      names: <String>[
        'mp',
        'masses',
        'proton mass',
      ],
      printSymbol: '<i>m<sub><r>p</r></sub></i>'),
  DefinedUnit(
      code: "[mclg'U]",
      codeUC: "[MCLG'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary biologic activity',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'galactose index',
        'galactose tolerance test',
        'thymol turbidity test unit',
        'mclg U',
        'units',
        'indexes',
        'Mac Lagan unit'
      ]),
  DefinedUnit(
      code: '[mesh_i]',
      codeUC: '[MESH_I]',
      value: Value(
          unit: '[in_i]',
          unitUC: '/[IN_I]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'lineic number',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'meshes',
        'mesh',
      ]),
  DefinedUnit(
      code: '[mi_br]',
      codeUC: '[MI_BR]',
      value: Value(
          unit: '[ft_br]',
          unitUC: '[FT_BR]',
          value: UcumDecimal.fromString('5280'),
          text: '5280'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-length',
      names: <String>[
        'imperial miles',
        'British miles',
        'English statute miles',
        'imp mi, br mi',
        'mile - British'
      ]),
  DefinedUnit(
      code: '[mi_i]',
      codeUC: '[MI_I]',
      value: Value(
          unit: '[ft_i]',
          unitUC: '[FT_I]',
          value: UcumDecimal.fromString('5280'),
          text: '5280'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'international miles',
        'mi I',
        'statute mile',
        'mile',
      ],
      printSymbol: 'mi'),
  DefinedUnit(
      code: '[mi_us]',
      codeUC: '[MI_US]',
      value: Value(
          unit: '[fur_us]',
          unitUC: '[FUR_US]',
          value: UcumDecimal.fromString('8'),
          text: '8'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        'U.S. Survey Miles',
        'US statute miles',
        'survey mi',
        'US mi',
        'distance',
        'mile - US'
      ]),
  DefinedUnit(
      code: '[mil_i]',
      codeUC: '[MIL_I]',
      value: Value(
          unit: '[in_i]',
          unitUC: '[IN_I]',
          value: UcumDecimal.fromString('0.001'),
          text: '1e-3'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'thou, thousandth',
        'mils',
        'international',
        'mil',
      ],
      printSymbol: 'mil'),
  DefinedUnit(
      code: '[mil_us]',
      codeUC: '[MIL_US]',
      value: Value(
          unit: '[in_us]',
          unitUC: '[IN_US]',
          value: UcumDecimal.fromString('0.001'),
          text: '1e-3'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        'thou, thousandth',
        'mils',
        'mil - US',
      ]),
  DefinedUnit(
      code: '[min_br]',
      codeUC: '[MIN_BR]',
      value: Value(
          unit: '[fdr_br]/60',
          unitUC: '[FDR_BR]/60',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-volumes',
      names: <String>[
        'min br',
        'br min',
        '♏ br',
        'minim - British',
      ]),
  DefinedUnit(
      code: '[min_us]',
      codeUC: '[MIN_US]',
      value: Value(
          unit: '[fdr_us]/60',
          unitUC: '[FDR_US]/60',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'fluid volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'min US',
        'US min',
        '♏ US',
        'minim - US',
      ]),
  DefinedUnit(
      code: '[mu_0]',
      codeUC: '[MU_0]',
      value: Value(
          unit: 'N/A2',
          unitUC: '4.[PI].10*-7.N/A2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'magnetic permeability',
      isMetric: true,
      isSpecial: false,
      class_: 'const',
      names: <String>[
        'μ0',
        'vacuum permeability',
        'permeability of free space',
        'magnetic constant',
        'permeability of vacuum - magnetic'
      ],
      printSymbol: '<i>μ<sub><r>0</r></sub></i>'),
  DefinedUnit(
      code: '[nmi_br]',
      codeUC: '[NMI_BR]',
      value: Value(
          unit: '[ft_br]',
          unitUC: '[FT_BR]',
          value: UcumDecimal.fromString('6080'),
          text: '6080'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-length',
      names: <String>[
        'British nautical miles',
        'Imperial nautical miles',
        'Admiralty miles',
        'n.m. br',
        'imp nm',
        'nautical mile - British'
      ]),
  DefinedUnit(
      code: '[nmi_i]',
      codeUC: '[NMI_I]',
      value: Value(
          unit: 'm',
          unitUC: 'M',
          value: UcumDecimal.fromString('1852'),
          text: '1852'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'nautical mile',
        'nautical miles',
        'international nautical mile',
        'international nautical miles',
        'nm',
        'n.m.',
        'nmi'
      ],
      printSymbol: 'n.mi'),
  DefinedUnit(
      code: '[oz_ap]',
      codeUC: '[OZ_AP]',
      value: Value(
          unit: '[dr_ap]',
          unitUC: '[DR_AP]',
          value: UcumDecimal.fromString('8'),
          text: '8'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'apoth',
      names: <String>[
        'apothecary ounces',
        'oz ap',
        'ap ozs',
        'ozs ap',
        'ounce - apothecary'
      ]),
  DefinedUnit(
      code: '[oz_av]',
      codeUC: '[OZ_AV]',
      value: Value(
          unit: '[lb_av]/16',
          unitUC: '[LB_AV]/16',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'avoirdupois',
      names: <String>[
        'ounces',
        'international ounces',
        'avoirdupois ounces',
        'av ozs',
        'ounce'
      ],
      printSymbol: 'oz'),
  DefinedUnit(
      code: '[oz_m]',
      codeUC: '[OZ_M]',
      value: Value(
          unit: 'g',
          unitUC: 'g',
          value: UcumDecimal.fromString('28'),
          text: '28'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'apoth',
      names: <String>[
        'metric ounces',
        'm ozs',
        'ounce - metric',
      ]),
  DefinedUnit(
      code: '[oz_tr]',
      codeUC: '[OZ_TR]',
      value: Value(
          unit: '[pwt_tr]',
          unitUC: '[PWT_TR]',
          value: UcumDecimal.fromString('20'),
          text: '20'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'troy',
      names: <String>[
        'troy ounces',
        'tr ozs',
        'ounce - troy',
      ]),
  DefinedUnit(
      code: "[p'diop]",
      codeUC: "[P'DIOP]",
      value:
          Value(unit: 'rad', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'refraction of a prism',
      isMetric: false,
      isSpecial: true,
      class_: 'clinical',
      names: <String>[
        'diopters',
        'dioptres',
        'p diops',
        'pdiop',
        'dpt',
        'pdptr',
        'Δ',
        'cm/m',
        'centimeter per meter',
        'centimetre',
        'metre',
        'prism diopter (magnifying power)'
      ],
      printSymbol: 'PD'),
  DefinedUnit(
      code: '[pH]',
      codeUC: '[PH]',
      value: Value(
          unit: 'mol/l', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'acidity',
      isMetric: false,
      isSpecial: true,
      class_: 'chemical',
      names: <String>[
        'pH scale',
        'pH',
      ],
      printSymbol: 'pH'),
  DefinedUnit(
      code: '[pc_br]',
      codeUC: '[PC_BR]',
      value: Value(
          unit: '[ft_br]',
          unitUC: '[FT_BR]',
          value: UcumDecimal.fromString('2.5'),
          text: '2.5'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-length',
      names: <String>[
        'British paces',
        'br pc',
        'pace - British',
      ]),
  DefinedUnit(
      code: '[pca]',
      codeUC: '[PCA]',
      value: Value(
          unit: '[pnt]',
          unitUC: '[PNT]',
          value: UcumDecimal.fromString('12'),
          text: '12'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'typeset',
      names: <String>[
        'picas',
        'pica (typography)',
      ]),
  DefinedUnit(
      code: '[pca_pr]',
      codeUC: '[PCA_PR]',
      value: Value(
          unit: '[pnt_pr]',
          unitUC: '[PNT_PR]',
          value: UcumDecimal.fromString('12'),
          text: '12'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'typeset',
      names: <String>[
        'pca pr',
        "Printer's picas",
        "Printer's pica  (typography)",
      ]),
  DefinedUnit(
      code: '[pi]',
      codeUC: '[PI]',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString(
              '3.1415926535897932384626433832795028841971693993751058209749445923'),
          text:
              '3.1415926535897932384626433832795028841971693993751058209749445923'),
      property: 'number',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        'the number pi',
        'π',
      ],
      printSymbol: 'π'),
  DefinedUnit(
      code: '[pied]',
      codeUC: '[PIED]',
      value: Value(
          unit: 'cm',
          unitUC: 'CM',
          value: UcumDecimal.fromString('32.48'),
          text: '32.48'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'typeset',
      names: <String>[
        'pieds du roi',
        'Paris foot',
        'royal',
        'French',
        'feet',
        'pied',
      ]),
  DefinedUnit(
      code: '[pk_br]',
      codeUC: '[PK_BR]',
      value: Value(
          unit: '[gal_br]',
          unitUC: '[GAL_BR]',
          value: UcumDecimal.fromString('2'),
          text: '2'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-volumes',
      names: <String>[
        'imperial pecks',
        'British pecks',
        'br pk',
        'imp pk',
        'peck - British'
      ]),
  DefinedUnit(
      code: '[pk_us]',
      codeUC: '[PK_US]',
      value: Value(
          unit: '[bu_us]/4',
          unitUC: '[BU_US]/4',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'dry volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'US pecks',
        'US pk',
        'peck - US',
      ]),
  DefinedUnit(
      code: '[pnt]',
      codeUC: '[PNT]',
      value: Value(
          unit: '[lne]/6',
          unitUC: '[LNE]/6',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'typeset',
      names: <String>[
        'DTP points',
        'desktop publishing point',
        'pt',
        'pnt',
        'point (typography)'
      ]),
  DefinedUnit(
      code: '[pnt_pr]',
      codeUC: '[PNT_PR]',
      value: Value(
          unit: '[in_i]',
          unitUC: '[IN_I]',
          value: UcumDecimal.fromString('0.013837'),
          text: '0.013837'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'typeset',
      names: <String>[
        'pnt pr',
        "Printer's point (typography)",
      ]),
  DefinedUnit(
      code: '[pouce]',
      codeUC: '[POUCE]',
      value: Value(
          unit: '[pied]/12',
          unitUC: '[PIED]/12',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'typeset',
      names: <String>[
        'historical French inches',
        'French royal inches',
        'pouce',
      ]),
  DefinedUnit(
      code: '[ppb]',
      codeUC: '[PPB]',
      value: Value(
          unit: '10*-9',
          unitUC: '10*-9',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'fraction',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        'ppb',
        '10^-9',
        'parts per billion',
      ],
      printSymbol: 'ppb'),
  DefinedUnit(
      code: '[ppm]',
      codeUC: '[PPM]',
      value: Value(
          unit: '10*-6',
          unitUC: '10*-6',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'fraction',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        'ppm',
        '10^-6',
        'parts per million',
      ],
      printSymbol: 'ppm'),
  DefinedUnit(
      code: '[ppth]',
      codeUC: '[PPTH]',
      value: Value(
          unit: '10*-3',
          unitUC: '10*-3',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'fraction',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        'ppth',
        '10^-3',
        'parts per thousand',
      ],
      printSymbol: 'ppth'),
  DefinedUnit(
      code: '[pptr]',
      codeUC: '[PPTR]',
      value: Value(
          unit: '10*-12',
          unitUC: '10*-12',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'fraction',
      isMetric: false,
      isSpecial: false,
      class_: 'dimless',
      names: <String>[
        'pptr',
        '10^-12',
        'parts per trillion',
      ],
      printSymbol: 'pptr'),
  DefinedUnit(
      code: '[psi]',
      codeUC: '[PSI]',
      value: Value(
          unit: '[lbf_av]/[in_i]2',
          unitUC: '[LBF_AV]/[IN_I]2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'pressure',
      isMetric: false,
      isSpecial: false,
      class_: 'misc',
      names: <String>[
        'psi',
        'lb/in2',
        'lb per in2',
        'pound per square inch',
      ],
      printSymbol: 'psi'),
  DefinedUnit(
      code: '[pt_br]',
      codeUC: '[PT_BR]',
      value: Value(
          unit: '[qt_br]/2',
          unitUC: '[QT_BR]/2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-volumes',
      names: <String>[
        'British pints',
        'imperial pints',
        'pt br',
        'br pt',
        'imp pt',
        'pt imp',
        'pint - British'
      ]),
  DefinedUnit(
      code: '[pt_us]',
      codeUC: '[PT_US]',
      value: Value(
          unit: '[qt_us]/2',
          unitUC: '[QT_US]/2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'fluid volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'US pints',
        'pint US',
        'liquid pint',
        'pt us',
        'us pt',
        'pint - US'
      ]),
  DefinedUnit(
      code: '[pwt_tr]',
      codeUC: '[PWT_TR]',
      value: Value(
          unit: '[gr]',
          unitUC: '[GR]',
          value: UcumDecimal.fromString('24'),
          text: '24'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'troy',
      names: <String>[
        'dwt',
        'denarius weights',
        'pennyweight - troy',
      ]),
  DefinedUnit(
      code: '[qt_br]',
      codeUC: '[QT_BR]',
      value: Value(
          unit: '[gal_br]/4',
          unitUC: '[GAL_BR]/4',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-volumes',
      names: <String>[
        'British quarts',
        'imperial quarts',
        'br qts',
        'quart - British',
      ]),
  DefinedUnit(
      code: '[qt_us]',
      codeUC: '[QT_US]',
      value: Value(
          unit: '[gal_us]/4',
          unitUC: '[GAL_US]/4',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'fluid volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'US quarts',
        'us qts',
        'quart - US',
      ]),
  DefinedUnit(
      code: '[rch_us]',
      codeUC: '[RCH_US]',
      value: Value(
          unit: '[ft_us]',
          unitUC: '[FT_US]',
          value: UcumDecimal.fromString('100'),
          text: '100'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        "Ramsden's chain",
        "engineer's chains",
        "Ramden's chain - US",
      ]),
  DefinedUnit(
      code: '[rd_br]',
      codeUC: '[RD_BR]',
      value: Value(
          unit: '[ft_br]',
          unitUC: '[FT_BR]',
          value: UcumDecimal.fromString('16.5'),
          text: '16.5'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-length',
      names: <String>[
        'British rods',
        'br rd',
        'rod - British',
      ]),
  DefinedUnit(
      code: '[rd_us]',
      codeUC: '[RD_US]',
      value: Value(
          unit: '[ft_us]',
          unitUC: '[FT_US]',
          value: UcumDecimal.fromString('16.5'),
          text: '16.5'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        'US rod',
        'US rods',
        'rd US',
        'US rd',
        'rod - US',
      ]),
  DefinedUnit(
      code: '[rlk_us]',
      codeUC: '[RLK_US]',
      value: Value(
          unit: '[rch_us]/100',
          unitUC: '[RCH_US]/100',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        "links for Ramsden's chain",
        "link for Ramden's chain - US",
      ]),
  DefinedUnit(
      code: '[sc_ap]',
      codeUC: '[SC_AP]',
      value: Value(
          unit: '[gr]',
          unitUC: '[GR]',
          value: UcumDecimal.fromString('20'),
          text: '20'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'apoth',
      names: <String>[
        'scruples',
        'sc ap',
        'scruple',
      ]),
  DefinedUnit(
      code: '[sct]',
      codeUC: '[SCT]',
      value: Value(
          unit: '[mi_us]2',
          unitUC: '[MI_US]2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'area',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        'sct',
        'sections',
        'section',
      ]),
  DefinedUnit(
      code: '[scwt_av]',
      codeUC: '[SCWT_AV]',
      value: Value(
          unit: '[lb_av]',
          unitUC: '[LB_AV]',
          value: UcumDecimal.fromString('100'),
          text: '100'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'avoirdupois',
      names: <String>[
        'hundredweights',
        's cwt',
        'scwt',
        'avoirdupois',
        'short hundredweight'
      ]),
  DefinedUnit(
      code: '[sft_i]',
      codeUC: '[SFT_I]',
      value: Value(
          unit: '[ft_i]2',
          unitUC: '[FT_I]2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'area',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>['ft2', 'ft^2', 'ft squared', 'sq ft', 'square foot']),
  DefinedUnit(
      code: '[sin_i]',
      codeUC: '[SIN_I]',
      value: Value(
          unit: '[in_i]2',
          unitUC: '[IN_I]2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'area',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'in2',
        'in^2',
        'inches squared',
        'sq inch',
        'square inch',
      ]),
  DefinedUnit(
      code: "[smgy'U]",
      codeUC: "[SMGY'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'biologic activity of amylase',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'Somogyi units',
        'smgy U',
        'Somogyi unit',
      ]),
  DefinedUnit(
      code: '[smi_us]',
      codeUC: '[SMI_US]',
      value: Value(
          unit: '[mi_us]2',
          unitUC: '[MI_US]2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'area',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        'mi2',
        'mi^2',
        'sq mi',
        'miles squared',
        'square mile - US',
      ]),
  DefinedUnit(
      code: '[smoot]',
      codeUC: '[SMOOT]',
      value: Value(
          unit: '[in_i]',
          unitUC: '[IN_I]',
          value: UcumDecimal.fromString('67'),
          text: '67'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'misc',
      names: <String>[
        'Smoot',
      ]),
  DefinedUnit(
      code: '[srd_us]',
      codeUC: '[SRD_US]',
      value: Value(
          unit: '[rd_us]2',
          unitUC: '[RD_US]2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'area',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        'rod2',
        'rod^2',
        'sq. rod',
        'rods squared',
        'square rod - US',
      ]),
  DefinedUnit(
      code: '[ston_av]',
      codeUC: '[STON_AV]',
      value: Value(
          unit: '[scwt_av]',
          unitUC: '[SCWT_AV]',
          value: UcumDecimal.fromString('20'),
          text: '20'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'avoirdupois',
      names: <String>[
        'ton',
        'US tons',
        'avoirdupois tons',
        'short ton - US',
      ]),
  DefinedUnit(
      code: '[stone_av]',
      codeUC: '[STONE_AV]',
      value: Value(
          unit: '[lb_av]',
          unitUC: '[LB_AV]',
          value: UcumDecimal.fromString('14'),
          text: '14'),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      class_: 'avoirdupois',
      names: <String>[
        'British stones',
        'avoirdupois',
        'stone - British',
      ]),
  DefinedUnit(
      code: '[syd_i]',
      codeUC: '[SYD_I]',
      value: Value(
          unit: '[yd_i]2',
          unitUC: '[YD_I]2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'area',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'yd2',
        'yd^2',
        'sq. yds',
        'yards squared',
        'international',
        'square yard'
      ]),
  DefinedUnit(
      code: "[tb'U]",
      codeUC: "[TB'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'biologic activity of tuberculin',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'TU',
        'units',
        'tuberculin unit',
      ]),
  DefinedUnit(
      code: '[tbs_m]',
      codeUC: '[TBS_M]',
      value: Value(
          unit: 'mL',
          unitUC: 'mL',
          value: UcumDecimal.fromString('15'),
          text: '15'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'metric tablespoons',
        'Tbs',
        'tbsp',
        'T',
        'tbs m',
        'tablespoon - metric'
      ]),
  DefinedUnit(
      code: '[tbs_us]',
      codeUC: '[TBS_US]',
      value: Value(
          unit: '[foz_us]/2',
          unitUC: '[FOZ_US]/2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'Tbs',
        'tbsp',
        'tbs us',
        'US tablespoons',
        'tablespoon - US',
      ]),
  DefinedUnit(
      code: "[todd'U]",
      codeUC: "[TODD'U]",
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'biologic activity antistreptolysin O',
      isMetric: false,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'units',
        'Todd unit',
      ]),
  DefinedUnit(
      code: '[tsp_m]',
      codeUC: '[TSP_M]',
      value: Value(
          unit: 'mL',
          unitUC: 'mL',
          value: UcumDecimal.fromString('5'),
          text: '5'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'tsp',
        't',
        'metric teaspoons',
        'teaspoon - metric',
      ]),
  DefinedUnit(
      code: '[tsp_us]',
      codeUC: '[TSP_US]',
      value: Value(
          unit: '[tbs_us]/3',
          unitUC: '[TBS_US]/3',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'volume',
      isMetric: false,
      isSpecial: false,
      class_: 'us-volumes',
      names: <String>[
        'tsp',
        't',
        'US teaspoons',
        'teaspoon - US',
      ]),
  DefinedUnit(
      code: '[twp]',
      codeUC: '[TWP]',
      value: Value(
          unit: '[sct]',
          unitUC: '[SCT]',
          value: UcumDecimal.fromString('36'),
          text: '36'),
      property: 'area',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        'twp',
        'townships',
        'township',
      ]),
  DefinedUnit(
      code: "[wood'U]",
      codeUC: "[WOOD'U]",
      value: Value(
          unit: 'mm[Hg].min/L',
          unitUC: 'MM[HG].MIN/L',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'fluid resistance',
      isMetric: false,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'hybrid reference units',
        'HRU',
        'mmHg.min/L',
        'vascular resistance',
        'Wood unit'
      ],
      printSymbol: 'Wood U.'),
  DefinedUnit(
      code: '[yd_br]',
      codeUC: '[YD_BR]',
      value: Value(
          unit: '[ft_br]',
          unitUC: '[FT_BR]',
          value: UcumDecimal.fromString('3'),
          text: '3'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'brit-length',
      names: <String>[
        'British yards',
        'Br yds',
        'distance',
        'yard - British',
      ]),
  DefinedUnit(
      code: '[yd_i]',
      codeUC: '[YD_I]',
      value: Value(
          unit: '[ft_i]',
          unitUC: '[FT_I]',
          value: UcumDecimal.fromString('3'),
          text: '3'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'intcust',
      names: <String>[
        'international yards',
        'yds',
        'distance',
        'yard',
      ],
      printSymbol: 'yd'),
  DefinedUnit(
      code: '[yd_us]',
      codeUC: '[YD_US]',
      value: Value(
          unit: '[ft_us]',
          unitUC: '[FT_US]',
          value: UcumDecimal.fromString('3'),
          text: '3'),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      class_: 'us-lengths',
      names: <String>[
        'US yards',
        'us yds',
        'distance',
        'yard - US',
      ]),
  DefinedUnit(
      code: 'a',
      codeUC: 'ANN',
      value: Value(
          unit: 'a_j',
          unitUC: 'ANN_J',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'years',
        'a',
        'yr',
        'yrs',
        'annum',
        'year',
      ],
      printSymbol: 'a'),
  DefinedUnit(
      code: 'a_g',
      codeUC: 'ANN_G',
      value: Value(
          unit: 'd',
          unitUC: 'D',
          value: UcumDecimal.fromString('365.2425'),
          text: '365.2425'),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mean Gregorian yr',
        'a gregorian',
        'Gregorian years',
        'mean Gregorian year'
      ],
      printSymbol: 'a<sub>g</sub>'),
  DefinedUnit(
      code: 'a_j',
      codeUC: 'ANN_J',
      value: Value(
          unit: 'd',
          unitUC: 'D',
          value: UcumDecimal.fromString('365.25'),
          text: '365.25'),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mean Julian yr',
        'a julian',
        'Julian years',
        'mean Julian year',
      ],
      printSymbol: 'a<sub>j</sub>'),
  DefinedUnit(
      code: 'a_t',
      codeUC: 'ANN_T',
      value: Value(
          unit: 'd',
          unitUC: 'D',
          value: UcumDecimal.fromString('365.24219'),
          text: '365.24219'),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'solar years',
        'a tropical',
        'tropical years',
        'tropical year',
      ],
      printSymbol: 'a<sub>t</sub>'),
  DefinedUnit(
      code: 'ar',
      codeUC: 'AR',
      value: Value(
          unit: 'm2',
          unitUC: 'M2',
          value: UcumDecimal.fromString('100'),
          text: '100'),
      property: 'area',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        '100 m2',
        '100 m^2',
        '100 square meter',
        'meters squared',
        'metres',
        'area'
      ],
      printSymbol: 'a'),
  DefinedUnit(
      code: 'atm',
      codeUC: 'ATM',
      value: Value(
          unit: 'Pa',
          unitUC: 'PAL',
          value: UcumDecimal.fromString('101325'),
          text: '101325'),
      property: 'pressure',
      isMetric: false,
      isSpecial: false,
      class_: 'const',
      names: <String>[
        'reference pressure',
        'atmos',
        'std atmosphere',
        'standard atmosphere'
      ],
      printSymbol: 'atm'),
  DefinedUnit(
      code: 'att',
      codeUC: 'ATT',
      value: Value(
          unit: 'kgf/cm2',
          unitUC: 'KGF/CM2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'pressure',
      isMetric: false,
      isSpecial: false,
      class_: 'misc',
      names: <String>[
        'at',
        'tech atm',
        'tech atmosphere',
        'kgf/cm2',
        'atms',
        'atmospheres',
        'technical atmosphere'
      ],
      printSymbol: 'at'),
  DefinedUnit(
      code: 'b',
      codeUC: 'BRN',
      value: Value(
          unit: 'fm2',
          unitUC: 'FM2',
          value: UcumDecimal.fromString('100'),
          text: '100'),
      property: 'action area',
      isMetric: false,
      isSpecial: false,
      class_: 'misc',
      names: <String>[
        'barns',
        'barn',
      ],
      printSymbol: 'b'),
  DefinedUnit(
      code: 'bar',
      codeUC: 'BAR',
      value: Value(
          unit: 'Pa',
          unitUC: 'PAL',
          value: UcumDecimal.fromString('100000'),
          text: '1e5'),
      property: 'pressure',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'bars',
        'bar',
      ],
      printSymbol: 'bar'),
  DefinedUnit(
      code: 'bit',
      codeUC: 'BIT',
      value: Value(
          unit: '1',
          unitUC: '1',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of information',
      isMetric: true,
      isSpecial: false,
      class_: 'infotech',
      names: <String>[
        'bits',
        'bit',
      ],
      printSymbol: 'bit'),
  DefinedUnit(
      code: 'bit_s',
      codeUC: 'BIT_S',
      value:
          Value(unit: '1', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'amount of information',
      isMetric: false,
      isSpecial: true,
      class_: 'infotech',
      names: <String>[
        'bit-s',
        'bit s',
        'bit logarithmic',
        'bit - logarithmic',
      ],
      printSymbol: 'bit<sub>s</sub>'),
  DefinedUnit(
      code: 'cL',
      codeUC: 'CL',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'centiliters',
        'centilitres',
        'centiliter',
      ],
      printSymbol: 'cL'),
  DefinedUnit(
      code: 'cP',
      codeUC: 'CP',
      value: Value(
          unit: 'dyn.s/cm2',
          unitUC: 'DYN.S/CM2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'dynamic viscosity',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'cps',
        'centiposes',
        'centipoise',
      ],
      printSymbol: 'cP'),
  DefinedUnit(
      code: 'cSt',
      codeUC: 'CST',
      value: Value(
          unit: 'cm2/s',
          unitUC: 'CM2/S',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'kinematic viscosity',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'centistokes',
        'centistoke',
      ],
      printSymbol: 'cSt'),
  DefinedUnit(
      code: 'cal',
      codeUC: 'CAL',
      value: Value(
          unit: 'cal_th',
          unitUC: 'CAL_TH',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'energy',
      isMetric: true,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'gram calories',
        'small calories',
        'calorie',
      ],
      printSymbol: 'cal'),
  DefinedUnit(
      code: 'cal_IT',
      codeUC: 'CAL_IT',
      value: Value(
          unit: 'J',
          unitUC: 'J',
          value: UcumDecimal.fromString('4.1868'),
          text: '4.1868'),
      property: 'energy',
      isMetric: true,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'calories IT',
        'IT cals',
        'international steam table calories',
        'international table calorie'
      ],
      printSymbol: 'cal<sub>IT</sub>'),
  DefinedUnit(
      code: 'cal_[15]',
      codeUC: 'CAL_[15]',
      value: Value(
          unit: 'J',
          unitUC: 'J',
          value: UcumDecimal.fromString('4.18580'),
          text: '4.18580'),
      property: 'energy',
      isMetric: true,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'calorie 15 C',
        'cals 15 C',
        'calories at 15 C',
        'calorie at 15°C'
      ],
      printSymbol: 'cal<sub>15°C</sub>'),
  DefinedUnit(
      code: 'cal_[20]',
      codeUC: 'CAL_[20]',
      value: Value(
          unit: 'J',
          unitUC: 'J',
          value: UcumDecimal.fromString('4.18190'),
          text: '4.18190'),
      property: 'energy',
      isMetric: true,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'calorie 20 C',
        'cal 20 C',
        'calories at 20 C',
        'calorie at 20°C'
      ],
      printSymbol: 'cal<sub>20°C</sub>'),
  DefinedUnit(
      code: 'cal_m',
      codeUC: 'CAL_M',
      value: Value(
          unit: 'J',
          unitUC: 'J',
          value: UcumDecimal.fromString('4.19002'),
          text: '4.19002'),
      property: 'energy',
      isMetric: true,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'mean cals',
        'mean calories',
        'mean calorie',
      ],
      printSymbol: 'cal<sub>m</sub>'),
  DefinedUnit(
      code: 'cal_th',
      codeUC: 'CAL_TH',
      value: Value(
          unit: 'J',
          unitUC: 'J',
          value: UcumDecimal.fromString('4.184'),
          text: '4.184'),
      property: 'energy',
      isMetric: true,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'thermochemical calories',
        'th cals',
        'thermochemical calorie',
      ],
      printSymbol: 'cal<sub>th</sub>'),
  DefinedUnit(
      code: 'cg',
      codeUC: 'CG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'centigrams',
        'cg',
        'cgm',
        'centigram',
      ],
      printSymbol: 'cg'),
  DefinedUnit(
      code: 'circ',
      codeUC: 'CIRC',
      value: Value(
          unit: '[pi].rad',
          unitUC: '[PI].RAD',
          value: UcumDecimal.fromString('2'),
          text: '2'),
      property: 'plane angle',
      isMetric: false,
      isSpecial: false,
      class_: 'misc',
      names: <String>[
        'angles',
        'circles',
        'circle - plane angle',
      ],
      printSymbol: 'circ'),
  DefinedUnit(
      code: 'cm',
      codeUC: 'CM',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'centimeters',
        'centimetres',
        'centimeter',
      ],
      printSymbol: 'cm'),
  DefinedUnit(
      code: 'cm2',
      codeUC: 'CM2',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'cm^2',
        'sq cm',
        'centimeters squared',
        'square centimeters',
        'centimetre squared',
        'area',
        'square centimeter'
      ],
      printSymbol: 'cm<sup>2</sup>'),
  DefinedUnit(
      code: 'cm2/s',
      codeUC: 'CM2/S',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'cm^2/sec',
        'square centimeters per second',
        'sq cm per sec',
        'cm2',
        'centimeters squared',
        'centimetres squared',
        'square centimeter per second'
      ],
      printSymbol: '(cm<sup>2</sup>)/s'),
  DefinedUnit(
      code: 'cm[H2O]',
      codeUC: 'CM[H2O]',
      value: Value(
          unit: 'kPa',
          unitUC: 'KPAL',
          value: UcumDecimal.fromString('9.80665'),
          text: '980665e-5'),
      property: 'pressure',
      isMetric: true,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'cm H2O',
        'cmH2O',
        'centimetres',
        'pressure',
        'centimeter of water'
      ],
      printSymbol: 'cm HO<sub><r>2</r></sub>'),
  DefinedUnit(
      code: 'cm[H2O]/L/s',
      codeUC: '(CM[H2O]/L)/S',
      value: Value(
          unit: 'kPa',
          unitUC: 'KPAL',
          value: UcumDecimal.fromString('9.80665'),
          text: '980665e-5'),
      property: 'pressure',
      isMetric: true,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'cm[H2O]/(L/s)',
        'cm[H2O].s/L',
        'cm H2O/L/sec',
        'cmH2O/L/sec',
        'cmH2O/Liter',
        'cmH2O per L per secs',
        'centimeters of water per liters per second',
        'centimeter of water per liter per second'
      ],
      printSymbol: '(cm HO<sub><r>2</r></sub>)/L/s'),
  DefinedUnit(
      code: 'cm[H2O]/s/m',
      codeUC: '(CM[H2O]/S)/M',
      value: Value(
          unit: 'kPa',
          unitUC: 'KPAL',
          value: UcumDecimal.fromString('9.80665'),
          text: '980665e-5'),
      property: 'pressure',
      isMetric: true,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'cm[H2O]/(s.m)',
        'cm H2O/s/m',
        'cmH2O',
        'cmH2O/sec/m',
        'cmH2O per secs per meters',
        'centimeters of water per seconds per meter',
        'centimeter of water per second per meter'
      ],
      printSymbol: '(cm HO<sub><r>2</r></sub>)/s/m'),
  DefinedUnit(
      code: 'cm[Hg]',
      codeUC: 'CM[HG]',
      value: Value(
          unit: 'kPa',
          unitUC: 'KPAL',
          value: UcumDecimal.fromString('133.3220'),
          text: '133.3220'),
      property: 'pressure',
      isMetric: true,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'centimeters of mercury',
        'centimetres',
        'cmHg',
        'cm Hg',
        'centimeter of mercury'
      ],
      printSymbol: 'cm Hg'),
  DefinedUnit(
      code: 'd',
      codeUC: 'D',
      value: Value(
          unit: 'h',
          unitUC: 'HR',
          value: UcumDecimal.fromString('24'),
          text: '24'),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'days',
        'dy',
        '24 hours',
        '24 hrs',
        'day',
      ],
      printSymbol: 'd'),
  DefinedUnit(
      code: 'dB',
      codeUC: 'DB',
      value:
          Value(unit: '1', value: UcumDecimal.fromString('1.0'), text: '1.0'),
      property: 'level',
      isMetric: true,
      isSpecial: true,
      class_: 'levels',
      names: <String>[
        'decibels',
        'decibel',
      ],
      printSymbol: 'dB'),
  DefinedUnit(
      code: 'dL',
      codeUC: 'DL',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'deciliters',
        'decilitres',
        '0.1 liters',
        '1/10 L',
        'deciliter',
      ],
      printSymbol: 'dL'),
  DefinedUnit(
      code: 'daL/min',
      codeUC: 'DAL/MIN',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'dekalitres per min',
        'dekaliters per minute',
        'dekaliter per minute'
      ],
      printSymbol: 'daL/min'),
  DefinedUnit(
      code: 'daL/min/m2',
      codeUC: '(DAL/MIN)/M2',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'daL/min/m^2',
        'daL/minute/m2',
        'sq. meter',
        'dekaliters per minutes per square meter',
        'dekaliter per minute per square meter'
      ],
      printSymbol: '(daL/min)/(m<sup>2</sup>)'),
  DefinedUnit(
      code: 'deg',
      codeUC: 'DEG',
      value: Value(
          unit: '[pi].rad/360',
          unitUC: '[PI].RAD/360',
          value: UcumDecimal.fromString('2'),
          text: '2'),
      property: 'plane angle',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        '°',
        'degree of arc',
        'arc degree',
        'arcdegree',
        'angle',
        'degree - plane angle'
      ],
      printSymbol: '°'),
  DefinedUnit(
      code: 'deg/s',
      codeUC: 'DEG/S',
      value: Value(
          unit: '[pi].rad/360',
          unitUC: '[PI].RAD/360',
          value: UcumDecimal.fromString('2'),
          text: '2'),
      property: 'plane angle',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'deg/sec',
        'deg per sec',
        '°/sec',
        'twist rate',
        'angular speed',
        'rotational speed',
        'degree per second'
      ],
      printSymbol: '°/s'),
  DefinedUnit(
      code: 'dg',
      codeUC: 'DG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'decigrams',
        'dgm',
        '0.1 grams',
        '1/10 gm',
        'decigram',
      ],
      printSymbol: 'dg'),
  DefinedUnit(
      code: 'dm',
      codeUC: 'DM',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'decimeters',
        'decimetres',
        '0.1 meters',
        '1/10 m',
        '10 cm centimeters',
        'decimeter'
      ],
      printSymbol: 'dm'),
  DefinedUnit(
      code: 'dm2/s2',
      codeUC: 'DM2/S2',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'dm2 per s2',
        'dm^2/s^2',
        'decimeters squared per second squared',
        'sq dm',
        'sq sec',
        'square decimeter per square second'
      ],
      printSymbol: '(dm<sup>2</sup>)/(s<sup>2</sup>)'),
  DefinedUnit(
      code: 'dyn',
      codeUC: 'DYN',
      value: Value(
          unit: 'g.cm/s2',
          unitUC: 'G.CM/S2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'force',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'dynes',
        'dyne',
      ],
      printSymbol: 'dyn'),
  DefinedUnit(
      code: 'dyn.s/(cm.m2)',
      codeUC: '(DYN.S)/(CM.M2)',
      value: Value(
          unit: 'g.cm/s2',
          unitUC: 'G.CM/S2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'force',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        '(dyn*s)/(cm*m2)',
        '(dyn*s)/(cm*m^2)',
        'dyn s per cm per m2',
        'dyne seconds per centimeters per square meter',
        'dyne second per centimeter per square meter'
      ],
      printSymbol: '(dyn.s)/(cm.(m<sup>2</sup>))'),
  DefinedUnit(
      code: 'dyn.s/cm',
      codeUC: '(DYN.S)/CM',
      value: Value(
          unit: 'g.cm/s2',
          unitUC: 'G.CM/S2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'force',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        '(dyn*s)/cm',
        'dyn sec per cm',
        'dyne seconds',
        'dyne second per centimeter'
      ],
      printSymbol: '(dyn.s)/cm'),
  DefinedUnit(
      code: 'eV',
      codeUC: 'EV',
      value: Value(
          unit: '[e].V',
          unitUC: '[E].V',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'energy',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'Electron Volts',
        'electronvolts',
        'electronvolt',
      ],
      printSymbol: 'eV'),
  DefinedUnit(
      code: 'eq',
      codeUC: 'EQ',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'equivalents',
        'equivalent',
      ],
      printSymbol: 'eq'),
  DefinedUnit(
      code: 'eq/L',
      codeUC: 'EQ/L',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'eq/liter',
        'eq/litre',
        'eqs per litre',
        'equivalents per liter',
        'equivalent per liter'
      ],
      printSymbol: 'eq/L'),
  DefinedUnit(
      code: 'eq/mL',
      codeUC: 'EQ/ML',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'equivalent/milliliter',
        'equivalents per milliliter',
        'eq per mL',
        'equivalent per milliliter'
      ],
      printSymbol: 'eq/mL'),
  DefinedUnit(
      code: 'eq/mmol',
      codeUC: 'EQ/MMOL',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'equivalent/millimole',
        'equivalents per millimole',
        'eq per mmol',
        'equivalent per millimole'
      ],
      printSymbol: 'eq/mmol'),
  DefinedUnit(
      code: 'eq/umol',
      codeUC: 'EQ/UMOL',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'equivalent/micromole',
        'equivalents per micromole',
        'eq per umol',
        'equivalent per micromole'
      ],
      printSymbol: 'eq/μmol'),
  DefinedUnit(
      code: 'erg',
      codeUC: 'ERG',
      value: Value(
          unit: 'dyn.cm',
          unitUC: 'DYN.CM',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'energy',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        '10^-7 Joules, 10-7 Joules',
        '100 nJ',
        '100 nanoJoules',
        '1 dyne cm',
        '1 g.cm2/s2',
        'erg'
      ],
      printSymbol: 'erg'),
  DefinedUnit(
      code: 'fL',
      codeUC: 'FL',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'femtolitres',
        'femtoliters',
        'femtoliter',
      ],
      printSymbol: 'fL'),
  DefinedUnit(
      code: 'fg',
      codeUC: 'FG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'fg',
        'fgm',
        'femtograms',
        'femtogram',
      ],
      printSymbol: 'fg'),
  DefinedUnit(
      code: 'fm',
      codeUC: 'FM',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'femtometres',
        'femtometers',
        'femtometer',
      ],
      printSymbol: 'fm'),
  DefinedUnit(
      code: 'fmol',
      codeUC: 'FMOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'femtomoles',
        'femtomole',
      ],
      printSymbol: 'fmol'),
  DefinedUnit(
      code: 'fmol/L',
      codeUC: 'FMOL/L',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'femtomoles per litre',
        'fmol per liter',
        'femtomole per liter',
      ],
      printSymbol: 'fmol/L'),
  DefinedUnit(
      code: 'fmol/g',
      codeUC: 'FMOL/G',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'femtomoles',
        'fmol/gm',
        'fmol per gm',
        'femtomole per gram',
      ],
      printSymbol: 'fmol/g'),
  DefinedUnit(
      code: 'fmol/mL',
      codeUC: 'FMOL/ML',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'femtomoles per millilitre',
        'fmol per mL',
        'fmol per milliliter',
        'femtomole per milliliter'
      ],
      printSymbol: 'fmol/mL'),
  DefinedUnit(
      code: 'fmol/mg',
      codeUC: 'FMOL/MG',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'fmol per mg',
        'femtomole per milligram',
      ],
      printSymbol: 'fmol/mg'),
  DefinedUnit(
      code: 'g%',
      codeUC: 'G%',
      value: Value(
          unit: 'g/dl',
          unitUC: 'G/DL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'mass concentration',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'gram %',
        'gram%',
        'grams per deciliter',
        'g/dL',
        'gm per dL',
        'gram percents',
        'gram percent'
      ],
      printSymbol: 'g%'),
  DefinedUnit(
      code: 'g.m',
      codeUC: 'G.M',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'g*m',
        'gxm',
        'meters',
        'metres',
        'gram meter',
      ],
      printSymbol: 'g.m'),
  DefinedUnit(
      code: 'g/(100.g)',
      codeUC: 'G/G',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'g/100 gm',
        '100gm',
        'grams per 100 grams',
        'gm per 100 gm',
        'gram per 100 gram'
      ],
      printSymbol: 'g/g'),
  DefinedUnit(
      code: 'g/(12.h)',
      codeUC: 'G/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'gm/12hrs',
        'gm per 12 hrs',
        'grams per 12 hours',
        'gram per 12 hour'
      ],
      printSymbol: 'g/h'),
  DefinedUnit(
      code: 'g/(24.h)',
      codeUC: 'G/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'gm/24hrs',
        'gm/24 hrs',
        'gm per 24 hrs',
        'grams per 24 hours',
        'gm/dy',
        'gm per dy',
        'grams per day',
        'gram per 24 hour'
      ],
      printSymbol: 'g/h'),
  DefinedUnit(
      code: 'g/(3.d)',
      codeUC: 'G/D',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'gm/3dy',
        'gm/3 dy',
        'gm per 3 days',
        'gram per 3 days',
      ],
      printSymbol: 'g/d'),
  DefinedUnit(
      code: 'g/(4.h)',
      codeUC: 'G/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'gm/4hrs',
        'gm/4 hrs',
        'gm per 4 hrs',
        'grams per 4 hours',
        'gram per 4 hour'
      ],
      printSymbol: 'g/h'),
  DefinedUnit(
      code: 'g/(48.h)',
      codeUC: 'G/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'gm/48hrs',
        'gm/48 hrs',
        'gm per 48 hrs',
        'grams per 48 hours',
        'gram per 48 hour'
      ],
      printSymbol: 'g/h'),
  DefinedUnit(
      code: 'g/(5.h)',
      codeUC: 'G/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'gm/5hrs',
        'gm/5 hrs',
        'gm per 5 hrs',
        'grams per 5 hours',
        'gram per 5 hour'
      ],
      printSymbol: 'g/h'),
  DefinedUnit(
      code: 'g/(6.h)',
      codeUC: 'G/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'gm/6hrs',
        'gm/6 hrs',
        'gm per 6 hrs',
        'grams per 6 hours',
        'gram per 6 hour'
      ],
      printSymbol: 'g/h'),
  DefinedUnit(
      code: 'g/(72.h)',
      codeUC: 'G/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'gm/72hrs',
        'gm/72 hrs',
        'gm per 72 hrs',
        'grams per 72 hours',
        'gram per 72 hour'
      ],
      printSymbol: 'g/h'),
  DefinedUnit(
      code: 'g/L',
      codeUC: 'G/L',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'gm per liter',
        'g/liter',
        'grams per liter',
        'gram per liter',
      ],
      printSymbol: 'g/L'),
  DefinedUnit(
      code: 'g/cm3',
      codeUC: 'G/CM3',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'g/cm^3',
        'gm per cm3',
        'g per cm^3',
        'grams per centimeter cubed',
        'g/mL',
        'gram per milliliter',
        'gram per cubic centimeter'
      ],
      printSymbol: 'g/(cm<sup>3</sup>)'),
  DefinedUnit(
      code: 'g/d',
      codeUC: 'G/D',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'gm/dy',
        'gm per dy',
        'grams per day',
        'gm/24hrs',
        'gm/24 hrs',
        'gm per 24 hrs',
        'grams per 24 hours',
        'gram per day'
      ],
      printSymbol: 'g/d'),
  DefinedUnit(
      code: 'g/dL',
      codeUC: 'G/DL',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'gm/dL',
        'gm per dL',
        'grams per deciliter',
        'gram per deciliter'
      ],
      printSymbol: 'g/dL'),
  DefinedUnit(
      code: 'g/g',
      codeUC: 'G/G',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'gram per gram',
      ],
      printSymbol: 'g/g'),
  DefinedUnit(
      code: 'g/h',
      codeUC: 'G/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'gm/hr',
        'gm per hr',
        'intake',
        'output',
        'gram per hour'
      ],
      printSymbol: 'g/h'),
  DefinedUnit(
      code: 'g/h/m2',
      codeUC: '(G/HR)/M2',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'gm/hr/m2',
        'gm/h/m2',
        'g/m^2',
        'g per sq. m',
        'g per hr per m2',
        'grams per hours per square meter',
        'gram per hour per square meter'
      ],
      printSymbol: '(g/h)/(m<sup>2</sup>)'),
  DefinedUnit(
      code: 'g/kg ',
      codeUC: 'G/KG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'g per kg',
        'gram per kilograms',
        'gram per kilogram',
      ],
      printSymbol: 'g/kg'),
  DefinedUnit(
      code: 'g/kg/(8.h)',
      codeUC: '(G/KG)/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'g/(8.kg.h)',
        'gm/kg/8hrs',
        'g per kg per 8 hrs',
        'grams per kilograms per 8 hours',
        'gram per kilogram per 8 hour '
      ],
      printSymbol: '(g/kg)/h'),
  DefinedUnit(
      code: 'g/kg/d',
      codeUC: '(G/KG)/D',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'g/(kg.d)',
        'gm/kg/dy',
        'gm per kg per dy',
        'grams per kilograms per day',
        'gram per kilogram per day'
      ],
      printSymbol: '(g/kg)/d'),
  DefinedUnit(
      code: 'g/kg/h',
      codeUC: '(G/KG)/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'g/(kg.h)',
        'g/kg/hr',
        'g per kg per hrs',
        'grams per kilograms per hour',
        'gram per kilogram per hour'
      ],
      printSymbol: '(g/kg)/h'),
  DefinedUnit(
      code: 'g/kg/min',
      codeUC: '(G/KG)/MIN',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'g/(kg.min)',
        'g/kg/min',
        'g per kg per min',
        'grams per kilograms per minute',
        'gram per kilogram per minute'
      ],
      printSymbol: '(g/kg)/min'),
  DefinedUnit(
      code: 'g/m2',
      codeUC: 'G/M2',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'g/m^2',
        'gram/square meter',
        'g/sq m',
        'g per m2',
        'g per m^2',
        'grams per square meter',
        'gram per square meter'
      ],
      printSymbol: 'g/(m<sup>2</sup>)'),
  DefinedUnit(
      code: 'g/mL',
      codeUC: 'G/ML',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'g per mL',
        'grams per milliliter',
        'gram per milliliter'
      ],
      printSymbol: 'g/mL'),
  DefinedUnit(
      code: 'g/mg',
      codeUC: 'G/MG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'g per mg',
        'grams per milligram',
        'gram per milligram',
      ],
      printSymbol: 'g/mg'),
  DefinedUnit(
      code: 'g/min',
      codeUC: 'G/MIN',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'g per min',
        'grams per minute',
        'gram/minute',
        'gram per minute'
      ],
      printSymbol: 'g/min'),
  DefinedUnit(
      code: 'g/mmol',
      codeUC: 'G/MMOL',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'grams per millimole',
        'g per mmol',
        'gram per millimole',
      ],
      printSymbol: 'g/mmol'),
  DefinedUnit(
      code: 'gf',
      codeUC: 'GF',
      value: Value(
          unit: 'g.[g]',
          unitUC: 'G.[G]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'force',
      isMetric: true,
      isSpecial: false,
      class_: 'const',
      names: <String>[
        'Newtons',
        'gram forces',
        'gram-force',
      ],
      printSymbol: 'gf'),
  DefinedUnit(
      code: 'gon',
      codeUC: 'GON',
      value: Value(
          unit: 'deg',
          unitUC: 'DEG',
          value: UcumDecimal.fromString('0.9'),
          text: '0.9'),
      property: 'plane angle',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'gon (grade)',
        'gons',
        'gon',
      ],
      printSymbol: '□<sup>g</sup>'),
  DefinedUnit(
      code: 'h',
      codeUC: 'HR',
      value: Value(
          unit: 'min',
          unitUC: 'MIN',
          value: UcumDecimal.fromString('60'),
          text: '60'),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'hours',
        'hrs',
        'hour',
      ],
      printSymbol: 'h'),
  DefinedUnit(
      code: 'kL',
      codeUC: 'KL',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'kiloliters',
        'kilolitres',
        'm3',
        'm^3',
        'meters cubed',
        'kiloliter'
      ],
      printSymbol: 'kL'),
  DefinedUnit(
      code: 'kPa',
      codeUC: 'KPAL',
      value: Value(
          unit: 'N/m2',
          unitUC: 'N/M2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'pressure',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'kilopascals',
        'pressure',
        'kilopascal',
      ],
      printSymbol: 'kPa'),
  DefinedUnit(
      code: 'kU',
      codeUC: 'KU',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'units',
        'mmol/min',
        'millimoles per minute',
        'kilo enzyme unit',
      ],
      printSymbol: 'kU'),
  DefinedUnit(
      code: 'kU/L',
      codeUC: 'KU/L',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'enzyme activity per volume',
        'activities',
        'kilo enzyme unit per liter'
      ],
      printSymbol: 'kU/L'),
  DefinedUnit(
      code: 'kU/g',
      codeUC: 'KU/G',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'units per grams',
        'kU per gm',
        'kilo enzyme unit per gram',
      ],
      printSymbol: 'kU/g'),
  DefinedUnit(
      code: 'kU/mL',
      codeUC: 'KU/ML',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'kU per mL',
        'units per milliliter',
        'enzymatic activity per volume',
        'enzyme activities',
        'kilo enzyme unit per milliliter'
      ],
      printSymbol: 'kU/mL'),
  DefinedUnit(
      code: 'k[IU]/L',
      codeUC: 'K[IU]/L',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'kIU/L',
        'kIU per L',
        'kIU per liter',
        'kilo international units',
        'allergens',
        'allergy units',
        'kilo international unit per liter'
      ],
      printSymbol: '(ki.U.)/L'),
  DefinedUnit(
      code: 'k[IU]/mL',
      codeUC: 'K[IU]/ML',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'kIU/mL',
        'kIU per mL',
        'kIU per milliliter',
        'kilo international units',
        'allergens',
        'allergy units',
        'kilo international unit per milliliter'
      ],
      printSymbol: '(ki.U.)/mL'),
  DefinedUnit(
      code: 'kat',
      codeUC: 'KAT',
      value: Value(
          unit: 'mol/s',
          unitUC: 'MOL/S',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'mol/secs',
        'moles per second',
        'mol*sec-1',
        'mol*s-1',
        'mol.s-1',
        'katals',
        'catalytic activity',
        'enzymatic',
        'activities',
        'katal'
      ],
      printSymbol: 'kat'),
  DefinedUnit(
      code: 'kat/L',
      codeUC: 'KAT/L',
      value: Value(
          unit: 'mol/s',
          unitUC: 'MOL/S',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'kat per L',
        'katals per liter',
        'mol/s/L',
        'moles per seconds per liter',
        'katal per liter'
      ],
      printSymbol: 'kat/L'),
  DefinedUnit(
      code: 'kat/kg',
      codeUC: 'KAT/KG',
      value: Value(
          unit: 'mol/s',
          unitUC: 'MOL/S',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'kat per kg',
        'katals per kilogram',
        'mol/s/kg',
        'moles per seconds per kilogram',
        'katal per kilogram'
      ],
      printSymbol: 'kat/kg'),
  DefinedUnit(
      code: 'kcal',
      codeUC: 'KCAL',
      value: Value(
          unit: 'cal_th',
          unitUC: 'CAL_TH',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'energy',
      isMetric: true,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'kilogram calories',
        'large calories',
        'food calories',
        'kcals',
        'kilocalorie'
      ],
      printSymbol: 'kcal'),
  DefinedUnit(
      code: 'kcal/(24.h)',
      codeUC: 'KCAL/HR',
      value: Value(
          unit: 'cal_th',
          unitUC: 'CAL_TH',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'energy',
      isMetric: true,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'kcal/24hrs',
        'kcal/24 hrs',
        'kcal per 24hrs',
        'kilocalories per 24 hours',
        'kilojoules',
        'kJ/24hr',
        'kJ/(24.h)',
        'kJ/dy',
        'kilojoules per days',
        'intake',
        'calories burned',
        'metabolic rate',
        'food calories',
        'kilocalorie per 24 hour'
      ],
      printSymbol: 'kcal/h'),
  DefinedUnit(
      code: 'kcal/[oz_av]',
      codeUC: 'KCAL/[OZ_AV]',
      value: Value(
          unit: 'cal_th',
          unitUC: 'CAL_TH',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'energy',
      isMetric: true,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'kcal/oz',
        'kcal per ozs',
        'large calories per ounces',
        'food calories',
        'servings',
        'international',
        'kilocalorie per ounce'
      ],
      printSymbol: 'kcal/oz'),
  DefinedUnit(
      code: 'kcal/d',
      codeUC: 'KCAL/D',
      value: Value(
          unit: 'cal_th',
          unitUC: 'CAL_TH',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'energy',
      isMetric: true,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'kcal/dy',
        'kcal per day',
        'kilocalories per days',
        'kilojoules',
        'kJ/dy',
        'kilojoules per days',
        'intake',
        'calories burned',
        'metabolic rate',
        'food calories',
        'kilocalorie per day'
      ],
      printSymbol: 'kcal/d'),
  DefinedUnit(
      code: 'kcal/h',
      codeUC: 'KCAL/HR',
      value: Value(
          unit: 'cal_th',
          unitUC: 'CAL_TH',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'energy',
      isMetric: true,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'kcal/hrs',
        'kcals per hr',
        'intake',
        'kilocalories per hours',
        'kilojoules',
        'kilocalorie per hour'
      ],
      printSymbol: 'kcal/h'),
  DefinedUnit(
      code: 'kcal/kg/(24.h)',
      codeUC: '(KCAL/KG)/HR',
      value: Value(
          unit: 'cal_th',
          unitUC: 'CAL_TH',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'energy',
      isMetric: true,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'kcal/kg/24hrs',
        '24 hrs',
        'kcal per kg per 24hrs',
        'kilocalories per kilograms per 24 hours',
        'kilojoules',
        'kilocalorie per kilogram per 24 hour'
      ],
      printSymbol: '(kcal/kg)/h'),
  DefinedUnit(
      code: 'kg',
      codeUC: 'KG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'kilograms',
        'kgs',
        'kilogram',
      ],
      printSymbol: 'kg'),
  DefinedUnit(
      code: 'kg.m/s',
      codeUC: '(KG.M)/S',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'kg*m/s',
        'kg.m per sec',
        'kg*m per sec',
        'p',
        'momentum',
        'kilogram meter per second'
      ],
      printSymbol: '(kg.m)/s'),
  DefinedUnit(
      code: 'kg/(s.m2)',
      codeUC: 'KG/(S.M2)',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'kg/(s*m2)',
        'kg/(s*m^2)',
        'kg per s per m2',
        'kilograms per seconds per square meter',
        'kilogram per second per square meter'
      ],
      printSymbol: 'kg/(s.(m<sup>2</sup>))'),
  DefinedUnit(
      code: 'kg/L',
      codeUC: 'KG/L',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'kg per liter',
        'litre',
        'kilograms',
        'kilogram per liter',
      ],
      printSymbol: 'kg/L'),
  DefinedUnit(
      code: 'kg/h',
      codeUC: 'KG/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'kg/hr',
        'kg per hr',
        'kilograms per hour',
        'kilogram per hour',
      ],
      printSymbol: 'kg/h'),
  DefinedUnit(
      code: 'kg/m2',
      codeUC: 'KG/M2',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'kg/m^2',
        'kg/sq. m',
        'kg per m2',
        'per m^2',
        'per sq. m',
        'kilograms',
        'meter squared',
        'metre',
        'BMI',
        'kilogram per square meter'
      ],
      printSymbol: 'kg/(m<sup>2</sup>)'),
  DefinedUnit(
      code: 'kg/m3',
      codeUC: 'KG/M3',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'kg/m^3',
        'kg/cu. m',
        'kg per m3',
        'per m^3',
        'per cu. m',
        'kilograms',
        'meters cubed',
        'kilogram per cubic meter'
      ],
      printSymbol: 'kg/(m<sup>3</sup>)'),
  DefinedUnit(
      code: 'kg/min',
      codeUC: 'KG/MIN',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'kilogram/minute',
        'kg per min',
        'kilograms per minute',
        'kilogram per minute'
      ],
      printSymbol: 'kg/min'),
  DefinedUnit(
      code: 'kg/mol',
      codeUC: 'KG/MOL',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'kilogram/mole',
        'kg per mol',
        'kilograms per mole',
        'kilogram per mole'
      ],
      printSymbol: 'kg/mol'),
  DefinedUnit(
      code: 'kg/s',
      codeUC: 'KG/S',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'kg/sec',
        'kilogram/second',
        'kg per sec',
        'kilograms per second',
        'kilogram per second'
      ],
      printSymbol: 'kg/s'),
  DefinedUnit(
      code: 'km',
      codeUC: 'KM',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'kilometers',
        'kilometres',
        'distance',
        'kilometer',
      ],
      printSymbol: 'km'),
  DefinedUnit(
      code: 'ks',
      codeUC: 'KS',
      value: Value(),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'kiloseconds',
        'ksec',
        'kilosecond',
      ],
      printSymbol: 'ks'),
  DefinedUnit(
      code: 'l',
      codeUC: 'L',
      value: Value(
          unit: 'dm3',
          unitUC: 'DM3',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'cubic decimeters',
        'decimeters cubed',
        'decimetres',
        'dm3',
        'dm^3',
        'litres',
        'liters, LT',
        'Liters'
      ],
      printSymbol: 'l'),
  DefinedUnit(
      code: 'lm',
      codeUC: 'LM',
      value: Value(
          unit: 'cd.sr',
          unitUC: 'CD.SR',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'luminous flux',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'luminous flux',
        'lumens',
        'lumen',
      ],
      printSymbol: 'lm'),
  DefinedUnit(
      code: 'lm.m2',
      codeUC: 'LM.M2',
      value: Value(
          unit: 'cd.sr',
          unitUC: 'CD.SR',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'luminous flux',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'lm*m2',
        'lm*m^2',
        'lumen meters squared',
        'lumen sq. meters',
        'metres',
        'lumen square meter'
      ],
      printSymbol: 'lm.(m<sup>2</sup>)'),
  DefinedUnit(
      code: 'lx',
      codeUC: 'LX',
      value: Value(
          unit: 'lm/m2',
          unitUC: 'LM/M2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'illuminance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'illuminance',
        'luxes',
        'lux',
      ],
      printSymbol: 'lx'),
  DefinedUnit(
      code: 'm/s',
      codeUC: 'M/S',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'meter/second',
        'm per sec',
        'meters per second',
        'velocity',
        'speed',
        'meter per second'
      ],
      printSymbol: 'm/s'),
  DefinedUnit(
      code: 'm/s2',
      codeUC: 'M/S2',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'm/s^2',
        'm/sq. sec',
        'm per s2',
        'metres per s^2',
        'meters per square second',
        'meter per square second'
      ],
      printSymbol: 'm/(s<sup>2</sup>)'),
  DefinedUnit(
      code: 'm2',
      codeUC: 'M2',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'm^2',
        'sq m',
        'square meters',
        'meters squared',
        'square meter',
      ],
      printSymbol: 'm<sup>2</sup>'),
  DefinedUnit(
      code: 'm2/s',
      codeUC: 'M2/S',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'm^2/sec',
        'm2 per sec',
        'm^2 per sec',
        'sq m/sec',
        'meters squared/seconds',
        'sq m per sec',
        'meters squared per second',
        'square meter per second'
      ],
      printSymbol: '(m<sup>2</sup>)/s'),
  DefinedUnit(
      code: 'm3/s',
      codeUC: 'M3/S',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'm^3/sec',
        'm3 per sec',
        'm^3 per sec',
        'cu m/sec',
        'cubic meters per seconds',
        'meters cubed',
        'cubic meter per second'
      ],
      printSymbol: '(m<sup>3</sup>)/s'),
  DefinedUnit(
      code: 'mA',
      codeUC: 'MA',
      value: Value(
          unit: 'C/s',
          unitUC: 'C/S',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'electric current',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mamp',
        'milliamperes',
        'milliampere',
      ],
      printSymbol: 'mA'),
  DefinedUnit(
      code: 'mL',
      codeUC: 'ML',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'milliliters',
        'millilitres',
        'milliliter',
      ],
      printSymbol: 'mL'),
  DefinedUnit(
      code: 'mL/(10.h)',
      codeUC: 'ML/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'ml/10hrs',
        'ml/10 hrs',
        'mL per 10hrs',
        'milliliters per 10 hours',
        'millilitres',
        'milliliter per 10 hour'
      ],
      printSymbol: 'mL/h'),
  DefinedUnit(
      code: 'mL/(12.h)',
      codeUC: 'ML/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'ml/12hrs',
        'ml/12 hrs',
        'mL per 12hrs',
        'milliliters per 12 hours',
        'millilitres',
        'milliliter per 12 hour'
      ],
      printSymbol: 'mL/h'),
  DefinedUnit(
      code: 'mL/(2.h)',
      codeUC: 'ML/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'ml/2hrs',
        'ml/2 hrs',
        'mL per 2hrs',
        'milliliters per 2 hours',
        'millilitres per 2 hours',
        'milliliter per 2 hour'
      ],
      printSymbol: 'mL/h'),
  DefinedUnit(
      code: 'mL/(24.h)',
      codeUC: 'ML/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'ml/24hrs',
        'ml/24 hrs',
        'mL per 24hrs',
        'milliliters per 24 hours',
        'ml/dy',
        'milliliters/day',
        'ml per dy',
        'fluid outputs',
        'fluid inputs',
        'flow rate',
        'milliliter per 24 hour'
      ],
      printSymbol: 'mL/h'),
  DefinedUnit(
      code: 'mL/(4.h)',
      codeUC: 'ML/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'ml/4hrs',
        'ml/4 hrs',
        'mL per 4hrs',
        'milliliters per 4 hours',
        'millilitres',
        'milliliter per 4 hour'
      ],
      printSymbol: 'mL/h'),
  DefinedUnit(
      code: 'mL/(5.h)',
      codeUC: 'ML/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'ml/5hrs',
        'ml/5 hrs',
        'mL per 5hrs',
        'milliliters per 5 hours',
        'millilitres per 5 hrs',
        'milliliter per 5 hour'
      ],
      printSymbol: 'mL/h'),
  DefinedUnit(
      code: 'mL/(6.h)',
      codeUC: 'ML/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'ml/6hrs',
        'ml/6 hrs',
        'mL per 6hrs',
        'milliliters per 6 hours',
        'millilitres per 6 hrs',
        'milliliter per 6 hour'
      ],
      printSymbol: 'mL/h'),
  DefinedUnit(
      code: 'mL/(72.h)',
      codeUC: 'ML/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'ml/72hrs',
        'ml/72 hrs',
        'mL per 72hrs',
        'milliliters per 72 hours',
        'millilitres per 72 hrs',
        'milliliter per 72 hour'
      ],
      printSymbol: 'mL/h'),
  DefinedUnit(
      code: 'mL/(8.h)',
      codeUC: 'ML/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'ml/8hrs',
        'ml/8 hrs',
        'mL per 8hrs',
        'milliliters per 8 hours',
        'millilitres per 8 hrs',
        'milliliter per 8 hour'
      ],
      printSymbol: 'mL/h'),
  DefinedUnit(
      code: 'mL/(8.h)/kg',
      codeUC: '(ML/HR)/KG',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mL/kg/(8.h)',
        'ml/8h/kg',
        'ml/8 h/kg',
        'ml/8hr/kg',
        'ml/8 hr/kgr',
        'mL per 8h per kg',
        'milliliters per 8 hours per kilogram',
        'millilitres per 8 hours per kilogram',
        'milliliter per 8 hour per kilogram'
      ],
      printSymbol: '(mL/h)/kg'),
  DefinedUnit(
      code: 'mL/[sin_i]',
      codeUC: 'ML/[SIN_I]',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mL/sin',
        'mL/in2',
        'mL/in^2',
        'mL per sin',
        'in2',
        'in^2',
        'sq. in',
        'milliliters per square inch',
        'inch squared',
        'milliliter per square inch (international)'
      ],
      printSymbol: 'mL'),
  DefinedUnit(
      code: 'mL/cm[H2O]',
      codeUC: 'ML/CM[H2O]',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'milliliters per centimeter of water',
        'millilitre per centimetre of water',
        'millilitres per centimetre of water',
        'mL/cmH2O',
        'mL/cm H2O',
        'mL per cmH2O',
        'mL per cm H2O',
        'milliliter per centimeter of water'
      ],
      printSymbol: 'mL/(cm HO<sub><r>2</r></sub>)'),
  DefinedUnit(
      code: 'mL/d',
      codeUC: 'ML/D',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'ml/day',
        'ml per day',
        'milliliters per day',
        'millilitre per 24 hours',
        'milliliter per day',
        'millilitre/24hrs',
      ],
      printSymbol: 'mL/d'),
  DefinedUnit(
      code: 'mL/dL',
      codeUC: 'ML/DL',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mL per dL',
        'millilitres per decilitre',
        'milliliter per deciliter'
      ],
      printSymbol: 'mL/dL'),
  DefinedUnit(
      code: 'mL/h',
      codeUC: 'ML/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mL/hr',
        'mL per hr',
        'milliliters per hour',
        'fluid intake',
        'fluid output',
        'milliliter per hour'
      ],
      printSymbol: 'mL/h'),
  DefinedUnit(
      code: 'mL/kg',
      codeUC: 'ML/KG',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mL per kg',
        'milliliters per kilogram',
        'milliliter per kilogram'
      ],
      printSymbol: 'mL/kg'),
  DefinedUnit(
      code: 'mL/kg/(8.h)',
      codeUC: '(ML/KG)/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mL/(8.h.kg)',
        'mL/kg/8hrs',
        'mL/kg/8 hrs',
        'mL per kg per 8hrs',
        'milliliters per kilograms per 8 hours',
        'millilitres per 8hrs',
        'milliliter per kilogram per 8 hour'
      ],
      printSymbol: '(mL/kg)/h'),
  DefinedUnit(
      code: 'mL/kg/d',
      codeUC: '(ML/KG)/D',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mL/(kg.d)',
        'mL/kg/dy',
        'mL per kg per day',
        'milliliters per kilograms per day',
        'mg/kg/24hrs',
        'milliliter per kilogram per day'
      ],
      printSymbol: '(mL/kg)/d'),
  DefinedUnit(
      code: 'mL/kg/h',
      codeUC: '(ML/KG)/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mL/(kg.h)',
        'mL/kg/hr',
        'mL per kg per hr',
        'milliliters per kilograms per hour',
        'milliliter per kilogram per hour'
      ],
      printSymbol: '(mL/kg)/h'),
  DefinedUnit(
      code: 'mL/kg/min',
      codeUC: '(ML/KG)/MIN',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mL/(kg.min)',
        'mL/kg/dy',
        'mL per kg per day',
        'milliliters per kilograms per day',
        'milliliter per kilogram per minute'
      ],
      printSymbol: '(mL/kg)/min'),
  DefinedUnit(
      code: 'mL/m2',
      codeUC: 'ML/M2',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mL/m^2',
        'mL/sq. meter',
        'mL per m2',
        'milliliters per square meter',
        'millilitres per meter squared',
        'milliliter per square meter'
      ],
      printSymbol: 'mL/(m<sup>2</sup>)'),
  DefinedUnit(
      code: 'mL/mbar',
      codeUC: 'ML/MBAR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mL per mbar',
        'milliliters per millibar',
        'milliliter per millibar'
      ],
      printSymbol: 'mL/mbar'),
  DefinedUnit(
      code: 'mL/min',
      codeUC: 'ML/MIN',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>['mL per min', 'milliliter per minute'],
      printSymbol: 'mL/min'),
  DefinedUnit(
      code: 'mL/min/m2',
      codeUC: '(ML/MIN)/M2',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'ml/min/m^2',
        'ml/min/sq. meter',
        'mL per min per m2',
        'milliliters per minutes per square meter',
        'milliliter per minute per square meter'
      ],
      printSymbol: '(mL/min)/(m<sup>2</sup>)'),
  DefinedUnit(
      code: 'mL/mm',
      codeUC: 'ML/MM',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mL per mm',
        'milliliters per millimeter',
        'milliliter per millimeter'
      ],
      printSymbol: 'mL/mm'),
  DefinedUnit(
      code: 'mL/s',
      codeUC: 'ML/S',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'ml/sec',
        'mL per sec',
        'milliliters per second',
        'milliliter per second'
      ],
      printSymbol: 'mL/s'),
  DefinedUnit(
      code: 'mPa',
      codeUC: 'MPAL',
      value: Value(
          unit: 'N/m2',
          unitUC: 'N/M2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'pressure',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'millipascals',
        'millipascal',
      ],
      printSymbol: 'mPa'),
  DefinedUnit(
      code: 'mPa.s',
      codeUC: 'MPAL.S',
      value: Value(
          unit: 'N/m2',
          unitUC: 'N/M2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'pressure',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mPa*s',
        'millipoise',
        'mP',
        'dynamic viscosity',
        'millipascal second'
      ],
      printSymbol: 'mPa.s'),
  DefinedUnit(
      code: 'mU/L',
      codeUC: 'MU/L',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'mU per liter',
        'litre',
        'milli enzyme units enzymatic activity per volume',
        'milli enzyme unit per liter'
      ],
      printSymbol: 'mU/L'),
  DefinedUnit(
      code: 'mU/g',
      codeUC: 'MU/G',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'mU per gm',
        'milli enzyme units per gram',
        'enzymatic activity per mass',
        'milli enzyme unit per gram'
      ],
      printSymbol: 'mU/g'),
  DefinedUnit(
      code: 'mU/mL',
      codeUC: 'MU/ML',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'mU per mL',
        'milli enzyme units per milliliter',
        'enzymatic activity per volume',
        'milli enzyme unit per milliliter'
      ],
      printSymbol: 'mU/mL'),
  DefinedUnit(
      code: 'mU/mL/min',
      codeUC: '(MU/ML)/MIN',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'mU per mL per min',
        'mU per milliliters per minute',
        'milli enzyme units',
        'milli enzyme unit per milliliter per minute'
      ],
      printSymbol: '(mU/mL)/min'),
  DefinedUnit(
      code: 'mU/mg',
      codeUC: 'MU/MG',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'mU per mg',
        'milli enzyme units per milligram',
        'milli enzyme unit per milligram'
      ],
      printSymbol: 'mU/mg'),
  DefinedUnit(
      code: 'mV',
      codeUC: 'MV',
      value: Value(
          unit: 'J/C',
          unitUC: 'J/C',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'electric potential',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'millivolts',
        'millivolt',
      ],
      printSymbol: 'mV'),
  DefinedUnit(
      code: 'm[H2O]',
      codeUC: 'M[H2O]',
      value: Value(
          unit: 'kPa',
          unitUC: 'KPAL',
          value: UcumDecimal.fromString('9.80665'),
          text: '980665e-5'),
      property: 'pressure',
      isMetric: true,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'meter of water column',
        'meters of water column',
        'mH2O',
        'm H2O',
        '(meters of water column)',
      ],
      printSymbol: 'm HO<sub><r>2</r></sub>'),
  DefinedUnit(
      code: 'm[Hg]',
      codeUC: 'M[HG]',
      value: Value(
          unit: 'kPa',
          unitUC: 'KPAL',
          value: UcumDecimal.fromString('133.3220'),
          text: '133.3220'),
      property: 'pressure',
      isMetric: true,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'mHg',
        'm Hg',
        'meters of mercury column',
        'meter of mercury column'
      ],
      printSymbol: 'm Hg'),
  DefinedUnit(
      code: 'm[IU]/L',
      codeUC: 'M[IU]/L',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'mIU/L',
        'm IU/L',
        'mIU per liter',
        'milli international unit per liter'
      ],
      printSymbol: '(mi.U.)/L'),
  DefinedUnit(
      code: 'm[IU]/mL',
      codeUC: 'M[IU]/ML',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'mIU/mL',
        'm IU/mL',
        'mIU per mL',
        'milli international units per milliliter',
        'milli  international unit per milliliter'
      ],
      printSymbol: '(mi.U.)/mL'),
  DefinedUnit(
      code: 'mbar',
      codeUC: 'MBAR',
      value: Value(
          unit: 'Pa',
          unitUC: 'PAL',
          value: UcumDecimal.fromString('100000'),
          text: '1e5'),
      property: 'pressure',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'millibars',
        'millibar',
      ],
      printSymbol: 'mbar'),
  DefinedUnit(
      code: 'mbar.s/L',
      codeUC: '(MBAR.S)/L',
      value: Value(
          unit: 'Pa',
          unitUC: 'PAL',
          value: UcumDecimal.fromString('100000'),
          text: '1e5'),
      property: 'pressure',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mbar*s/L',
        'mbar.s per L',
        'mbar*s per L',
        'millibar seconds per liter',
        'millibar second per litre',
        'millibar second per liter'
      ],
      printSymbol: '(mbar.s)/L'),
  DefinedUnit(
      code: 'mbar/L/s',
      codeUC: '(MBAR/L)/S',
      value: Value(
          unit: 'Pa',
          unitUC: 'PAL',
          value: UcumDecimal.fromString('100000'),
          text: '1e5'),
      property: 'pressure',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mbar/(L.s)',
        'mbar/L/sec',
        'mbar/liter/second',
        'mbar per L per sec',
        'mbar per liter per second',
        'millibars per liters per seconds',
        'millibar per liter per second'
      ],
      printSymbol: '(mbar/L)/s'),
  DefinedUnit(
      code: 'meq',
      codeUC: 'MEQ',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'milliequivalents',
        'meqs',
        'milliequivalent',
      ],
      printSymbol: 'meq'),
  DefinedUnit(
      code: 'meq/(2.h)',
      codeUC: 'MEQ/HR',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'meq/2hrs',
        'meq/2 hrs',
        'meq per 2 hrs',
        'milliequivalents per 2 hours',
        'milliequivalent per 2 hour'
      ],
      printSymbol: 'meq/h'),
  DefinedUnit(
      code: 'meq/(24.h)',
      codeUC: 'MEQ/HR',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'meq/24hrs',
        'meq/24 hrs',
        'meq per 24 hrs',
        'milliequivalents per 24 hours',
        'milliequivalent per 24 hour'
      ],
      printSymbol: 'meq/h'),
  DefinedUnit(
      code: 'meq/(8.h)',
      codeUC: 'MEQ/HR',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'meq/8hrs',
        'meq/8 hrs',
        'meq per 8 hrs',
        'milliequivalents per 8 hours',
        'milliequivalent per 8 hour'
      ],
      printSymbol: 'meq/h'),
  DefinedUnit(
      code: 'meq/L',
      codeUC: 'MEQ/L',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'milliequivalents per liter',
        'meq per l',
        'milliequivalent per liter'
      ],
      printSymbol: 'meq/L'),
  DefinedUnit(
      code: 'meq/d',
      codeUC: 'MEQ/D',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'meq/dy',
        'meq per day',
        'milliquivalents per days',
        'meq/24hrs',
        'meq/24 hrs',
        'meq per 24 hrs',
        'milliequivalents per 24 hours',
        'milliequivalent per day'
      ],
      printSymbol: 'meq/d'),
  DefinedUnit(
      code: 'meq/dL',
      codeUC: 'MEQ/DL',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'meq per dL',
        'milliequivalents per deciliter',
        'milliequivalent per deciliter'
      ],
      printSymbol: 'meq/dL'),
  DefinedUnit(
      code: 'meq/g',
      codeUC: 'MEQ/G',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'mgq/gm',
        'meq per gm',
        'milliequivalents per gram',
        'milliequivalent per gram'
      ],
      printSymbol: 'meq/g'),
  DefinedUnit(
      code: 'meq/h',
      codeUC: 'MEQ/HR',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'meq/hrs',
        'meq per hrs',
        'milliequivalents per hour',
        'milliequivalent per hour'
      ],
      printSymbol: 'meq/h'),
  DefinedUnit(
      code: 'meq/kg',
      codeUC: 'MEQ/KG',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'meq per kg',
        'milliequivalents per kilogram',
        'milliequivalent per kilogram'
      ],
      printSymbol: 'meq/kg'),
  DefinedUnit(
      code: 'meq/kg/h',
      codeUC: '(MEQ/KG)/HR',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'meq/(kg.h)',
        'meq/kg/hr',
        'meq per kg per hr',
        'milliequivalents per kilograms per hour',
        'milliequivalent per kilogram per hour'
      ],
      printSymbol: '(meq/kg)/h'),
  DefinedUnit(
      code: 'meq/m2',
      codeUC: 'MEQ/M2',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'meq/m^2',
        'meq/sq. m',
        'milliequivalents per square meter',
        'milliequivalent per square meter'
      ],
      printSymbol: 'meq/(m<sup>2</sup>)'),
  DefinedUnit(
      code: 'meq/mL',
      codeUC: 'MEQ/ML',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'meq per mL',
        'milliequivalents per milliliter',
        'milliequivalent per milliliter'
      ],
      printSymbol: 'meq/mL'),
  DefinedUnit(
      code: 'meq/min',
      codeUC: 'MEQ/MIN',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'meq per min',
        'milliequivalents per minute',
        'milliequivalent per minute'
      ],
      printSymbol: 'meq/min'),
  DefinedUnit(
      code: 'mg',
      codeUC: 'MG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'milligrams',
        'milligram',
      ],
      printSymbol: 'mg'),
  DefinedUnit(
      code: 'mg/(10.h)',
      codeUC: 'MG/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg/10hrs',
        'mg/10 hrs',
        'mg per 10 hrs',
        'milligrams per 10 hours',
        'milligram per 10 hour'
      ],
      printSymbol: 'mg/h'),
  DefinedUnit(
      code: 'mg/(12.h)',
      codeUC: 'MG/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg/12hrs',
        'mg/12 hrs',
        'per 12 hrs',
        'milligrams per 12 hours',
        'milligram per 12 hour'
      ],
      printSymbol: 'mg/h'),
  DefinedUnit(
      code: 'mg/(2.h)',
      codeUC: 'MG/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg/2hrs',
        'mg/2 hrs',
        'mg per 2 hrs',
        'milligrams per 2 hours',
        'milligram per 2 hour'
      ],
      printSymbol: 'mg/h'),
  DefinedUnit(
      code: 'mg/(24.h)',
      codeUC: 'MG/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg/24hrs',
        'mg/24 hrs',
        'milligrams per 24 hours',
        'mg/kg/dy',
        'mg per kg per day',
        'milligrams per kilograms per days',
        'milligram per 24 hour'
      ],
      printSymbol: 'mg/h'),
  DefinedUnit(
      code: 'mg/(6.h)',
      codeUC: 'MG/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg/6hrs',
        'mg/6 hrs',
        'mg per 6 hrs',
        'milligrams per 6 hours',
        'milligram per 6 hour'
      ],
      printSymbol: 'mg/h'),
  DefinedUnit(
      code: 'mg/(72.h)',
      codeUC: 'MG/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg/72hrs',
        'mg/72 hrs',
        'milligrams per 72 hours',
        'milligram per 72 hour'
      ],
      printSymbol: 'mg/h'),
  DefinedUnit(
      code: 'mg/(8.h)',
      codeUC: 'MG/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg/8hrs',
        'mg/8 hrs',
        'milligrams per 8 hours',
        'milligram per 8 hour'
      ],
      printSymbol: 'mg/h'),
  DefinedUnit(
      code: 'mg/L',
      codeUC: 'MG/L',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg per l',
        'milligrams per liter',
        'milligram per liter'
      ],
      printSymbol: 'mg/L'),
  DefinedUnit(
      code: 'mg/d',
      codeUC: 'MG/D',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg/24hrs',
        'mg/24 hrs',
        'milligrams per 24 hours',
        'mg/dy',
        'mg per day',
        'milligram per day'
      ],
      printSymbol: 'mg/d'),
  DefinedUnit(
      code: 'mg/dL',
      codeUC: 'MG/DL',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg per dL',
        'milligrams per deciliter',
        'milligram per deciliter'
      ],
      printSymbol: 'mg/dL'),
  DefinedUnit(
      code: 'mg/g',
      codeUC: 'MG/G',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg per gm',
        'milligrams per gram',
        'milligram per gram',
      ],
      printSymbol: 'mg/g'),
  DefinedUnit(
      code: 'mg/h',
      codeUC: 'MG/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg/hr',
        'mg per hr',
        'milligrams',
        'milligram per hour',
      ],
      printSymbol: 'mg/h'),
  DefinedUnit(
      code: 'mg/kg',
      codeUC: 'MG/KG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg per kg',
        'milligrams per kilograms',
        'milligram per kilogram'
      ],
      printSymbol: 'mg/kg'),
  DefinedUnit(
      code: 'mg/kg/(8.h)',
      codeUC: '(MG/KG)/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg/(8.h.kg)',
        'mg/kg/8hrs',
        'mg/kg/8 hrs',
        'mg per kg per 8hrs',
        'milligrams per kilograms per 8 hours',
        'milligram per kilogram per 8 hour'
      ],
      printSymbol: '(mg/kg)/h'),
  DefinedUnit(
      code: 'mg/kg/d',
      codeUC: '(MG/KG)/D',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg/(kg.d)',
        'mg/(kg.24.h)mg/kg/dy',
        'mg per kg per day',
        'milligrams per kilograms per days',
        'mg/kg/(24.h)',
        'mg/kg/24hrs',
        'milligram per kilogram per day'
      ],
      printSymbol: '(mg/kg)/d'),
  DefinedUnit(
      code: 'mg/kg/h',
      codeUC: '(MG/KG)/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg/(kg.h)',
        'mg/kg/hr',
        'mg per kg per hr',
        'milligrams per kilograms per hour',
        'milligram per kilogram per hour'
      ],
      printSymbol: '(mg/kg)/h'),
  DefinedUnit(
      code: 'mg/kg/min',
      codeUC: '(MG/KG)/MIN',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg/(kg.min)',
        'mg per kg per min',
        'milligrams per kilograms per minute',
        'milligram per kilogram per minute'
      ],
      printSymbol: '(mg/kg)/min'),
  DefinedUnit(
      code: 'mg/m2',
      codeUC: 'MG/M2',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg/m^2',
        'mg/sq. m',
        'mg per m2',
        'mg per m^2',
        'mg per sq. milligrams',
        'milligram per square meter'
      ],
      printSymbol: 'mg/(m<sup>2</sup>)'),
  DefinedUnit(
      code: 'mg/m3',
      codeUC: 'MG/M3',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg/m^3',
        'mg/cu. m',
        'mg per m3',
        'milligrams per cubic meter',
        'milligram per cubic meter'
      ],
      printSymbol: 'mg/(m<sup>3</sup>)'),
  DefinedUnit(
      code: 'mg/mL',
      codeUC: 'MG/ML',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg per mL',
        'milligrams per milliliters',
        'milligram per milliliter'
      ],
      printSymbol: 'mg/mL'),
  DefinedUnit(
      code: 'mg/mg',
      codeUC: 'MG/MG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg per mg',
        'milligram/milligram',
        'milligram per milligram'
      ],
      printSymbol: 'mg/mg'),
  DefinedUnit(
      code: 'mg/min',
      codeUC: 'MG/MIN',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg per min',
        'milligrams per minutes',
        'milligram/minute',
        'milligram per minute'
      ],
      printSymbol: 'mg/min'),
  DefinedUnit(
      code: 'mg/mmol',
      codeUC: 'MG/MMOL',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg per mmol',
        'milligrams per millimole',
        'milligram per millimole'
      ],
      printSymbol: 'mg/mmol'),
  DefinedUnit(
      code: 'mg/wk',
      codeUC: 'MG/WK',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mg/week',
        'mg per wk',
        'milligrams per weeks',
        'milligram/week',
        'milligram per week'
      ],
      printSymbol: 'mg/wk'),
  DefinedUnit(
      code: 'mho',
      codeUC: 'MHO',
      value: Value(
          unit: 'S',
          unitUC: 'S',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'electric conductance',
      isMetric: true,
      isSpecial: false,
      class_: 'misc',
      names: <String>[
        'siemens',
        'ohm reciprocals',
        'Ω^−1',
        'Ω-1',
        'mho',
      ],
      printSymbol: 'mho'),
  DefinedUnit(
      code: 'min',
      codeUC: 'MIN',
      value: Value(
          unit: 's',
          unitUC: 'S',
          value: UcumDecimal.fromString('60'),
          text: '60'),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'minutes',
        'minute',
      ],
      printSymbol: 'min'),
  DefinedUnit(
      code: 'mm',
      codeUC: 'MM',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'millimeters',
        'millimetres',
        'height',
        'length',
        'diameter',
        'thickness',
        'axis',
        'curvature',
        'size',
        'millimeter'
      ],
      printSymbol: 'mm'),
  DefinedUnit(
      code: 'mm/h',
      codeUC: 'MM/HR',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mm/hr',
        'mm per hr',
        'millimeters per hour',
        'millimeter per hour'
      ],
      printSymbol: 'mm/h'),
  DefinedUnit(
      code: 'mm/min',
      codeUC: 'MM/MIN',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mm per min',
        'millimeters per minute',
        'millimeter per minute'
      ],
      printSymbol: 'mm/min'),
  DefinedUnit(
      code: 'mm2',
      codeUC: 'MM2',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mm^2',
        'sq. mm.',
        'sq. millimeters',
        'millimeters squared',
        'square millimeter'
      ],
      printSymbol: 'mm<sup>2</sup>'),
  DefinedUnit(
      code: 'mm[H2O]',
      codeUC: 'MM[H2O]',
      value: Value(
          unit: 'kPa',
          unitUC: 'KPAL',
          value: UcumDecimal.fromString('9.80665'),
          text: '980665e-5'),
      property: 'pressure',
      isMetric: true,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'mmH2O',
        'mm H2O',
        'millimeters of water',
        'millimeter of water'
      ],
      printSymbol: 'mm HO<sub><r>2</r></sub>'),
  DefinedUnit(
      code: 'mm[Hg]',
      codeUC: 'MM[HG]',
      value: Value(
          unit: 'kPa',
          unitUC: 'KPAL',
          value: UcumDecimal.fromString('133.3220'),
          text: '133.3220'),
      property: 'pressure',
      isMetric: true,
      isSpecial: false,
      class_: 'clinical',
      names: <String>[
        'mmHg',
        'mm Hg',
        'millimeters of mercury',
        'millimeter of mercury'
      ],
      printSymbol: 'mm Hg'),
  DefinedUnit(
      code: 'mmol',
      codeUC: 'MMOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'millimoles',
        'millimole',
      ],
      printSymbol: 'mmol'),
  DefinedUnit(
      code: 'mmol/(12.h)',
      codeUC: 'MMOL/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol/12hrs',
        'mmol/12 hrs',
        'mmol per 12 hrs',
        'millimoles per 12 hours',
        'millimole per 12 hour'
      ],
      printSymbol: 'mmol/h'),
  DefinedUnit(
      code: 'mmol/(2.h)',
      codeUC: 'MMOL/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol/2hrs',
        'mmol/2 hrs',
        'mmol per 2 hrs',
        'millimoles per 2 hours',
        'millimole per 2 hour'
      ],
      printSymbol: 'mmol/h'),
  DefinedUnit(
      code: 'mmol/(24.h)',
      codeUC: 'MMOL/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol/24hrs',
        'mmol/24 hrs',
        'mmol per 24 hrs',
        'millimoles per 24 hours',
        'millimole per 24 hour'
      ],
      printSymbol: 'mmol/h'),
  DefinedUnit(
      code: 'mmol/(5.h)',
      codeUC: 'MMOL/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol/5hrs',
        'mmol/5 hrs',
        'mmol per 5 hrs',
        'millimoles per 5 hours',
        'millimole per 5 hour'
      ],
      printSymbol: 'mmol/h'),
  DefinedUnit(
      code: 'mmol/(6.h)',
      codeUC: 'MMOL/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol/6hrs',
        'mmol/6 hrs',
        'mmol per 6 hrs',
        'millimoles per 6 hours',
        'millimole per 6 hour'
      ],
      printSymbol: 'mmol/h'),
  DefinedUnit(
      code: 'mmol/(8.h)',
      codeUC: 'MMOL/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol/8hrs',
        'mmol/8 hrs',
        'mmol per 8 hrs',
        'millimoles per 8 hours',
        'millimole per 8 hour'
      ],
      printSymbol: 'mmol/h'),
  DefinedUnit(
      code: 'mmol/L',
      codeUC: 'MMOL/L',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol per L',
        'millimoles per liter',
        'millimole per liter'
      ],
      printSymbol: 'mmol/L'),
  DefinedUnit(
      code: 'mmol/d',
      codeUC: 'MMOL/D',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol/24hrs',
        'mmol/24 hrs',
        'mmol per 24 hrs',
        'millimoles per 24 hours',
        'millimole per day'
      ],
      printSymbol: 'mmol/d'),
  DefinedUnit(
      code: 'mmol/dL',
      codeUC: 'MMOL/DL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol per dL',
        'millimoles per deciliter',
        'millimole per deciliter'
      ],
      printSymbol: 'mmol/dL'),
  DefinedUnit(
      code: 'mmol/g',
      codeUC: 'MMOL/G',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol per gram',
        'millimole per gram',
      ],
      printSymbol: 'mmol/g'),
  DefinedUnit(
      code: 'mmol/h',
      codeUC: 'MMOL/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol/hr',
        'mmol per hr',
        'millimoles per hour',
        'millimole per hour'
      ],
      printSymbol: 'mmol/h'),
  DefinedUnit(
      code: 'mmol/kg',
      codeUC: 'MMOL/KG',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol per kg',
        'millimoles per kilogram',
        'millimole per kilogram'
      ],
      printSymbol: 'mmol/kg'),
  DefinedUnit(
      code: 'mmol/kg/(8.h)',
      codeUC: '(MMOL/KG)/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol/(8.h.kg)',
        'mmol/kg/8hrs',
        'mmol/kg/8 hrs',
        'mmol per kg per 8hrs',
        'millimoles per kilograms per 8 hours',
        'millimole per kilogram per 8 hour'
      ],
      printSymbol: '(mmol/kg)/h'),
  DefinedUnit(
      code: 'mmol/kg/d',
      codeUC: '(MMOL/KG)/D',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol/kg/dy',
        'mmol/kg/day',
        'mmol per kg per dy',
        'millimoles per kilograms per day',
        'millimole per kilogram per day'
      ],
      printSymbol: '(mmol/kg)/d'),
  DefinedUnit(
      code: 'mmol/kg/h',
      codeUC: '(MMOL/KG)/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol/kg/hr',
        'mmol per kg per hr',
        'millimoles per kilograms per hour',
        'millimole per kilogram per hour'
      ],
      printSymbol: '(mmol/kg)/h'),
  DefinedUnit(
      code: 'mmol/kg/min',
      codeUC: '(MMOL/KG)/MIN',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol/(kg.min)',
        'mmol/kg/min',
        'mmol per kg per min',
        'millimoles per kilograms per minute',
        'millimole per kilogram per minute'
      ],
      printSymbol: '(mmol/kg)/min'),
  DefinedUnit(
      code: 'mmol/m2',
      codeUC: 'MMOL/M2',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol/m^2',
        'mmol/sq. meter',
        'mmol per m2',
        'millimole per square meter'
      ],
      printSymbol: 'mmol/(m<sup>2</sup>)'),
  DefinedUnit(
      code: 'mmol/min',
      codeUC: 'MMOL/MIN',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol per min',
        'millimoles per minute',
        'millimole per minute',
      ],
      printSymbol: 'mmol/min'),
  DefinedUnit(
      code: 'mmol/mmol',
      codeUC: 'MMOL/MMOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol per mmol',
        'millimoles per millimole',
        'millimole per millimole'
      ],
      printSymbol: 'mmol/mmol'),
  DefinedUnit(
      code: 'mmol/mol',
      codeUC: 'MMOL/MOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol per mol',
        'millimoles per mole',
        'millimole per mole',
      ],
      printSymbol: 'mmol/mol'),
  DefinedUnit(
      code: 'mmol/s/L',
      codeUC: '(MMOL/S)/L',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mmol/sec/L',
        'mmol per s per L',
        'millimoles per seconds per liter',
        'millimole per second per liter'
      ],
      printSymbol: '(mmol/s)/L'),
  DefinedUnit(
      code: 'mo',
      codeUC: 'MO',
      value: Value(
          unit: 'mo_j',
          unitUC: 'MO_J',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'months',
        'duration',
        'month',
      ],
      printSymbol: 'mo'),
  DefinedUnit(
      code: 'mo_g',
      codeUC: 'MO_G',
      value: Value(
          unit: 'a_g/12',
          unitUC: 'ANN_G/12',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'month-gregorian',
        'mo-gregorian',
        'mean Gregorian month',
      ],
      printSymbol: 'mo<sub>g</sub>'),
  DefinedUnit(
      code: 'mo_j',
      codeUC: 'MO_J',
      value: Value(
          unit: 'a_j/12',
          unitUC: 'ANN_J/12',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'mo-julian',
        'mo Julian',
        'mean Julian month',
      ],
      printSymbol: 'mo<sub>j</sub>'),
  DefinedUnit(
      code: 'mo_s',
      codeUC: 'MO_S',
      value: Value(
          unit: 'd',
          unitUC: 'D',
          value: UcumDecimal.fromString('29.53059'),
          text: '29.53059'),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'Moon',
        'synodic month',
        'lunar month',
        'mo-s',
        'mo s',
        'moons',
        'synodal month'
      ],
      printSymbol: 'mo<sub>s</sub>'),
  DefinedUnit(
      code: 'mol',
      codeUC: 'MOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'moles',
        'mole',
      ],
      printSymbol: 'mol'),
  DefinedUnit(
      code: 'mol/L',
      codeUC: 'MOL/L',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mol per L',
        'moles per liter',
        'mole per liter',
      ],
      printSymbol: 'mol/L'),
  DefinedUnit(
      code: 'mol/kg',
      codeUC: 'MOL/KG',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mol per kg',
        'mole per kilogram',
      ],
      printSymbol: 'mol/kg'),
  DefinedUnit(
      code: 'mol/kg/s',
      codeUC: '(MOL/KG)/S',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mol/kg/sec',
        'mol per kg per sec',
        'moles per kilograms per second',
        'mole per kilogram per second'
      ],
      printSymbol: '(mol/kg)/s'),
  DefinedUnit(
      code: 'mol/m3',
      codeUC: 'MOL/M3',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mol/m^3',
        'mol/cu. m',
        'mol per m3',
        'mole per kiloliter',
        'mole per cubic meter'
      ],
      printSymbol: 'mol/(m<sup>3</sup>)'),
  DefinedUnit(
      code: 'mol/mL',
      codeUC: 'MOL/ML',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mol per mL',
        'mole per milliliter',
      ],
      printSymbol: 'mol/mL'),
  DefinedUnit(
      code: 'mol/mol',
      codeUC: 'MOL/MOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mol per mol',
        'moles per mol',
        'mole per mole',
      ],
      printSymbol: 'mol/mol'),
  DefinedUnit(
      code: 'mol/s',
      codeUC: 'MOL/S',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'mol per sec',
        'moles per second',
        'mole per second',
      ],
      printSymbol: 'mol/s'),
  DefinedUnit(
      code: 'mosm',
      codeUC: 'MOSM',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance (dissolved particles)',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'milliosmoles',
        'milliosmole',
      ],
      printSymbol: 'mosm'),
  DefinedUnit(
      code: 'mosm/L',
      codeUC: 'MOSM/L',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance (dissolved particles)',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'mosm per liter',
        'milliosmole per liter',
      ],
      printSymbol: 'mosm/L'),
  DefinedUnit(
      code: 'mosm/kg',
      codeUC: 'MOSM/KG',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance (dissolved particles)',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'mosm per kg',
        'milliosmoles per kilogram',
        'milliosmole per kilogram'
      ],
      printSymbol: 'mosm/kg'),
  DefinedUnit(
      code: 'ms',
      codeUC: 'MS',
      value: Value(),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ms',
        'millisecond',
        'milliseconds',
      ],
      printSymbol: 'ms'),
  DefinedUnit(
      code: 'nL',
      codeUC: 'NL',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'nanoliters',
        'nanolitres',
        'nanoliter',
      ],
      printSymbol: 'nL'),
  DefinedUnit(
      code: 'nU/mL',
      codeUC: 'NU/ML',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'nU per mL',
        'nanoenzyme units per milliliter',
        'millilitre',
        'enzymatic activity per volume',
        'nanoenzyme unit per milliliter'
      ],
      printSymbol: 'nU/mL'),
  DefinedUnit(
      code: 'ng',
      codeUC: 'NG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'nanograms',
        'nanogram',
      ],
      printSymbol: 'ng'),
  DefinedUnit(
      code: 'ng/(24.h)',
      codeUC: 'NG/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng/24hrs',
        'ng/24 hrs',
        'nanograms per 24 hours',
        'nanogram per 24 hour'
      ],
      printSymbol: 'ng/h'),
  DefinedUnit(
      code: 'ng/(8.h)',
      codeUC: 'NG/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng/8hrs',
        'ng/8 hrs',
        'nanograms per 8 hours',
        'nanogram per 8 hour'
      ],
      printSymbol: 'ng/h'),
  DefinedUnit(
      code: 'ng/10*6',
      codeUC: 'NG/(10*6)',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng/10^6',
        'ng per 10*6',
        'nanogram per million',
      ],
      printSymbol: 'ng/(10<sup>6</sup>)'),
  DefinedUnit(
      code: 'ng/L',
      codeUC: 'NG/L',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng per L',
        'nanograms per liter',
        'nanogram per liter',
      ],
      printSymbol: 'ng/L'),
  DefinedUnit(
      code: 'ng/U',
      codeUC: 'NG/U',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng per U',
        'nanograms per enzyme unit',
        'nanogram per enzyme unit'
      ],
      printSymbol: 'ng/U'),
  DefinedUnit(
      code: 'ng/d',
      codeUC: 'NG/D',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng/dy',
        'ng per day',
        'nanograms',
        'nanogram per day',
      ],
      printSymbol: 'ng/d'),
  DefinedUnit(
      code: 'ng/dL',
      codeUC: 'NG/DL',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng per dL',
        'nanograms per deciliter',
        'nanogram per deciliter',
      ],
      printSymbol: 'ng/dL'),
  DefinedUnit(
      code: 'ng/g',
      codeUC: 'NG/G',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng/gm',
        'ng per gm',
        'nanograms per gram',
        'nanogram per gram',
      ],
      printSymbol: 'ng/g'),
  DefinedUnit(
      code: 'ng/h',
      codeUC: 'NG/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng/hr',
        'ng per hr',
        'nanograms per hour',
        'nanogram per hour',
      ],
      printSymbol: 'ng/h'),
  DefinedUnit(
      code: 'ng/kg',
      codeUC: 'NG/KG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng per kg',
        'nanograms per kilogram',
        'nanogram per kilogram',
      ],
      printSymbol: 'ng/kg'),
  DefinedUnit(
      code: 'ng/kg/(8.h)',
      codeUC: '(NG/KG)/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng/(8.h.kg)',
        'ng/kg/8hrs',
        'ng/kg/8 hrs',
        'ng per kg per 8hrs',
        'nanograms per kilograms per 8 hours',
        'nanogram per kilogram per 8 hour'
      ],
      printSymbol: '(ng/kg)/h'),
  DefinedUnit(
      code: 'ng/kg/h',
      codeUC: '(NG/KG)/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng/(kg.h)',
        'ng/kg/hr',
        'ng per kg per hr',
        'nanograms per kilograms per hour',
        'nanogram per kilogram per hour'
      ],
      printSymbol: '(ng/kg)/h'),
  DefinedUnit(
      code: 'ng/kg/min',
      codeUC: '(NG/KG)/MIN',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng/(kg.min)',
        'ng per kg per min',
        'nanograms per kilograms per minute',
        'nanogram per kilogram per minute'
      ],
      printSymbol: '(ng/kg)/min'),
  DefinedUnit(
      code: 'ng/m2',
      codeUC: 'NG/M2',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng/m^2',
        'ng/sq. m',
        'ng per m2',
        'nanogram per square meter',
      ],
      printSymbol: 'ng/(m<sup>2</sup>)'),
  DefinedUnit(
      code: 'ng/mL',
      codeUC: 'NG/ML',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng per mL',
        'nanograms/millilitre',
        'nanogram per millliiter',
      ],
      printSymbol: 'ng/mL'),
  DefinedUnit(
      code: 'ng/mL/h',
      codeUC: '(NG/ML)/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng/mL/hr',
        'ng per mL per mL',
        'nanograms per milliliter per hour',
        'nanogram per millilitre per hour',
        'nanograms per millilitre per hour',
        'enzymatic activity per volume',
        'enzyme activity per milliliters',
        'nanogram per milliliter per hour'
      ],
      printSymbol: '(ng/mL)/h'),
  DefinedUnit(
      code: 'ng/mg',
      codeUC: 'NG/MG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng per mg',
        'nanogram per milligram',
      ],
      printSymbol: 'ng/mg'),
  DefinedUnit(
      code: 'ng/mg/h',
      codeUC: '(NG/MG)/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng/mg/hr',
        'ng per mg per hr',
        'nanograms per milligrams per hour',
        'nanogram per milligram per hour'
      ],
      printSymbol: '(ng/mg)/h'),
  DefinedUnit(
      code: 'ng/min',
      codeUC: 'NG/MIN',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng per min',
        'nanograms',
        'nanogram per minute',
      ],
      printSymbol: 'ng/min'),
  DefinedUnit(
      code: 'ng/s',
      codeUC: 'NG/S',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ng/sec',
        'ng per sec',
        'nanograms per second',
        'nanogram per second'
      ],
      printSymbol: 'ng/s'),
  DefinedUnit(
      code: 'nkat',
      codeUC: 'NKAT',
      value: Value(
          unit: 'mol/s',
          unitUC: 'MOL/S',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'nanokatals',
        'nanokatal',
      ],
      printSymbol: 'nkat'),
  DefinedUnit(
      code: 'nm',
      codeUC: 'NM',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'nanometers',
        'nanometres',
        'nanometer',
      ],
      printSymbol: 'nm'),
  DefinedUnit(
      code: 'nm/s/L',
      codeUC: '(NM/S)/L',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'nm/sec/liter',
        'nm/sec/litre',
        'nm per s per l',
        'nm per sec per l',
        'nanometers per second per liter',
        'nanometre per second per litre',
        'nanometres per second per litre',
        'nanometer per second per liter'
      ],
      printSymbol: '(nm/s)/L'),
  DefinedUnit(
      code: 'nmol',
      codeUC: 'NMOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nanomoles',
        'nanomole',
      ],
      printSymbol: 'nmol'),
  DefinedUnit(
      code: 'nmol/(24.h)',
      codeUC: 'NMOL/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol/24hr',
        'nmol/24 hr',
        'nanomoles per 24 hours',
        'nmol/day',
        'nanomoles per day',
        'nmol per day',
        'nanomole/day',
        'nanomol/day',
        'nanomole per 24 hour'
      ],
      printSymbol: 'nmol/h'),
  DefinedUnit(
      code: 'nmol/L',
      codeUC: 'NMOL/L',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol per L',
        'nanomoles per liter',
        'nanomole per liter',
      ],
      printSymbol: 'nmol/L'),
  DefinedUnit(
      code: 'nmol/d',
      codeUC: 'NMOL/D',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol/day',
        'nanomoles per day',
        'nmol per day',
        'nanomole/day',
        'nanomol/day',
        'nmol/24hr',
        'nmol/24 hr',
        'nanomoles per 24 hours',
        'nanomole per day'
      ],
      printSymbol: 'nmol/d'),
  DefinedUnit(
      code: 'nmol/dL',
      codeUC: 'NMOL/DL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol per dL',
        'nanomoles per deciliter',
        'nanomole per decilitre',
        'nanomoles per decilitre',
        'nanomole/deciliter',
        'nanomole/decilitre',
        'nanomol/deciliter',
        'nanomol/decilitre',
        'nanomole per deciliter'
      ],
      printSymbol: 'nmol/dL'),
  DefinedUnit(
      code: 'nmol/g',
      codeUC: 'NMOL/G',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol per gram',
        'nanomoles per gram',
        'nanomole/gram',
        'nanomole per gram'
      ],
      printSymbol: 'nmol/g'),
  DefinedUnit(
      code: 'nmol/h/L',
      codeUC: '(NMOL/HR)/L',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol/hrs/L',
        'nmol per hrs per L',
        'nanomoles per hours per liter',
        'enzymatic activity per volume',
        'enzyme activities',
        'nanomole per hour per liter'
      ],
      printSymbol: '(nmol/h)/L'),
  DefinedUnit(
      code: 'nmol/mL',
      codeUC: 'NMOL/ML',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol per mL',
        'nanomoles per milliliter',
        'nanomole per milliliter'
      ],
      printSymbol: 'nmol/mL'),
  DefinedUnit(
      code: 'nmol/mL/h',
      codeUC: '(NMOL/ML)/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol/mL/hr',
        'nmol per mL per hr',
        'nanomoles per milliliters per hour',
        'milli enzyme units per volume',
        'nanomole per milliliter per hour'
      ],
      printSymbol: '(nmol/mL)/h'),
  DefinedUnit(
      code: 'nmol/mL/min',
      codeUC: '(NMOL/ML)/MIN',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol per mL per min',
        'nanomoles per milliliters per min',
        'milli enzyme units per volume',
        'nanomole per milliliter per minute'
      ],
      printSymbol: '(nmol/mL)/min'),
  DefinedUnit(
      code: 'nmol/mg',
      codeUC: 'NMOL/MG',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol per mg',
        'nanomoles per milligram',
        'nanomole per milligram'
      ],
      printSymbol: 'nmol/mg'),
  DefinedUnit(
      code: 'nmol/mg/h',
      codeUC: '(NMOL/MG)/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol/mg/hr',
        'nmol per mg per hr',
        'nanomoles per milligrams per hour',
        'nanomole per milligram per hour'
      ],
      printSymbol: '(nmol/mg)/h'),
  DefinedUnit(
      code: 'nmol/mgDefinedUnit(prot)',
      codeUC: 'NMOL/MG',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nanomoles',
        'nmol/mg prot',
        'nmol per mg prot',
        'nanomole per milligram of protein'
      ],
      printSymbol: 'nmol/mg'),
  DefinedUnit(
      code: 'nmol/min',
      codeUC: 'NMOL/MIN',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol per min',
        'nanomoles per minute',
        'milli enzyme units',
        'enzyme activity per volume',
        'nanomole per minute'
      ],
      printSymbol: 'nmol/min'),
  DefinedUnit(
      code: 'nmol/min/mL',
      codeUC: '(NMOL/MIN)/ML',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol per min per mL',
        'nanomoles per minutes per milliliter',
        'milli enzyme units per volume',
        'nanomole per minute per milliliter'
      ],
      printSymbol: '(nmol/min)/mL'),
  DefinedUnit(
      code: 'nmol/mmol',
      codeUC: 'NMOL/MMOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol per mmol',
        'nanomoles per millimole',
        'nanomole per millimole'
      ],
      printSymbol: 'nmol/mmol'),
  DefinedUnit(
      code: 'nmol/mmolDefinedUnit(creat)',
      codeUC: 'NMOL/MMOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nanomoles',
        'nanomole per millimole of creatinine',
      ],
      printSymbol: 'nmol/mmol'),
  DefinedUnit(
      code: 'nmol/mol',
      codeUC: 'NMOL/MOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol per mole',
        'nanomoles',
        'nanomole per mole',
      ],
      printSymbol: 'nmol/mol'),
  DefinedUnit(
      code: 'nmol/nmol',
      codeUC: 'NMOL/NMOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol per nmol',
        'nanomole per nanomole',
      ],
      printSymbol: 'nmol/nmol'),
  DefinedUnit(
      code: 'nmol/s',
      codeUC: 'NMOL/S',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol/sec',
        'nmol per sec',
        'nanomoles per sercond',
        'milli enzyme units',
        'nanomole per second'
      ],
      printSymbol: 'nmol/s'),
  DefinedUnit(
      code: 'nmol/s/L',
      codeUC: '(NMOL/S)/L',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'nmol/sec/L',
        'nmol per s per L',
        'nmol per sec per L',
        'nanomoles per seconds per liter',
        'milli enzyme units per volume',
        'nanomole per second per liter'
      ],
      printSymbol: '(nmol/s)/L'),
  DefinedUnit(
      code: 'ns',
      codeUC: 'NS',
      value: Value(),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'nanoseconds',
        'nanosecond',
      ],
      printSymbol: 'ns'),
  DefinedUnit(
      code: 'osm',
      codeUC: 'OSM',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance (dissolved particles)',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'osmoles',
        'osmols',
        'osmole',
      ],
      printSymbol: 'osm'),
  DefinedUnit(
      code: 'osm/L',
      codeUC: 'OSM/L',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance (dissolved particles)',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'osm per L',
        'osmoles per liter',
        'osmole per liter',
      ],
      printSymbol: 'osm/L'),
  DefinedUnit(
      code: 'osm/kg',
      codeUC: 'OSM/KG',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance (dissolved particles)',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'osm per kg',
        'osmoles per kilogram',
        'osmole per kilogram',
      ],
      printSymbol: 'osm/kg'),
  DefinedUnit(
      code: 'pA',
      codeUC: 'PA',
      value: Value(
          unit: 'C/s',
          unitUC: 'C/S',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'electric current',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'picoamperes',
        'picoampere',
      ],
      printSymbol: 'pA'),
  DefinedUnit(
      code: 'pL',
      codeUC: 'PL',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'picoliters',
        'picolitres',
        'picoliter',
      ],
      printSymbol: 'pL'),
  DefinedUnit(
      code: 'pT',
      codeUC: 'PT',
      value: Value(
          unit: 'Wb/m2',
          unitUC: 'WB/M2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'magnetic flux density',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'picoteslas',
        'picotesla',
      ],
      printSymbol: 'pT'),
  DefinedUnit(
      code: 'pc',
      codeUC: 'PRS',
      value: Value(
          unit: 'm',
          unitUC: 'M',
          value: UcumDecimal.fromString('30856780000000000'),
          text: '3.085678e16'),
      property: 'length',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'parsecs',
        'parsec',
      ],
      printSymbol: 'pc'),
  DefinedUnit(
      code: 'pg',
      codeUC: 'PG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'picograms',
        'picogram',
      ],
      printSymbol: 'pg'),
  DefinedUnit(
      code: 'pg/L',
      codeUC: 'PG/L',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'pg per L',
        'picograms/litre',
        'picogram per liter',
      ],
      printSymbol: 'pg/L'),
  DefinedUnit(
      code: 'pg/dL',
      codeUC: 'PG/DL',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'pg per dL',
        'picograms/decilitre',
        'picogram per deciliter',
      ],
      printSymbol: 'pg/dL'),
  DefinedUnit(
      code: 'pg/mL',
      codeUC: 'PG/ML',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'pg per mL',
        'picograms per milliliter',
        'picogram per milliliter'
      ],
      printSymbol: 'pg/mL'),
  DefinedUnit(
      code: 'pg/mg',
      codeUC: 'PG/MG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'pg per mg',
        'picograms',
        'picogram per milligram',
      ],
      printSymbol: 'pg/mg'),
  DefinedUnit(
      code: 'pg/mm',
      codeUC: 'PG/MM',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'pg per mm',
        'picogram/millimeter',
        'picogram/millimetre',
        'picograms per millimeter',
        'picogram per millimeter'
      ],
      printSymbol: 'pg/mm'),
  DefinedUnit(
      code: 'ph',
      codeUC: 'PHT',
      value: Value(
          unit: 'lx',
          unitUC: 'LX',
          value: UcumDecimal.fromString('0.0001'),
          text: '1e-4'),
      property: 'illuminance',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'phots',
        'phot',
      ],
      printSymbol: 'ph'),
  DefinedUnit(
      code: 'pkat',
      codeUC: 'PKAT',
      value: Value(
          unit: 'mol/s',
          unitUC: 'MOL/S',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'pkats',
        'picokatals',
        'picokatal',
      ],
      printSymbol: 'pkat'),
  DefinedUnit(
      code: 'pm',
      codeUC: 'PM',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'picometers',
        'picometres',
        'picometer',
      ],
      printSymbol: 'pm'),
  DefinedUnit(
      code: 'pmol',
      codeUC: 'PMOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'picomoles',
        'pmols',
        'picomole',
      ],
      printSymbol: 'pmol'),
  DefinedUnit(
      code: 'pmol/(24.h)',
      codeUC: 'PMOL/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'pmol/24hrs',
        'pmol/24 hrs',
        'pmol per 24 hrs',
        'picomoles per 24 hours',
        'picomole per 24 hour'
      ],
      printSymbol: 'pmol/h'),
  DefinedUnit(
      code: 'pmol/L',
      codeUC: 'PMOL/L',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'picomole/liter',
        'pmol per L',
        'picomoles',
        'litre',
        'picomole per liter'
      ],
      printSymbol: 'pmol/L'),
  DefinedUnit(
      code: 'pmol/d',
      codeUC: 'PMOL/D',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'pmol/dy',
        'pmol per day',
        'picomole per day',
      ],
      printSymbol: 'pmol/d'),
  DefinedUnit(
      code: 'pmol/dL',
      codeUC: 'PMOL/DL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'pmol per dL',
        'picomoles per deciliter',
        'picomole per deciliter'
      ],
      printSymbol: 'pmol/dL'),
  DefinedUnit(
      code: 'pmol/g',
      codeUC: 'PMOL/G',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'pmol per gm',
        'picomoles per gram',
        'picomole/gram',
        'picomole per gram'
      ],
      printSymbol: 'pmol/g'),
  DefinedUnit(
      code: 'pmol/h/mL',
      codeUC: '(PMOL/HR)/ML',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'pmol/hrs/mL',
        'pmol per hrs per mL',
        'picomoles per hour per milliliter',
        'micro enzyme units per volume',
        'picomole per hour per milliliter '
      ],
      printSymbol: '(pmol/h)/mL'),
  DefinedUnit(
      code: 'pmol/mL',
      codeUC: 'PMOL/ML',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'picomole/milliliter',
        'picomole/millilitre',
        'pmol per mL',
        'picomole per milliliter'
      ],
      printSymbol: 'pmol/mL'),
  DefinedUnit(
      code: 'pmol/min',
      codeUC: 'PMOL/MIN',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'picomole/minute',
        'pmol per min',
        'picomoles per minute',
        'micro enzyme units',
        'picomole per minute'
      ],
      printSymbol: 'pmol/min'),
  DefinedUnit(
      code: 'pmol/umol',
      codeUC: 'PMOL/UMOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'pmol/mcgmol',
        'picomole/micromole',
        'pmol per umol',
        'pmol per mcgmol',
        'picomole per micromole'
      ],
      printSymbol: 'pmol/μmol'),
  DefinedUnit(
      code: 'ps',
      codeUC: 'PS',
      value: Value(),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'picoseconds',
        'psec',
        'picosecond',
      ],
      printSymbol: 'ps'),
  DefinedUnit(
      code: 'sb',
      codeUC: 'SB',
      value: Value(
          unit: 'cd/cm2',
          unitUC: 'CD/CM2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'lum. intensity density',
      isMetric: true,
      isSpecial: false,
      class_: 'cgs',
      names: <String>[
        'stilbs',
        'stilb',
      ],
      printSymbol: 'sb'),
  DefinedUnit(
      code: 'sph',
      codeUC: 'SPH',
      value: Value(
          unit: '[pi].sr',
          unitUC: '[PI].SR',
          value: UcumDecimal.fromString('4'),
          text: '4'),
      property: 'solid angle',
      isMetric: false,
      isSpecial: false,
      class_: 'misc',
      names: <String>[
        'speres',
        'spere - solid angle',
      ],
      printSymbol: 'sph'),
  DefinedUnit(
      code: 'sr',
      codeUC: 'SR',
      value: Value(
          unit: 'rad2',
          unitUC: 'RAD2',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'solid angle',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'square radian',
        'rad2',
        'rad^2',
        'steradian - solid angle',
      ],
      printSymbol: 'sr'),
  DefinedUnit(
      code: 'st',
      codeUC: 'STR',
      value: Value(
          unit: 'm3',
          unitUC: 'M3',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'misc',
      names: <String>[
        'stère',
        'm3',
        'cubic meter',
        'm^3',
        'meters cubed',
        'stere',
      ],
      printSymbol: 'st'),
  DefinedUnit(
      code: 't',
      codeUC: 'TNE',
      value: Value(
          unit: 'kg',
          unitUC: 'KG',
          value: UcumDecimal.fromString('1000'),
          text: '1e3'),
      property: 'mass',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'tonnes',
        'megagrams',
        'tons',
        'metric ton',
      ],
      printSymbol: 't'),
  DefinedUnit(
      code: 'tex',
      codeUC: 'TEX',
      value: Value(
          unit: 'g/km',
          unitUC: 'G/KM',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'linear mass density (of textile thread)',
      isMetric: true,
      isSpecial: false,
      class_: 'heat',
      names: <String>[
        'linear mass density',
        'texes',
        'tex',
      ],
      printSymbol: 'tex'),
  DefinedUnit(
      code: 'u',
      codeUC: 'AMU',
      value: Value(
          unit: 'g',
          unitUC: 'G',
          value: UcumDecimal.fromString('0.0000000000000000000000016605402'),
          text: '1.6605402e-24'),
      property: 'mass',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'unified atomic mass units',
        'amu',
        'Dalton',
        'Da',
        'unified atomic mass unit'
      ],
      printSymbol: 'u'),
  DefinedUnit(
      code: 'uL',
      codeUC: 'UL',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'microliters',
        'microlitres',
        'mcl',
        'microliter',
      ],
      printSymbol: 'μL'),
  DefinedUnit(
      code: 'uL/(2.h)',
      codeUC: 'UL/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'uL/2hrs',
        'uL/2 hrs',
        'mcg/2hr',
        'mcg per 2hr',
        'uL per 2hr',
        'uL per 2 hrs',
        'microliters per 2 hours',
        'microliter per 2 hour'
      ],
      printSymbol: 'μL/h'),
  DefinedUnit(
      code: 'uL/h',
      codeUC: 'UL/HR',
      value: Value(unit: 'l', value: UcumDecimal.fromString('1'), text: '1'),
      property: 'volume',
      isMetric: true,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'uL/hr',
        'mcg/hr',
        'mcg per hr',
        'uL per hr',
        'microliters per hour',
        'microliter per hour'
      ],
      printSymbol: 'μL/h'),
  DefinedUnit(
      code: 'uOhm',
      codeUC: 'UOHM',
      value: Value(
          unit: 'V/A',
          unitUC: 'V/A',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'electric resistance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'microOhms',
        'µΩ',
        'microOhm',
      ],
      printSymbol: 'μΩ'),
  DefinedUnit(
      code: 'uU/L',
      codeUC: 'UU/L',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'uU per L',
        'micro enzyme units per liter',
        'enzymatic activity per volume',
        'micro enzyme unit per liter'
      ],
      printSymbol: 'μU/L'),
  DefinedUnit(
      code: 'uU/g',
      codeUC: 'UU/G',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'uU per gm',
        'micro enzyme units per gram',
        'micro enzymatic activity per mass',
        'micro enzyme unit per gram'
      ],
      printSymbol: 'μU/g'),
  DefinedUnit(
      code: 'uU/mL',
      codeUC: 'UU/ML',
      value: Value(
          unit: 'umol/min',
          unitUC: 'UMOL/MIN',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'uU per mL',
        'micro enzyme units per milliliter',
        'enzymatic activity per volume',
        'micro enzyme unit per milliliter'
      ],
      printSymbol: 'μU/mL'),
  DefinedUnit(
      code: 'uV',
      codeUC: 'UV',
      value: Value(
          unit: 'J/C',
          unitUC: 'J/C',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'electric potential',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'microvolts',
        'microvolt',
      ],
      printSymbol: 'μV'),
  DefinedUnit(
      code: 'u[IU]',
      codeUC: 'U[IU]',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'uIU',
        'u IU',
        'microinternational units',
        'micro international unit'
      ],
      printSymbol: 'μi.U.'),
  DefinedUnit(
      code: 'u[IU]/L',
      codeUC: 'U[IU]/L',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'uIU/L',
        'u IU/L',
        'uIU per L',
        'microinternational units per liter',
        'litre',
        'micro international unit per liter'
      ],
      printSymbol: '(μi.U.)/L'),
  DefinedUnit(
      code: 'u[IU]/mL',
      codeUC: 'U[IU]/ML',
      value: Value(
          unit: '[iU]',
          unitUC: '[IU]',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'arbitrary',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'uIU/mL',
        'u IU/mL',
        'uIU per mL',
        'microinternational units per milliliter',
        'micro international unit per milliliter'
      ],
      printSymbol: '(μi.U.)/mL'),
  DefinedUnit(
      code: 'ueq',
      codeUC: 'UEQ',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'microequivalents',
        '10^-6 equivalents',
        '10-6 equivalents',
        'microequivalent'
      ],
      printSymbol: 'μeq'),
  DefinedUnit(
      code: 'ueq/L',
      codeUC: 'UEQ/L',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'ueq per liter',
        'microequivalents/litre',
        'microequivalent per liter'
      ],
      printSymbol: 'μeq/L'),
  DefinedUnit(
      code: 'ueq/mL',
      codeUC: 'UEQ/ML',
      value: Value(
          unit: 'mol',
          unitUC: 'MOL',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'ueq per milliliter',
        'microequivalents/millilitre',
        'microequivalent per milliliter'
      ],
      printSymbol: 'μeq/mL'),
  DefinedUnit(
      code: 'ug',
      codeUC: 'UG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mcg',
        'micrograms',
        '10^-6 grams',
        '10-6 grams',
        'microgram',
      ],
      printSymbol: 'μg'),
  DefinedUnit(
      code: 'ug/(100.g)',
      codeUC: 'UG/G',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug/100gm',
        'ug/100 gm',
        'ug per 100g',
        'mcg per 100g',
        'micrograms per 100 grams',
        'microgram per 100 gram'
      ],
      printSymbol: 'μg/g'),
  DefinedUnit(
      code: 'ug/(24.h)',
      codeUC: 'UG/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug/24hrs',
        'ug/24 hrs',
        'mcg/24hrs',
        'ug per 24hrs',
        'mcg per 24hrs',
        'micrograms per 24 hours',
        'microgram per 24 hour'
      ],
      printSymbol: 'μg/h'),
  DefinedUnit(
      code: 'ug/(8.h)',
      codeUC: 'UG/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug/8hrs',
        'ug/8 hrs',
        'mcg/8hrs',
        'ug per 8hrs',
        'mcg per 8hrs',
        'micrograms per 8 hours',
        'microgram per 8 hour'
      ],
      printSymbol: 'μg/h'),
  DefinedUnit(
      code: 'ug/L',
      codeUC: 'UG/L',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'mcg/L',
        'ug per L',
        'micrograms per liter',
        'microgram per liter'
      ],
      printSymbol: 'μg/L'),
  DefinedUnit(
      code: 'ug/L/(24.h)',
      codeUC: '(UG/L)/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug/L/24hrs',
        'ug/L/24 hrs',
        'mcg/L/24hrs',
        'ug per L per 24hrs',
        'dy mcg',
        'micrograms per liters per 24 hours',
        'microgram per liter per 24 hour'
      ],
      printSymbol: '(μg/L)/h'),
  DefinedUnit(
      code: 'ug/[sft_i]',
      codeUC: 'UG/[SFT_I]',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug/sft',
        'ug/ft2',
        'ug/ft^2',
        'ug/sq. ft',
        'micrograms',
        'sq. foot',
        'foot squared',
        'microgram per square foot (international)'
      ],
      printSymbol: 'μg'),
  DefinedUnit(
      code: 'ug/d',
      codeUC: 'UG/D',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug/dy',
        'mcg/dy',
        'ug per day',
        'micrograms per day',
        'microgram per day'
      ],
      printSymbol: 'μg/d'),
  DefinedUnit(
      code: 'ug/dL',
      codeUC: 'UG/DL',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug per dL',
        'mcg/dl',
        'mcg per dl',
        'micrograms per deciliter',
        'microgram per deciliter'
      ],
      printSymbol: 'μg/dL'),
  DefinedUnit(
      code: 'ug/g',
      codeUC: 'UG/G',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug per gm',
        'mcg/gm',
        'mcg per g',
        'micrograms per gram',
        'microgram per gram'
      ],
      printSymbol: 'μg/g'),
  DefinedUnit(
      code: 'ug/h',
      codeUC: 'UG/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug/hr',
        'mcg/hr',
        'mcg per hr',
        'ug per hr',
        'ug per hour',
        'micrograms',
        'microgram per hour'
      ],
      printSymbol: 'μg/h'),
  DefinedUnit(
      code: 'ug/kg',
      codeUC: 'UG/KG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug per kg',
        'mcg/kg',
        'mcg per kg',
        'micrograms per kilogram',
        'microgram per kilogram'
      ],
      printSymbol: 'μg/kg'),
  DefinedUnit(
      code: 'ug/kg/(8.h)',
      codeUC: '(UG/KG)/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug/kg/8hrs',
        'mcg/kg/8hrs',
        'ug/kg/8 hrs',
        'mcg/kg/8 hrs',
        'ug per kg per 8hrs',
        'mcg per kg per 8hrs',
        'micrograms per kilograms per 8 hours',
        'microgram per kilogram per 8 hour'
      ],
      printSymbol: '(μg/kg)/h'),
  DefinedUnit(
      code: 'ug/kg/d',
      codeUC: '(UG/KG)/D',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug/(kg.d)',
        'ug/kg/dy',
        'mcg/kg/day',
        'ug per kg per dy',
        'microgram per kilogram and day',
        'microgram per kilogram per day'
      ],
      printSymbol: '(μg/kg)/d'),
  DefinedUnit(
      code: 'ug/kg/h',
      codeUC: '(UG/KG)/HR',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug/(kg.h)',
        'ug/kg/hr',
        'mcg/kg/hr',
        'ug per kg per hr',
        'mcg per kg per hr',
        'microgram per kilogram per hour'
      ],
      printSymbol: '(μg/kg)/h'),
  DefinedUnit(
      code: 'ug/kg/min',
      codeUC: '(UG/KG)/MIN',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug/kg/min',
        'mcg/kg/min',
        'ug per kg per min',
        'micrograms per kilograms per minute',
        'microgram per kilogram per minute'
      ],
      printSymbol: '(μg/kg)/min'),
  DefinedUnit(
      code: 'ug/m2',
      codeUC: 'UG/M2',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug/m^2',
        'ug/sq. m',
        'mcg/m2',
        'mcg/m^2',
        'mcg/sq. m',
        'ug per m2',
        'micrograms per square meter',
        'microgram per square meter'
      ],
      printSymbol: 'μg/(m<sup>2</sup>)'),
  DefinedUnit(
      code: 'ug/m3',
      codeUC: 'UG/M3',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug/m^3',
        'ug/cu. m',
        'mcg/m3',
        'mcg/m^3',
        'mcg/cu. m',
        'ug per m3',
        'ug per m^3',
        'ug per cu. m',
        'micrograms per cubic meter',
        'microgram per cubic meter'
      ],
      printSymbol: 'μg/(m<sup>3</sup>)'),
  DefinedUnit(
      code: 'ug/mL',
      codeUC: 'UG/ML',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug per mL',
        'mcg/mL',
        'mcg per mL',
        'micrograms per milliliter',
        'microgram per milliliter'
      ],
      printSymbol: 'μg/mL'),
  DefinedUnit(
      code: 'ug/mg',
      codeUC: 'UG/MG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug per mg',
        'mcg/mg',
        'mcg per mg',
        'micromilligrams per milligram',
        'microgram per milligram'
      ],
      printSymbol: 'μg/mg'),
  DefinedUnit(
      code: 'ug/min',
      codeUC: 'UG/MIN',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug per min',
        'mcg/min',
        'mcg per min',
        'microminutes per minute',
        'microgram per minute'
      ],
      printSymbol: 'μg/min'),
  DefinedUnit(
      code: 'ug/mmol',
      codeUC: 'UG/MMOL',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug per mmol',
        'mcg/mmol',
        'mcg per mmol',
        'micrograms per millimole',
        'microgram per millimole'
      ],
      printSymbol: 'μg/mmol'),
  DefinedUnit(
      code: 'ug/ng',
      codeUC: 'UG/NG',
      value: Value(),
      property: 'mass',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'ug per ng',
        'mcg/ng',
        'mcg per ng',
        'micrograms per nanogram',
        'microgram per nanogram'
      ],
      printSymbol: 'μg/ng'),
  DefinedUnit(
      code: 'ukat',
      codeUC: 'UKAT',
      value: Value(
          unit: 'mol/s',
          unitUC: 'MOL/S',
          value: UcumDecimal.fromString('1'),
          text: '1'),
      property: 'catalytic activity',
      isMetric: true,
      isSpecial: false,
      class_: 'chemical',
      names: <String>[
        'microkatals',
        'ukats',
        'microkatal',
      ],
      printSymbol: 'μkat'),
  DefinedUnit(
      code: 'um',
      codeUC: 'UM',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'micrometers',
        'micrometres',
        'μm',
        'microns',
        'micrometer',
      ],
      printSymbol: 'μm'),
  DefinedUnit(
      code: 'um/s',
      codeUC: 'UM/S',
      value: Value(),
      property: 'length',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'um/sec',
        'micron/second',
        'microns/second',
        'um per sec',
        'micrometers per second',
        'microns per second'
      ],
      printSymbol: 'μm/s'),
  DefinedUnit(
      code: 'umol',
      codeUC: 'UMOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'micromoles',
        'umols',
        'micromole',
      ],
      printSymbol: 'μmol'),
  DefinedUnit(
      code: 'umol/(2.h)',
      codeUC: 'UMOL/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'umol/2hrs',
        'umol/2 hrs',
        'umol per 2 hrs',
        'micromoles per 2 hours',
        'micromole per 2 hour'
      ],
      printSymbol: 'μmol/h'),
  DefinedUnit(
      code: 'umol/(24.h)',
      codeUC: 'UMOL/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'umol/24hrs',
        'umol/24 hrs',
        'umol per 24 hrs',
        'micromoles per 24 hours',
        'micromole per 24 hour'
      ],
      printSymbol: 'μmol/h'),
  DefinedUnit(
      code: 'umol/(8.h)',
      codeUC: 'UMOL/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'umol/8hr',
        'umol/8 hr',
        'umol per 8 hr',
        'umol per 8hr',
        'umols per 8hr',
        'umol per 8 hours',
        'micromoles per 8 hours',
        'micromole per 8 hour'
      ],
      printSymbol: 'μmol/h'),
  DefinedUnit(
      code: 'umol/L',
      codeUC: 'UMOL/L',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'micromole/liter',
        'micromole/litre',
        'umol per liter',
        'micromoles per liter',
        'micromole per liter'
      ],
      printSymbol: 'μmol/L'),
  DefinedUnit(
      code: 'umol/L/h',
      codeUC: '(UMOL/L)/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'umol/liter/hr',
        'umol/litre/hr',
        'umol per L per hr',
        'umol per liter per hour',
        'micromoles per liters per hour',
        'micromole per liter per hour'
      ],
      printSymbol: '(μmol/L)/h'),
  DefinedUnit(
      code: 'umol/d',
      codeUC: 'UMOL/D',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'umol/day',
        'umol per day',
        'umols per day',
        'umol per days',
        'micromoles per days',
        'umol/24hr',
        'umol/24 hr',
        'umol per 24 hr',
        'umol per 24hr',
        'umols per 24hr',
        'umol per 24 hours',
        'micromoles per 24 hours',
        'micromole per day'
      ],
      printSymbol: 'μmol/d'),
  DefinedUnit(
      code: 'umol/dL',
      codeUC: 'UMOL/DL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'micromole/deciliter',
        'micromole/decilitre',
        'umol per dL',
        'micromoles per deciliters',
        'micromole per decilitres',
        'micromole per deciliter'
      ],
      printSymbol: 'μmol/dL'),
  DefinedUnit(
      code: 'umol/g',
      codeUC: 'UMOL/G',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'micromole/gram',
        'umol per g',
        'micromoles per gram',
        'micromole per gram'
      ],
      printSymbol: 'μmol/g'),
  DefinedUnit(
      code: 'umol/h',
      codeUC: 'UMOL/HR',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'umol/hr',
        'umol per hr',
        'umol per hour',
        'micromoles per hours',
        'micromole per hour'
      ],
      printSymbol: 'μmol/h'),
  DefinedUnit(
      code: 'umol/kg',
      codeUC: 'UMOL/KG',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'umol per kg',
        'micromoles per kilogram',
        'micromole per kilogram'
      ],
      printSymbol: 'μmol/kg'),
  DefinedUnit(
      code: 'umol/mL',
      codeUC: 'UMOL/ML',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'umol per mL',
        'micromoles per milliliter',
        'micromole per milliliter'
      ],
      printSymbol: 'μmol/mL'),
  DefinedUnit(
      code: 'umol/mL/min',
      codeUC: '(UMOL/ML)/MIN',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'umol per mL per min',
        'micromoles per milliliters per minute',
        'micromole per milliliter per minute'
      ],
      printSymbol: '(μmol/mL)/min'),
  DefinedUnit(
      code: 'umol/mg',
      codeUC: 'UMOL/MG',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'micromole/milligram',
        'umol per mg',
        'micromoles per milligram',
        'micromole per milligram'
      ],
      printSymbol: 'μmol/mg'),
  DefinedUnit(
      code: 'umol/min',
      codeUC: 'UMOL/MIN',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'micromole/minute',
        'umol per min',
        'micromoles per minute',
        'micromole per minute'
      ],
      printSymbol: 'μmol/min'),
  DefinedUnit(
      code: 'umol/min/L',
      codeUC: '(UMOL/MIN)/L',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'umol/min/liter',
        'umol/minute/liter',
        'micromoles per minutes per liter',
        'micromole per minute per liter'
      ],
      printSymbol: '(μmol/min)/L'),
  DefinedUnit(
      code: 'umol/min/g',
      codeUC: '(UMOL/MIN)/G',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'umol/min/gm',
        'umol per min per gm',
        'micromoles per minutes per gram',
        'micromole per minute per gram'
      ],
      printSymbol: '(μmol/min)/g'),
  DefinedUnit(
      code: 'umol/mmol',
      codeUC: 'UMOL/MMOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'umol per mmol',
        'micromoles per millimole',
        'micromole per millimole'
      ],
      printSymbol: 'μmol/mmol'),
  DefinedUnit(
      code: 'umol/mol',
      codeUC: 'UMOL/MOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'umol per mol',
        'micromoles per mole',
        'micromole per mole',
      ],
      printSymbol: 'μmol/mol'),
  DefinedUnit(
      code: 'umol/umol',
      codeUC: 'UMOL/UMOL',
      value: Value(
          unit: '10*23',
          unitUC: '10*23',
          value: UcumDecimal.fromString('6.0221367'),
          text: '6.0221367'),
      property: 'amount of substance',
      isMetric: true,
      isSpecial: false,
      class_: 'si',
      names: <String>[
        'umol per umol',
        'micromoles per micromole',
        'micromole per micromole'
      ],
      printSymbol: 'μmol/μmol'),
  DefinedUnit(
      code: 'us',
      codeUC: 'US',
      value: Value(),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'microseconds',
        'microsecond',
      ],
      printSymbol: 'μs'),
  DefinedUnit(
      code: 'wk',
      codeUC: 'WK',
      value: Value(
          unit: 'd',
          unitUC: 'D',
          value: UcumDecimal.fromString('7'),
          text: '7'),
      property: 'time',
      isMetric: false,
      isSpecial: false,
      class_: 'iso1000',
      names: <String>[
        'weeks',
        'wks',
        'week',
      ],
      printSymbol: 'wk'),
  DefinedUnit(
      code: 'DefinedUnit(#)/[HPF]',
      codeUC: '/[HPF]',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '#/HPF',
        '# per HPF',
        'number/HPF',
        'numbers per high power field',
        'number per high power field'
      ],
      printSymbol: '/HPF'),
  DefinedUnit(
      code: 'DefinedUnit(#)/[LPF]',
      codeUC: '/[LPF]',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        '#/LPF',
        '# per LPF',
        'number/LPF',
        'numbers per low power field',
        'number per low power field'
      ],
      printSymbol: '/LPF'),
  DefinedUnit(
      code: "DefinedUnit(APS'U)",
      codeUC: '',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'APS Unit',
        'Phosphatidylserine Antibody IgA Units',
        'IgA antiphosphatidylserine unit '
      ]),
  DefinedUnit(
      code: 'DefinedUnit(EIA_index)',
      codeUC: '',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'enzyme immunoassay index',
        'EIA index',
      ]),
  DefinedUnit(
      code: "DefinedUnit(KCT'U)",
      codeUC: '',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'KCT',
        'kaolin clotting time',
      ]),
  DefinedUnit(
      code: "DefinedUnit(MPS'U)",
      codeUC: '',
      value: Value(),
      property: '',
      isMetric: false,
      isSpecial: false,
      names: <String>[
        'Phosphatidylserine Antibody IgM Measurement',
        'IgM antiphosphatidylserine unit'
      ])
];
