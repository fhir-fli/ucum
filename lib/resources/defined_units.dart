import '../ucum.dart';

final definedUnits = [
  DefinedUnit(
      code: "10*",
      codeUC: "10*",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "the number ten for arbitrary powers",
        "10^",
        "10 to the arbitrary powers"
      ],
      printSymbol: "10"),
  DefinedUnit(
      code: "10^",
      codeUC: "10^",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "the number ten for arbitrary powers",
        "10*",
        "10 to the arbitrary power"
      ],
      printSymbol: "10"),
  DefinedUnit(
      code: "[pi]",
      codeUC: "[PI]",
      value: Value(
          unit: "1",
          unitUC: "1",
          value: Decimal.fromString(
              "3.1415926535897932384626433832795028841971693993751058209749445923"),
          text:
              "3.1415926535897932384626433832795028841971693993751058209749445923"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["the number pi", "π"],
      printSymbol: "π"),
  DefinedUnit(
      code: "%",
      codeUC: "%",
      value: Value(
          unit: "10*-2",
          unitUC: "10*-2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "fraction",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["", "percents"],
      printSymbol: "%"),
  DefinedUnit(
      code: "[ppth]",
      codeUC: "[PPTH]",
      value: Value(
          unit: "10*-3",
          unitUC: "10*-3",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "fraction",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["parts per thousand", "ppth", "10^-3"],
      printSymbol: "ppth"),
  DefinedUnit(
      code: "[ppm]",
      codeUC: "[PPM]",
      value: Value(
          unit: "10*-6",
          unitUC: "10*-6",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "fraction",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["parts per million", "ppm", "10^-6"],
      printSymbol: "ppm"),
  DefinedUnit(
      code: "[ppb]",
      codeUC: "[PPB]",
      value: Value(
          unit: "10*-9",
          unitUC: "10*-9",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "fraction",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["parts per billion", "ppb", "10^-9"],
      printSymbol: "ppb"),
  DefinedUnit(
      code: "[pptr]",
      codeUC: "[PPTR]",
      value: Value(
          unit: "10*-12",
          unitUC: "10*-12",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "fraction",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["parts per trillion", "pptr", "10^-12"],
      printSymbol: "pptr"),
  DefinedUnit(
      code: "mol",
      codeUC: "MOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["mole", "moles"],
      printSymbol: "mol"),
  DefinedUnit(
      code: "sr",
      codeUC: "SR",
      value: Value(
          unit: "rad2",
          unitUC: "RAD2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "solid angle",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["steradian - solid angle", "square radian", "rad2", "rad^2"],
      printSymbol: "sr"),
  DefinedUnit(
      code: "Hz",
      codeUC: "HZ",
      value: Value(
          unit: "s-1",
          unitUC: "S-1",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "frequency",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["hertz", "Herz", "frequency", "frequencies"],
      printSymbol: "Hz"),
  DefinedUnit(
      code: "N",
      codeUC: "N",
      value: Value(
          unit: "kg.m/s2",
          unitUC: "KG.M/S2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "force",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["newton", "Newtons"],
      printSymbol: "N"),
  DefinedUnit(
      code: "Pa",
      codeUC: "PAL",
      value: Value(
          unit: "N/m2",
          unitUC: "N/M2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "pressure",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["pascal", "pascals"],
      printSymbol: "Pa"),
  DefinedUnit(
      code: "J",
      codeUC: "J",
      value: Value(
          unit: "N.m",
          unitUC: "N.M",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "energy",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["joule", "joules"],
      printSymbol: "J"),
  DefinedUnit(
      code: "W",
      codeUC: "W",
      value: Value(
          unit: "J/s",
          unitUC: "J/S",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "power",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["watt", "watts"],
      printSymbol: "W"),
  DefinedUnit(
      code: "A",
      codeUC: "A",
      value: Value(
          unit: "C/s",
          unitUC: "C/S",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "electric current",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Ampere", "Amperes"],
      printSymbol: "A"),
  DefinedUnit(
      code: "V",
      codeUC: "V",
      value: Value(
          unit: "J/C",
          unitUC: "J/C",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "electric potential",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["volt", "volts"],
      printSymbol: "V"),
  DefinedUnit(
      code: "F",
      codeUC: "F",
      value: Value(
          unit: "C/V",
          unitUC: "C/V",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "electric capacitance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["farad", "farads", "electric capacitance"],
      printSymbol: "F"),
  DefinedUnit(
      code: "Ohm",
      codeUC: "OHM",
      value: Value(
          unit: "V/A",
          unitUC: "V/A",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "electric resistance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["ohm", "Ω", "resistance", "ohms"],
      printSymbol: "Ω"),
  DefinedUnit(
      code: "S",
      codeUC: "SIE",
      value: Value(
          unit: "Ohm-1",
          unitUC: "OHM-1",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "electric conductance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["siemens", "Reciprocal ohm", "mho", "Ω−1", "conductance"],
      printSymbol: "S"),
  DefinedUnit(
      code: "Wb",
      codeUC: "WB",
      value: Value(
          unit: "V.s",
          unitUC: "V.S",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "magnetic flux",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["weber", "magnetic flux", "webers"],
      printSymbol: "Wb"),
  DefinedUnit(
      code: "Cel",
      codeUC: "CEL",
      value: Value(unit: 'K', unitUC: null, value: null, text: null),
      property: "temperature",
      isMetric: true,
      isSpecial: true,
      class_: null,
      names: ["degree Celsius", "°C", "degrees"],
      printSymbol: "°C"),
  DefinedUnit(
      code: "T",
      codeUC: "T",
      value: Value(
          unit: "Wb/m2",
          unitUC: "WB/M2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "magnetic flux density",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["tesla", "Teslas", "magnetic field"],
      printSymbol: "T"),
  DefinedUnit(
      code: "H",
      codeUC: "H",
      value: Value(
          unit: "Wb/A",
          unitUC: "WB/A",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "inductance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["henry", "henries", "inductance"],
      printSymbol: "H"),
  DefinedUnit(
      code: "lm",
      codeUC: "LM",
      value: Value(
          unit: "cd.sr",
          unitUC: "CD.SR",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "luminous flux",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["lumen", "luminous flux", "lumens"],
      printSymbol: "lm"),
  DefinedUnit(
      code: "lx",
      codeUC: "LX",
      value: Value(
          unit: "lm/m2",
          unitUC: "LM/M2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "illuminance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["lux", "illuminance", "luxes"],
      printSymbol: "lx"),
  DefinedUnit(
      code: "Bq",
      codeUC: "BQ",
      value: Value(
          unit: "s-1",
          unitUC: "S-1",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "radioactivity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["becquerel", "activity", "radiation", "becquerels"],
      printSymbol: "Bq"),
  DefinedUnit(
      code: "Gy",
      codeUC: "GY",
      value: Value(
          unit: "J/kg",
          unitUC: "J/KG",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "energy dose",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "gray",
        "absorbed doses",
        "ionizing radiation doses",
        "kerma",
        "grays"
      ],
      printSymbol: "Gy"),
  DefinedUnit(
      code: "Sv",
      codeUC: "SV",
      value: Value(
          unit: "J/kg",
          unitUC: "J/KG",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "dose equivalent",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "sievert",
        "sieverts",
        "radiation dose quantities",
        "equivalent doses",
        "effective dose",
        "operational dose",
        "committed dose"
      ],
      printSymbol: "Sv"),
  DefinedUnit(
      code: "deg",
      codeUC: "DEG",
      value: Value(
          unit: "[pi].rad/360",
          unitUC: "[PI].RAD/360",
          value: Decimal.fromString('2'),
          text: "2"),
      property: "plane angle",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "degree - plane angle",
        "°",
        "degree of arc",
        "arc degree",
        "arcdegree",
        "angle"
      ],
      printSymbol: "°"),
  DefinedUnit(
      code: "gon",
      codeUC: "GON",
      value: Value(
          unit: 'deg',
          unitUC: 'DEG',
          value: Decimal.fromString('0.9'),
          text: "0.9"),
      property: "plane angle",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["gon", "gon (grade)", "gons"],
      printSymbol: "□<sup>g</sup>"),
  DefinedUnit(
      code: "",
      codeUC: "",
      value: Value(
          unit: "deg/60",
          unitUC: "DEG/60",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "plane angle",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["arc minute", "arcminutes", "arcmin", "arc minutes", "arc mins"],
      printSymbol: ""),
  DefinedUnit(
      code: "'",
      codeUC: "'",
      value: Value(
          unit: "/60",
          unitUC: "/60",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "plane angle",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["arc second", "arcseconds", "arcsecs"],
      printSymbol: "'"),
  DefinedUnit(
      code: "l",
      codeUC: "L",
      value: Value(
          unit: "dm3",
          unitUC: "DM3",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "Liters",
        "cubic decimeters",
        "decimeters cubed",
        "decimetres",
        "dm3",
        "dm^3",
        "litres",
        "liters, LT"
      ],
      printSymbol: "l"),
  DefinedUnit(
      code: "L",
      codeUC: "L",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "Liters",
        "cubic decimeters",
        "decimeters cubed",
        "decimetres",
        "dm3",
        "dm^3",
        "litres",
        "liters, LT"
      ],
      printSymbol: "L"),
  DefinedUnit(
      code: "ar",
      codeUC: "AR",
      value: Value(
          unit: "m2",
          unitUC: "M2",
          value: Decimal.fromString('100'),
          text: "100"),
      property: "area",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "are",
        "100 m2",
        "100 m^2",
        "100 square meter",
        "meters squared",
        "metres"
      ],
      printSymbol: "a"),
  DefinedUnit(
      code: "min",
      codeUC: "MIN",
      value: Value(
          unit: "s", unitUC: "S", value: Decimal.fromString('60'), text: "60"),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["minute", "minutes"],
      printSymbol: "min"),
  DefinedUnit(
      code: "h",
      codeUC: "HR",
      value: Value(
          unit: "min",
          unitUC: "MIN",
          value: Decimal.fromString('60'),
          text: "60"),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["hour", "hours", "hrs", "age"],
      printSymbol: "h"),
  DefinedUnit(
      code: "d",
      codeUC: "D",
      value: Value(
          unit: "h", unitUC: "HR", value: Decimal.fromString('24'), text: "24"),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["day", "days", "age", "dy", "24 hours", "24 hrs"],
      printSymbol: "d"),
  DefinedUnit(
      code: "a_t",
      codeUC: "ANN_T",
      value: Value(
          unit: "d",
          unitUC: "D",
          value: Decimal.fromString('365.24219'),
          text: "365.24219"),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["tropical year", "solar years", "a tropical", "years"],
      printSymbol: "a<sub>t</sub>"),
  DefinedUnit(
      code: "a_j",
      codeUC: "ANN_J",
      value: Value(
          unit: 'd',
          unitUC: "D",
          value: Decimal.fromString('365.25'),
          text: "365.25"),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["mean Julian year", "mean Julian yr", "a julian", "years"],
      printSymbol: "a<sub>j</sub>"),
  DefinedUnit(
      code: "a_g",
      codeUC: "ANN_G",
      value: Value(
          unit: "d",
          unitUC: "D",
          value: Decimal.fromString('365.2425'),
          text: "365.2425"),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "mean Gregorian year",
        "mean Gregorian yr",
        "a gregorian",
        "years"
      ],
      printSymbol: "a<sub>g</sub>"),
  DefinedUnit(
      code: "a",
      codeUC: "ANN",
      value: Value(
          unit: "a_j",
          unitUC: "ANN_J",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["year", "years", "a", "yr, yrs", "annum"],
      printSymbol: "a"),
  DefinedUnit(
      code: "wk",
      codeUC: "WK",
      value: Value(
          unit: "d", unitUC: "D", value: Decimal.fromString('7'), text: "7"),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["week", "weeks", "wks"],
      printSymbol: "wk"),
  DefinedUnit(
      code: "mo_s",
      codeUC: "MO_S",
      value: Value(
          unit: "d",
          unitUC: "D",
          value: Decimal.fromString('29.53059'),
          text: "29.53059"),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "synodal month",
        "Moon",
        "synodic month",
        "lunar month",
        "mo-s",
        "mo s",
        "months",
        "moons"
      ],
      printSymbol: "mo<sub>s</sub>"),
  DefinedUnit(
      code: "mo_j",
      codeUC: "MO_J",
      value: Value(
          unit: "a_j/12",
          unitUC: "ANN_J/12",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["mean Julian month", "mo-julian", "mo Julian", "months"],
      printSymbol: "mo<sub>j</sub>"),
  DefinedUnit(
      code: "mo_g",
      codeUC: "MO_G",
      value: Value(
          unit: "a_g/12",
          unitUC: "ANN_G/12",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "mean Gregorian month",
        "months",
        "month-gregorian",
        "mo-gregorian"
      ],
      printSymbol: "mo<sub>g</sub>"),
  DefinedUnit(
      code: "mo",
      codeUC: "MO",
      value: Value(
          unit: "mo_j",
          unitUC: "MO_J",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["month", "months", "duration"],
      printSymbol: "mo"),
  DefinedUnit(
      code: "t",
      codeUC: "TNE",
      value: Value(
          unit: "kg",
          unitUC: "KG",
          value: Decimal.fromString('1000.0'),
          text: "1000.0"),
      property: "mass",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["metric ton", "tonnes", "megagrams", "tons"],
      printSymbol: "t"),
  DefinedUnit(
      code: "bar",
      codeUC: "BAR",
      value: Value(
          unit: "Pa",
          unitUC: "PAL",
          value: Decimal.fromString('100000.0'),
          text: "100000.0"),
      property: "pressure",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["bar", "bars"],
      printSymbol: "bar"),
  DefinedUnit(
      code: "u",
      codeUC: "AMU",
      value: Value(
          unit: "g",
          unitUC: "G",
          value: Decimal.fromString('0.0000000000000000000000016605402'),
          text: "1.6605402e-24"),
      property: "mass",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "unified atomic mass unit",
        "unified atomic mass units",
        "amu",
        "Dalton",
        "Da"
      ],
      printSymbol: "u"),
  DefinedUnit(
      code: "AU",
      codeUC: "ASU",
      value: Value(
          unit: "Mm",
          unitUC: "MAM",
          value: Decimal.fromString('149597.870691'),
          text: "149597.870691"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["astronomic unit", "AU", "units"],
      printSymbol: "AU"),
  DefinedUnit(
      code: "pc",
      codeUC: "PRS",
      value: Value(
          unit: "m",
          unitUC: "M",
          value: Decimal.fromString('30856780000000000.0'),
          text: "30856780000000000.0"),
      property: "length",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["parsec", "parsecs"],
      printSymbol: "pc"),
  DefinedUnit(
      code: "[c]",
      codeUC: "[C]",
      value: Value(
          unit: "m/s",
          unitUC: "M/S",
          value: Decimal.fromString('299792458'),
          text: "299792458"),
      property: "velocity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["velocity of light in a vacuum", "speed of light"],
      printSymbol: "<i>c</i>"),
  DefinedUnit(
      code: "[h]",
      codeUC: "[H]",
      value: Value(
          unit: "J.s",
          unitUC: "J.S",
          value:
              Decimal.fromString('0.00000000000000000000000000000000066260755'),
          text: "6.6260755e-34"),
      property: "action",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Planck constant", "Planck's constant"],
      printSymbol: "<i>h</i>"),
  DefinedUnit(
      code: "[k]",
      codeUC: "[K]",
      value: Value(
          unit: "J/K",
          unitUC: "J/K",
          value: Decimal.fromString('0.00000000000000000000001380658'),
          text: "1.380658e-23"),
      property: "(unclassified)",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Boltzmann constant", "k", "kB"],
      printSymbol: "<i>k</i>"),
  DefinedUnit(
      code: "[eps_0]",
      codeUC: "[EPS_0]",
      value: Value(
          unit: "F/m",
          unitUC: "F/M",
          value: Decimal.fromString('0.000000000008854187817'),
          text: "8.854187817e-12"),
      property: "electric permittivity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "permittivity of vacuum - electric",
        "ε0",
        "Electric Constant",
        "vacuum permittivity",
        "permittivity of free space"
      ],
      printSymbol: "<i>ε<sub><r>0</r></sub></i>"),
  DefinedUnit(
      code: "[mu_0]",
      codeUC: "[MU_0]",
      value: Value(
          unit: "N/A2",
          unitUC: "4.[PI].10*-7.N/A2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "magnetic permeability",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "permeability of vacuum - magnetic",
        "μ0",
        "vacuum permeability",
        "permeability of free space",
        "magnetic constant"
      ],
      printSymbol: "<i>μ<sub><r>0</r></sub></i>"),
  DefinedUnit(
      code: "[e]",
      codeUC: "[E]",
      value: Value(
          unit: "C",
          unitUC: "C",
          value: Decimal.fromString('0.000000000000000000160217733'),
          text: "1.60217733e-19"),
      property: "electric charge",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["elementary charge", "e", "q", "electric charges"],
      printSymbol: "<i>e</i>"),
  DefinedUnit(
      code: "eV",
      codeUC: "EV",
      value: Value(
          unit: "[e].V",
          unitUC: "[E].V",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "energy",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["electronvolt", "Electron Volts", "electronvolts"],
      printSymbol: "eV"),
  DefinedUnit(
      code: "[m_e]",
      codeUC: "[M_E]",
      value: Value(
          unit: "g",
          unitUC: "g",
          value: Decimal.fromString('0.00000000000000000000000000091093897'),
          text: "9.1093897e-28"),
      property: "mass",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["electron mass", "electron rest mass", "me"],
      printSymbol: "<i>m<sub><r>e</r></sub></i>"),
  DefinedUnit(
      code: "[m_p]",
      codeUC: "[M_P]",
      value: Value(
          unit: "g",
          unitUC: "g",
          value: Decimal.fromString('0.0000000000000000000000016726231'),
          text: "1.6726231e-24"),
      property: "mass",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["proton mass", "mp", "masses"],
      printSymbol: "<i>m<sub><r>p</r></sub></i>"),
  DefinedUnit(
      code: "[G]",
      codeUC: "[GC]",
      value: Value(
          unit: "m3.kg-1.s-2",
          unitUC: "M3.KG-1.S-2",
          value: Decimal.fromString('0.0000000000667259'),
          text: "6.67259e-11"),
      property: "(unclassified)",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "Newtonian constant of gravitation",
        "G",
        "gravitational constant",
        "Newton's constant"
      ],
      printSymbol: "<i>G</i>"),
  DefinedUnit(
      code: "[g]",
      codeUC: "[G]",
      value: Value(
          unit: "m/s2",
          unitUC: "M/S2",
          value: Decimal.fromString('9.80665'),
          text: "9.80665"),
      property: "acceleration",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "standard acceleration of free fall",
        "standard gravity",
        "g",
        "ɡ0",
        "ɡn"
      ],
      printSymbol: "<i>g<sub>n</sub></i>"),
  DefinedUnit(
      code: "Torr",
      codeUC: "Torr",
      value: Value(
          unit: "Pa",
          unitUC: "PAL",
          value: Decimal.fromString('133.322'),
          text: "133.322"),
      property: "pressure",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["Torr", "torrs"],
      printSymbol: "Torr"),
  DefinedUnit(
      code: "atm",
      codeUC: "ATM",
      value: Value(
          unit: "Pa",
          unitUC: "PAL",
          value: Decimal.fromString('101325'),
          text: "101325"),
      property: "pressure",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "standard atmosphere",
        "reference pressure",
        "atmos",
        "std atmosphere"
      ],
      printSymbol: "atm"),
  DefinedUnit(
      code: "[ly]",
      codeUC: "[LY]",
      value: Value(
          unit: "[c].a_j",
          unitUC: "[C].ANN_J",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "length",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["light-year", "light years", "ly"],
      printSymbol: "l.y."),
  DefinedUnit(
      code: "gf",
      codeUC: "GF",
      value: Value(
          unit: "g.[g]",
          unitUC: "G.[G]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "force",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["gram-force", "Newtons", "gram forces"],
      printSymbol: "gf"),
  DefinedUnit(
      code: "Ky",
      codeUC: "KY",
      value: Value(
          unit: "cm-1",
          unitUC: "CM-1",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "lineic number",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Kayser", "wavenumbers", "kaysers"],
      printSymbol: "K"),
  DefinedUnit(
      code: "Gal",
      codeUC: "GL",
      value: Value(
          unit: "cm/s2",
          unitUC: "CM/S2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "acceleration",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Gal", "galileos", "Gals"],
      printSymbol: "Gal"),
  DefinedUnit(
      code: "dyn",
      codeUC: "DYN",
      value: Value(
          unit: "g.cm/s2",
          unitUC: "G.CM/S2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "force",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["dyne", "dynes"],
      printSymbol: "dyn"),
  DefinedUnit(
      code: "erg",
      codeUC: "ERG",
      value: Value(
          unit: "dyn.cm",
          unitUC: "DYN.CM",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "energy",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "erg",
        "10^-7 Joules, 10-7 Joules",
        "100 nJ",
        "100 nanoJoules",
        "1 dyne cm",
        "1 g.cm2/s2"
      ],
      printSymbol: "erg"),
  DefinedUnit(
      code: "P",
      codeUC: "P",
      value: Value(
          unit: "dyn.s/cm2",
          unitUC: "DYN.S/CM2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "dynamic viscosity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Poise", "dynamic viscosity", "poises"],
      printSymbol: "P"),
  DefinedUnit(
      code: "Bi",
      codeUC: "BI",
      value: Value(
          unit: "A", unitUC: "A", value: Decimal.fromString('10'), text: "10"),
      property: "electric current",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Biot", "Bi", "abamperes", "abA"],
      printSymbol: "Bi"),
  DefinedUnit(
      code: "St",
      codeUC: "ST",
      value: Value(
          unit: "cm2/s",
          unitUC: "CM2/S",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "kinematic viscosity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Stokes", "kinematic viscosity"],
      printSymbol: "St"),
  DefinedUnit(
      code: "Mx",
      codeUC: "MX",
      value: Value(
          unit: "Wb",
          unitUC: "WB",
          value: Decimal.fromString('0.00000001'),
          text: "1e-8"),
      property: "flux of magnetic induction",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Maxwell", "magnetix flux", "Maxwells"],
      printSymbol: "Mx"),
  DefinedUnit(
      code: "G",
      codeUC: "GS",
      value: Value(
          unit: 'T',
          unitUC: "T",
          value: Decimal.fromString('0.0001'),
          text: "0.0001"),
      property: "magnetic flux density",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "Gauss",
        "magnetic fields",
        "magnetic flux density",
        "induction",
        "B"
      ],
      printSymbol: "Gs"),
  DefinedUnit(
      code: "Oe",
      codeUC: "OE",
      value: Value(
          unit: "A/m",
          unitUC: "/[PI].A/M",
          value: Decimal.fromString('250'),
          text: "250"),
      property: "magnetic field intensity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Oersted", "H magnetic B field", "Oersteds"],
      printSymbol: "Oe"),
  DefinedUnit(
      code: "Gb",
      codeUC: "GB",
      value: Value(
          unit: "Oe.cm",
          unitUC: "OE.CM",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "magnetic tension",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Gilbert", "Gi", "magnetomotive force", "Gilberts"],
      printSymbol: "Gb"),
  DefinedUnit(
      code: "sb",
      codeUC: "SB",
      value: Value(
          unit: "cd/cm2",
          unitUC: "CD/CM2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "lum. intensity density",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["stilb", "stilbs"],
      printSymbol: "sb"),
  DefinedUnit(
      code: "Lmb",
      codeUC: "LMB",
      value: Value(
          unit: "cd/cm2/[pi]",
          unitUC: "CD/CM2/[PI]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "brightness",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Lambert", "luminance", "lamberts"],
      printSymbol: "L"),
  DefinedUnit(
      code: "ph",
      codeUC: "PHT",
      value: Value(
          unit: "lx",
          unitUC: "LX",
          value: Decimal.fromString('0.0001'),
          text: "0.0001"),
      property: "illuminance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["phot", "phots"],
      printSymbol: "ph"),
  DefinedUnit(
      code: "Ci",
      codeUC: "CI",
      value: Value(
          unit: "Bq",
          unitUC: "BQ",
          value: Decimal.fromString('37000000000.0'),
          text: "37000000000.0"),
      property: "radioactivity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Curie", "curies"],
      printSymbol: "Ci"),
  DefinedUnit(
      code: "R",
      codeUC: "ROE",
      value: Value(
          unit: "C/kg",
          unitUC: "C/KG",
          value: Decimal.fromString('0.000258'),
          text: "0.000258"),
      property: "ion dose",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Roentgen", "röntgen", "Roentgens"],
      printSymbol: "R"),
  DefinedUnit(
      code: "RAD",
      codeUC: "[RAD]",
      value: Value(
          unit: "erg/g",
          unitUC: "ERG/G",
          value: Decimal.fromString('100'),
          text: "100"),
      property: "energy dose",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["radiation absorbed dose", "doses"],
      printSymbol: "RAD"),
  DefinedUnit(
      code: "REM",
      codeUC: "[REM]",
      value: Value(
          unit: "RAD",
          unitUC: "[RAD]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "dose equivalent",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "radiation equivalent man",
        "Roentgen Equivalent in Man",
        "rems",
        "dose equivalents"
      ],
      printSymbol: "REM"),
  DefinedUnit(
      code: "[in_i]",
      codeUC: "[IN_I]",
      value: Value(
          unit: 'cm',
          unitUC: "CM",
          value: Decimal.fromString('2.54'),
          text: "2.54"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["inch", "inches", "in", "international inch", "body height"],
      printSymbol: "in"),
  DefinedUnit(
      code: "[ft_i]",
      codeUC: "[FT_I]",
      value: Value(
          unit: "[in_i]",
          unitUC: "[IN_I]",
          value: Decimal.fromString('12'),
          text: "12"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "foot",
        "ft",
        "fts",
        "foot",
        "international foot",
        "feet",
        "international feet",
        "height"
      ],
      printSymbol: "ft"),
  DefinedUnit(
      code: "[yd_i]",
      codeUC: "[YD_I]",
      value: Value(
          unit: "[ft_i]",
          unitUC: "[FT_I]",
          value: Decimal.fromString('3'),
          text: "3"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["yard", "international yards", "yds", "distance"],
      printSymbol: "yd"),
  DefinedUnit(
      code: "[mi_i]",
      codeUC: "[MI_I]",
      value: Value(
          unit: "[ft_i]",
          unitUC: "[FT_I]",
          value: Decimal.fromString('5280'),
          text: "5280"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["mile", "international miles", "mi I", "statute mile"],
      printSymbol: "mi"),
  DefinedUnit(
      code: "[fth_i]",
      codeUC: "[FTH_I]",
      value: Value(
          unit: "[ft_i]",
          unitUC: "[FT_I]",
          value: Decimal.fromString('6'),
          text: "6"),
      property: "depth of water",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["fathom", "international fathoms"],
      printSymbol: "fth"),
  DefinedUnit(
      code: "[nmi_i]",
      codeUC: "[NMI_I]",
      value: Value(
          unit: "m",
          unitUC: "M",
          value: Decimal.fromString('1852'),
          text: "1852"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "nautical mile",
        "nautical mile",
        "nautical miles",
        "international nautical mile",
        "international nautical miles",
        "nm",
        "n.m.",
        "nmi"
      ],
      printSymbol: "n.mi"),
  DefinedUnit(
      code: "[kn_i]",
      codeUC: "[KN_I]",
      value: Value(
          unit: "[nmi_i]/h",
          unitUC: "[NMI_I]/H",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "velocity",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["knot", "kn", "kt", "international knots"],
      printSymbol: "knot"),
  DefinedUnit(
      code: "[sin_i]",
      codeUC: "[SIN_I]",
      value: Value(
          unit: "[in_i]2",
          unitUC: "[IN_I]2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "area",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "square inch",
        "in2",
        "in^2",
        "inches squared",
        "sq inch",
        "inches squared",
        "international"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[sft_i]",
      codeUC: "[SFT_I]",
      value: Value(
          unit: "[ft_i]2",
          unitUC: "[FT_I]2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "area",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "square foot",
        "ft2",
        "ft^2",
        "ft squared",
        "sq ft",
        "feet",
        "international"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[syd_i]",
      codeUC: "[SYD_I]",
      value: Value(
          unit: "[yd_i]2",
          unitUC: "[YD_I]2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "area",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "square yard",
        "yd2",
        "yd^2",
        "sq. yds",
        "yards squared",
        "international"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[cin_i]",
      codeUC: "[CIN_I]",
      value: Value(
          unit: "[in_i]3",
          unitUC: "[IN_I]3",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "cubic inch",
        "in3",
        "in^3",
        "in*3",
        "inches^3",
        "inches*3",
        "cu. in",
        "cu in",
        "cubic inches",
        "inches cubed",
        "cin"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[cft_i]",
      codeUC: "[CFT_I]",
      value: Value(
          unit: "[ft_i]3",
          unitUC: "[FT_I]3",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "cubic foot",
        "ft3",
        "ft^3",
        "ft*3",
        "cu. ft",
        "cubic feet",
        "cubed",
        "[ft_i]3",
        "international"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[cyd_i]",
      codeUC: "[CYD_I]",
      value: Value(
          unit: "[yd_i]3",
          unitUC: "[YD_I]3",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "cubic yard",
        "cubic yards",
        "cubic yds",
        "cu yards",
        "CYs",
        "yards^3",
        "yd^3",
        "yds^3",
        "yd3",
        "yds3"
      ],
      printSymbol: "cu.yd"),
  DefinedUnit(
      code: "[bf_i]",
      codeUC: "[BF_I]",
      value: Value(
          unit: "[in_i]3",
          unitUC: "[IN_I]3",
          value: Decimal.fromString('144'),
          text: "144"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["board foot", "BDFT", "FBM", "BF", "board feet", "international"],
      printSymbol: null),
  DefinedUnit(
      code: "[cr_i]",
      codeUC: "[CR_I]",
      value: Value(
          unit: "[ft_i]3",
          unitUC: "[FT_I]3",
          value: Decimal.fromString('128'),
          text: "128"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["cord", "crd I", "international cords"],
      printSymbol: null),
  DefinedUnit(
      code: "[mil_i]",
      codeUC: "[MIL_I]",
      value: Value(
          unit: "[in_i]",
          unitUC: "[IN_I]",
          value: Decimal.fromString('0.001'),
          text: "0.001"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["mil", "thou, thousandth", "mils", "international"],
      printSymbol: "mil"),
  DefinedUnit(
      code: "[cml_i]",
      codeUC: "[CML_I]",
      value: Value(
          unit: "[pi]/4.[mil_i]2",
          unitUC: "[PI]/4.[MIL_I]2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "area",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["circular mil", "circular mils", "cml I", "international"],
      printSymbol: "circ.mil"),
  DefinedUnit(
      code: "[hd_i]",
      codeUC: "[HD_I]",
      value: Value(
          unit: "[in_i]",
          unitUC: "[IN_I]",
          value: Decimal.fromString('4'),
          text: "4"),
      property: "height of horses",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["hand", "hands", "international"],
      printSymbol: "hd"),
  DefinedUnit(
      code: "[ft_us]",
      codeUC: "[FT_US]",
      value: Value(
          unit: "m/3937",
          unitUC: "M/3937",
          value: Decimal.fromString('1200'),
          text: "1200"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "foot - US",
        "US foot",
        "foot US",
        "us ft",
        "ft us",
        "height",
        "visual distance",
        "feet"
      ],
      printSymbol: "ft<sub>us</sub>"),
  DefinedUnit(
      code: "[yd_us]",
      codeUC: "[YD_US]",
      value: Value(
          unit: "[ft_us]",
          unitUC: "[FT_US]",
          value: Decimal.fromString('3'),
          text: "3"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["yard - US", "US yards", "us yds", "distance"],
      printSymbol: null),
  DefinedUnit(
      code: "[in_us]",
      codeUC: "[IN_US]",
      value: Value(
          unit: "[ft_us]/12",
          unitUC: "[FT_US]/12",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["inch - US", "US inches", "in us", "us in", "inch US"],
      printSymbol: null),
  DefinedUnit(
      code: "[rd_us]",
      codeUC: "[RD_US]",
      value: Value(
          unit: "[ft_us]",
          unitUC: "[FT_US]",
          value: Decimal.fromString('16.5'),
          text: "16.5"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["rod - US", "US rod", "US rods", "rd US", "US rd"],
      printSymbol: null),
  DefinedUnit(
      code: "[ch_us]",
      codeUC: "[CH_US]",
      value: Value(
          unit: "[rd_us]",
          unitUC: "[RD_US]",
          value: Decimal.fromString('4'),
          text: "4"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "Gunter's chain - US",
        "surveyor's chain",
        "Surveyor's chain USA",
        "Gunter’s measurement",
        "surveyor’s measurement",
        "Gunter's Chain USA"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[lk_us]",
      codeUC: "[LK_US]",
      value: Value(
          unit: "[ch_us]/100",
          unitUC: "[CH_US]/100",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["link for Gunter's chain - US", "Links for Gunter's Chain USA"],
      printSymbol: null),
  DefinedUnit(
      code: "[rch_us]",
      codeUC: "[RCH_US]",
      value: Value(
          unit: "[ft_us]",
          unitUC: "[FT_US]",
          value: Decimal.fromString('100'),
          text: "100"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["Ramden's chain - US", "Ramsden's chain", "engineer's chains"],
      printSymbol: null),
  DefinedUnit(
      code: "[rlk_us]",
      codeUC: "[RLK_US]",
      value: Value(
          unit: "[rch_us]/100",
          unitUC: "[RCH_US]/100",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["link for Ramden's chain - US", "links for Ramsden's chain"],
      printSymbol: null),
  DefinedUnit(
      code: "[fth_us]",
      codeUC: "[FTH_US]",
      value: Value(
          unit: "[ft_us]",
          unitUC: "[FT_US]",
          value: Decimal.fromString('6'),
          text: "6"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["fathom - US", "US fathoms", "fathom USA", "fth us"],
      printSymbol: null),
  DefinedUnit(
      code: "[fur_us]",
      codeUC: "[FUR_US]",
      value: Value(
          unit: "[rd_us]",
          unitUC: "[RD_US]",
          value: Decimal.fromString('40'),
          text: "40"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["furlong - US", "US furlongs", "fur us"],
      printSymbol: null),
  DefinedUnit(
      code: "[mi_us]",
      codeUC: "[MI_US]",
      value: Value(
          unit: "[fur_us]",
          unitUC: "[FUR_US]",
          value: Decimal.fromString('8'),
          text: "8"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "mile - US",
        "U.S. Survey Miles",
        "US statute miles",
        "survey mi",
        "US mi",
        "distance"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[acr_us]",
      codeUC: "[ACR_US]",
      value: Value(
          unit: "[rd_us]2",
          unitUC: "[RD_US]2",
          value: Decimal.fromString('160'),
          text: "160"),
      property: "area",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["acre - US", "Acre USA Survey", "Acre USA", "survey acres"],
      printSymbol: null),
  DefinedUnit(
      code: "[srd_us]",
      codeUC: "[SRD_US]",
      value: Value(
          unit: "[rd_us]2",
          unitUC: "[RD_US]2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "area",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["square rod - US", "rod2", "rod^2", "sq. rod", "rods squared"],
      printSymbol: null),
  DefinedUnit(
      code: "[smi_us]",
      codeUC: "[SMI_US]",
      value: Value(
          unit: "[mi_us]2",
          unitUC: "[MI_US]2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "area",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["square mile - US", "mi2", "mi^2", "sq mi", "miles squared"],
      printSymbol: null),
  DefinedUnit(
      code: "[sct]",
      codeUC: "[SCT]",
      value: Value(
          unit: "[mi_us]2",
          unitUC: "[MI_US]2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "area",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["section", "sct", "sections"],
      printSymbol: null),
  DefinedUnit(
      code: "[twp]",
      codeUC: "[TWP]",
      value: Value(
          unit: "[sct]",
          unitUC: "[SCT]",
          value: Decimal.fromString('36'),
          text: "36"),
      property: "area",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["township", "twp", "townships"],
      printSymbol: null),
  DefinedUnit(
      code: "[mil_us]",
      codeUC: "[MIL_US]",
      value: Value(
          unit: "[in_us]",
          unitUC: "[IN_US]",
          value: Decimal.fromString('0.001'),
          text: "0.001"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["mil - US", "thou, thousandth", "mils"],
      printSymbol: null),
  DefinedUnit(
      code: "[in_br]",
      codeUC: "[IN_BR]",
      value: Value(
          unit: "cm",
          unitUC: "CM",
          value: Decimal.fromString('2.539998'),
          text: "2.539998"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "inch - British",
        "imperial inches",
        "imp in",
        "br in",
        "british inches"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[ft_br]",
      codeUC: "[FT_BR]",
      value: Value(
          unit: "[in_br]",
          unitUC: "[IN_BR]",
          value: Decimal.fromString('12'),
          text: "12"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "foot - British",
        "British Foot",
        "Imperial Foot",
        "feet",
        "imp fts",
        "br fts"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[rd_br]",
      codeUC: "[RD_BR]",
      value: Value(
          unit: "[ft_br]",
          unitUC: "[FT_BR]",
          value: Decimal.fromString('16.5'),
          text: "16.5"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["rod - British", "British rods", "br rd"],
      printSymbol: null),
  DefinedUnit(
      code: "[ch_br]",
      codeUC: "[CH_BR]",
      value: Value(
          unit: "[rd_br]",
          unitUC: "[RD_BR]",
          value: Decimal.fromString('4'),
          text: "4"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "Gunter's chain - British",
        "Gunter's Chain British",
        "Gunters Chain British",
        "Surveyor's Chain British"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[lk_br]",
      codeUC: "[LK_BR]",
      value: Value(
          unit: "[ch_br]/100",
          unitUC: "[CH_BR]/100",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "link for Gunter's chain - British",
        "Links for Gunter's Chain British"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[fth_br]",
      codeUC: "[FTH_BR]",
      value: Value(
          unit: "[ft_br]",
          unitUC: "[FT_BR]",
          value: Decimal.fromString('6'),
          text: "6"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "fathom - British",
        "British fathoms",
        "imperial fathoms",
        "br fth",
        "imp fth"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[pc_br]",
      codeUC: "[PC_BR]",
      value: Value(
          unit: "[ft_br]",
          unitUC: "[FT_BR]",
          value: Decimal.fromString('2.5'),
          text: "2.5"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["pace - British", "British paces", "br pc"],
      printSymbol: null),
  DefinedUnit(
      code: "[yd_br]",
      codeUC: "[YD_BR]",
      value: Value(
          unit: "[ft_br]",
          unitUC: "[FT_BR]",
          value: Decimal.fromString('3'),
          text: "3"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["yard - British", "British yards", "Br yds", "distance"],
      printSymbol: null),
  DefinedUnit(
      code: "[mi_br]",
      codeUC: "[MI_BR]",
      value: Value(
          unit: "[ft_br]",
          unitUC: "[FT_BR]",
          value: Decimal.fromString('5280'),
          text: "5280"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "mile - British",
        "imperial miles",
        "British miles",
        "English statute miles",
        "imp mi, br mi"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[nmi_br]",
      codeUC: "[NMI_BR]",
      value: Value(
          unit: "[ft_br]",
          unitUC: "[FT_BR]",
          value: Decimal.fromString('6080'),
          text: "6080"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "nautical mile - British",
        "British nautical miles",
        "Imperial nautical miles",
        "Admiralty miles",
        "n.m. br",
        "imp nm"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[kn_br]",
      codeUC: "[KN_BR]",
      value: Value(
          unit: "[nmi_br]/h",
          unitUC: "[NMI_BR]/H",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "velocity",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["knot - British", "British knots", "kn br", "kt"],
      printSymbol: null),
  DefinedUnit(
      code: "[acr_br]",
      codeUC: "[ACR_BR]",
      value: Value(
          unit: "[yd_br]2",
          unitUC: "[YD_BR]2",
          value: Decimal.fromString('4840'),
          text: "4840"),
      property: "area",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["acre", "Imperial acres", "British", "a", "ac", "ar", "acr"],
      printSymbol: null),
  DefinedUnit(
      code: "[gal_us]",
      codeUC: "[GAL_US]",
      value: Value(
          unit: "[in_i]3",
          unitUC: "[IN_I]3",
          value: Decimal.fromString('231'),
          text: "231"),
      property: "fluid volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gallon - US",
        "US gallons",
        "US liquid gallon",
        "gal us",
        "Queen Anne's wine gallon"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[bbl_us]",
      codeUC: "[BBL_US]",
      value: Value(
          unit: "[gal_us]",
          unitUC: "[GAL_US]",
          value: Decimal.fromString('42'),
          text: "42"),
      property: "fluid volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["barrel - US", "bbl"],
      printSymbol: null),
  DefinedUnit(
      code: "[qt_us]",
      codeUC: "[QT_US]",
      value: Value(
          unit: "[gal_us]/4",
          unitUC: "[GAL_US]/4",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "fluid volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["quart - US", "US quarts", "us qts"],
      printSymbol: null),
  DefinedUnit(
      code: "[pt_us]",
      codeUC: "[PT_US]",
      value: Value(
          unit: "[qt_us]/2",
          unitUC: "[QT_US]/2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "fluid volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "pint - US",
        "US pints",
        "pint US",
        "liquid pint",
        "pt us",
        "us pt"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[gil_us]",
      codeUC: "[GIL_US]",
      value: Value(
          unit: "[pt_us]/4",
          unitUC: "[PT_US]/4",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "fluid volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["gill - US", "US gills", "gil us"],
      printSymbol: null),
  DefinedUnit(
      code: "[foz_us]",
      codeUC: "[FOZ_US]",
      value: Value(
          unit: "[gil_us]/4",
          unitUC: "[GIL_US]/4",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "fluid volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "fluid ounce - US",
        "US fluid ounces",
        "fl ozs",
        "FO",
        "fl. oz.",
        "foz us"
      ],
      printSymbol: "oz fl"),
  DefinedUnit(
      code: "[fdr_us]",
      codeUC: "[FDR_US]",
      value: Value(
          unit: "[foz_us]/8",
          unitUC: "[FOZ_US]/8",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "fluid volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["fluid dram - US", "US fluid drams", "fdr us"],
      printSymbol: null),
  DefinedUnit(
      code: "[min_us]",
      codeUC: "[MIN_US]",
      value: Value(
          unit: "[fdr_us]/60",
          unitUC: "[FDR_US]/60",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "fluid volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["minim - US", "min US", "US min", "♏ US"],
      printSymbol: null),
  DefinedUnit(
      code: "[crd_us]",
      codeUC: "[CRD_US]",
      value: Value(
          unit: "[ft_i]3",
          unitUC: "[FT_I]3",
          value: Decimal.fromString('128'),
          text: "128"),
      property: "fluid volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["cord - US", "US cord", "US cords", "crd us", "us crd"],
      printSymbol: null),
  DefinedUnit(
      code: "[bu_us]",
      codeUC: "[BU_US]",
      value: Value(
          unit: "[in_i]3",
          unitUC: "[IN_I]3",
          value: Decimal.fromString('2150.42'),
          text: "2150.42"),
      property: "dry volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["bushel - US", "US bushels", "US bsh", "US bu"],
      printSymbol: null),
  DefinedUnit(
      code: "[gal_wi]",
      codeUC: "[GAL_WI]",
      value: Value(
          unit: "[bu_us]/8",
          unitUC: "[BU_US]/8",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "dry volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gallon - historical",
        "Corn Gallon British",
        "Dry Gallon US",
        "Gallons Historical",
        "Grain Gallon British",
        "Winchester Corn Gallon",
        "historical winchester gallons",
        "wi gal"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[pk_us]",
      codeUC: "[PK_US]",
      value: Value(
          unit: "[bu_us]/4",
          unitUC: "[BU_US]/4",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "dry volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["peck - US", "US pecks", "US pk"],
      printSymbol: null),
  DefinedUnit(
      code: "[dqt_us]",
      codeUC: "[DQT_US]",
      value: Value(
          unit: "[pk_us]/8",
          unitUC: "[PK_US]/8",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "dry volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "dry quart - US",
        "dry quarts",
        "dry quart US",
        "US dry quart",
        "dry qt",
        "us dry qt",
        "dqt",
        "dqt us"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[dpt_us]",
      codeUC: "[DPT_US]",
      value: Value(
          unit: "[dqt_us]/2",
          unitUC: "[DQT_US]/2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "dry volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "dry pint - US",
        "dry pints",
        "dry pint US",
        "US dry pint",
        "dry pt",
        "dpt",
        "dpt us"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[tbs_us]",
      codeUC: "[TBS_US]",
      value: Value(
          unit: "[foz_us]/2",
          unitUC: "[FOZ_US]/2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["tablespoon - US", "Tbs", "tbsp", "tbs us", "US tablespoons"],
      printSymbol: null),
  DefinedUnit(
      code: "[tsp_us]",
      codeUC: "[TSP_US]",
      value: Value(
          unit: "[tbs_us]/3",
          unitUC: "[TBS_US]/3",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["teaspoon - US", "tsp", "t", "US teaspoons"],
      printSymbol: null),
  DefinedUnit(
      code: "[cup_us]",
      codeUC: "[CUP_US]",
      value: Value(
          unit: "[tbs_us]",
          unitUC: "[TBS_US]",
          value: Decimal.fromString('16'),
          text: "16"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["cup - US customary", "cup us", "us cups"],
      printSymbol: null),
  DefinedUnit(
      code: "[foz_m]",
      codeUC: "[FOZ_M]",
      value: Value(
          unit: "mL",
          unitUC: "ML",
          value: Decimal.fromString('30'),
          text: "30"),
      property: "fluid volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "fluid ounce - metric",
        "metric fluid ounces",
        "fozs m",
        "fl ozs m"
      ],
      printSymbol: "oz fl"),
  DefinedUnit(
      code: "[cup_m]",
      codeUC: "[CUP_M]",
      value: Value(
          unit: "mL",
          unitUC: "ML",
          value: Decimal.fromString('240'),
          text: "240"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["cup - US legal", "cup m", "metric cups"],
      printSymbol: null),
  DefinedUnit(
      code: "[tsp_m]",
      codeUC: "[TSP_M]",
      value: Value(
          unit: "mL", unitUC: "mL", value: Decimal.fromString('5'), text: "5"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["teaspoon - metric", "tsp", "t", "metric teaspoons"],
      printSymbol: null),
  DefinedUnit(
      code: "[tbs_m]",
      codeUC: "[TBS_M]",
      value: Value(
          unit: "mL",
          unitUC: "mL",
          value: Decimal.fromString('15'),
          text: "15"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "tablespoon - metric",
        "metric tablespoons",
        "Tbs",
        "tbsp",
        "T",
        "tbs m"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[gal_br]",
      codeUC: "[GAL_BR]",
      value: Value(
          unit: "l",
          unitUC: "L",
          value: Decimal.fromString('4.54609'),
          text: "4.54609"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gallon- British",
        "imperial gallons, UK gallons",
        "British gallons",
        "br gal",
        "imp gal"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[pk_br]",
      codeUC: "[PK_BR]",
      value: Value(
          unit: "[gal_br]",
          unitUC: "[GAL_BR]",
          value: Decimal.fromString('2'),
          text: "2"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "peck - British",
        "imperial pecks",
        "British pecks",
        "br pk",
        "imp pk"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[bu_br]",
      codeUC: "[BU_BR]",
      value: Value(
          unit: "[pk_br]",
          unitUC: "[PK_BR]",
          value: Decimal.fromString('4'),
          text: "4"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "bushel - British",
        "British bushels",
        "imperial",
        "br bsh",
        "br bu",
        "imp"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[qt_br]",
      codeUC: "[QT_BR]",
      value: Value(
          unit: "[gal_br]/4",
          unitUC: "[GAL_BR]/4",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["quart - British", "British quarts", "imperial quarts", "br qts"],
      printSymbol: null),
  DefinedUnit(
      code: "[pt_br]",
      codeUC: "[PT_BR]",
      value: Value(
          unit: "[qt_br]/2",
          unitUC: "[QT_BR]/2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "pint - British",
        "British pints",
        "imperial pints",
        "pt br",
        "br pt",
        "imp pt",
        "pt imp"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[gil_br]",
      codeUC: "[GIL_BR]",
      value: Value(
          unit: "[pt_br]/4",
          unitUC: "[PT_BR]/4",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gill - British",
        "imperial gills",
        "British gills",
        "imp gill, br gill"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[foz_br]",
      codeUC: "[FOZ_BR]",
      value: Value(
          unit: "[gil_br]/5",
          unitUC: "[GIL_BR]/5",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "fluid ounce - British",
        "British fluid ounces",
        "Imperial fluid ounces",
        "br fozs",
        "imp fozs",
        "br fl ozs"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[fdr_br]",
      codeUC: "[FDR_BR]",
      value: Value(
          unit: "[foz_br]/8",
          unitUC: "[FOZ_BR]/8",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["fluid dram - British", "British fluid drams", "fdr br"],
      printSymbol: null),
  DefinedUnit(
      code: "[min_br]",
      codeUC: "[MIN_BR]",
      value: Value(
          unit: "[fdr_br]/60",
          unitUC: "[FDR_BR]/60",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["minim - British", "min br", "br min", "♏ br"],
      printSymbol: null),
  DefinedUnit(
      code: "[gr]",
      codeUC: "[GR]",
      value: Value(
          unit: "mg",
          unitUC: "MG",
          value: Decimal.fromString('64.79891'),
          text: "64.79891"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["grain", "gr", "grains"],
      printSymbol: null),
  DefinedUnit(
      code: "[lb_av]",
      codeUC: "[LB_AV]",
      value: Value(
          unit: "[gr]",
          unitUC: "[GR]",
          value: Decimal.fromString('7000'),
          text: "7000"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "pound",
        "avoirdupois pounds, international pounds",
        "av lbs",
        "pounds"
      ],
      printSymbol: "lb"),
  DefinedUnit(
      code: "[lbf_av]",
      codeUC: "[LBF_AV]",
      value: Value(
          unit: "[lb_av].[g]",
          unitUC: "[LB_AV].[G]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "force",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["pound force - US", "lbfs", "US lbf", "US pound forces"],
      printSymbol: "lbf"),
  DefinedUnit(
      code: "[oz_av]",
      codeUC: "[OZ_AV]",
      value: Value(
          unit: "[lb_av]/16",
          unitUC: "[LB_AV]/16",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "ounce",
        "ounces",
        "international ounces",
        "avoirdupois ounces",
        "av ozs"
      ],
      printSymbol: "oz"),
  DefinedUnit(
      code: "[dr_av]",
      codeUC: "[DR_AV]",
      value: Value(
          unit: "[oz_av]/16",
          unitUC: "[OZ_AV]/16",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "Dram mass unit",
        "Dram",
        "drams avoirdupois",
        "avoidupois dram",
        "international dram"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[scwt_av]",
      codeUC: "[SCWT_AV]",
      value: Value(
          unit: "[lb_av]",
          unitUC: "[LB_AV]",
          value: Decimal.fromString('100'),
          text: "100"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "short hundredweight",
        "hundredweights",
        "s cwt",
        "scwt",
        "avoirdupois"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[lcwt_av]",
      codeUC: "[LCWT_AV]",
      value: Value(
          unit: "[lb_av]",
          unitUC: "[LB_AV]",
          value: Decimal.fromString('112'),
          text: "112"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "long hundredweight",
        "imperial hundredweights",
        "imp cwt",
        "lcwt",
        "avoirdupois"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[ston_av]",
      codeUC: "[STON_AV]",
      value: Value(
          unit: "[scwt_av]",
          unitUC: "[SCWT_AV]",
          value: Decimal.fromString('20'),
          text: "20"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["short ton - US", "ton", "US tons", "avoirdupois tons"],
      printSymbol: null),
  DefinedUnit(
      code: "[lton_av]",
      codeUC: "[LTON_AV]",
      value: Value(
          unit: "[lcwt_av]",
          unitUC: "[LCWT_AV]",
          value: Decimal.fromString('20'),
          text: "20"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "long ton - British",
        "imperial tons",
        "weight tons",
        "British long tons",
        "long ton avoirdupois"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[stone_av]",
      codeUC: "[STONE_AV]",
      value: Value(
          unit: "[lb_av]",
          unitUC: "[LB_AV]",
          value: Decimal.fromString('14'),
          text: "14"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["stone - British", "British stones", "avoirdupois"],
      printSymbol: null),
  DefinedUnit(
      code: "[pwt_tr]",
      codeUC: "[PWT_TR]",
      value: Value(
          unit: "[gr]",
          unitUC: "[GR]",
          value: Decimal.fromString('24'),
          text: "24"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["pennyweight - troy", "dwt", "denarius weights"],
      printSymbol: null),
  DefinedUnit(
      code: "[oz_tr]",
      codeUC: "[OZ_TR]",
      value: Value(
          unit: "[pwt_tr]",
          unitUC: "[PWT_TR]",
          value: Decimal.fromString('20'),
          text: "20"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["ounce - troy", "troy ounces", "tr ozs"],
      printSymbol: null),
  DefinedUnit(
      code: "[lb_tr]",
      codeUC: "[LB_TR]",
      value: Value(
          unit: "[oz_tr]",
          unitUC: "[OZ_TR]",
          value: Decimal.fromString('12'),
          text: "12"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["pound - troy", "troy pounds", "tr lbs"],
      printSymbol: null),
  DefinedUnit(
      code: "[sc_ap]",
      codeUC: "[SC_AP]",
      value: Value(
          unit: "[gr]",
          unitUC: "[GR]",
          value: Decimal.fromString('20'),
          text: "20"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["scruple", "scruples", "sc ap"],
      printSymbol: null),
  DefinedUnit(
      code: "[dr_ap]",
      codeUC: "[DR_AP]",
      value: Value(
          unit: "[sc_ap]",
          unitUC: "[SC_AP]",
          value: Decimal.fromString('3'),
          text: "3"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "dram - apothecary",
        "ʒ",
        "drachm",
        "apothecaries drams",
        "dr ap",
        "dram ap"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[oz_ap]",
      codeUC: "[OZ_AP]",
      value: Value(
          unit: "[dr_ap]",
          unitUC: "[DR_AP]",
          value: Decimal.fromString('8'),
          text: "8"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "ounce - apothecary",
        "apothecary ounces",
        "oz ap",
        "ap ozs",
        "ozs ap"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[lb_ap]",
      codeUC: "[LB_AP]",
      value: Value(
          unit: "[oz_ap]",
          unitUC: "[OZ_AP]",
          value: Decimal.fromString('12'),
          text: "12"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "pound - apothecary",
        "apothecary pounds",
        "apothecaries pounds",
        "ap lb",
        "lb ap",
        "ap lbs",
        "lbs ap"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[oz_m]",
      codeUC: "[OZ_M]",
      value: Value(
          unit: "g", unitUC: "g", value: Decimal.fromString('28'), text: "28"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["ounce - metric", "metric ounces", "m ozs"],
      printSymbol: null),
  DefinedUnit(
      code: "[lne]",
      codeUC: "[LNE]",
      value: Value(
          unit: "[in_i]/12",
          unitUC: "[IN_I]/12",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["line", "British lines", "br L", "L", "l"],
      printSymbol: null),
  DefinedUnit(
      code: "[pnt]",
      codeUC: "[PNT]",
      value: Value(
          unit: "[lne]/6",
          unitUC: "[LNE]/6",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "point (typography)",
        "DTP points",
        "desktop publishing point",
        "pt",
        "pnt"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[pca]",
      codeUC: "[PCA]",
      value: Value(
          unit: "[pnt]",
          unitUC: "[PNT]",
          value: Decimal.fromString('12'),
          text: "12"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["pica (typography)", "picas"],
      printSymbol: null),
  DefinedUnit(
      code: "[pnt_pr]",
      codeUC: "[PNT_PR]",
      value: Value(
          unit: "[in_i]",
          unitUC: "[IN_I]",
          value: Decimal.fromString('0.013837'),
          text: "0.013837"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["Printer's point (typography)", "pnt pr"],
      printSymbol: null),
  DefinedUnit(
      code: "[pca_pr]",
      codeUC: "[PCA_PR]",
      value: Value(
          unit: "[pnt_pr]",
          unitUC: "[PNT_PR]",
          value: Decimal.fromString('12'),
          text: "12"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["Printer's pica  (typography)", "pca pr", "Printer's picas"],
      printSymbol: null),
  DefinedUnit(
      code: "[pied]",
      codeUC: "[PIED]",
      value: Value(
          unit: 'cm',
          unitUC: "CM",
          value: Decimal.fromString('32.48'),
          text: "32.48"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["pied", "pieds du roi", "Paris foot", "royal", "French", "feet"],
      printSymbol: null),
  DefinedUnit(
      code: "[pouce]",
      codeUC: "[POUCE]",
      value: Value(
          unit: "[pied]/12",
          unitUC: "[PIED]/12",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["pouce", "historical French inches", "French royal inches"],
      printSymbol: null),
  DefinedUnit(
      code: "[ligne]",
      codeUC: "[LIGNE]",
      value: Value(
          unit: "[pouce]/12",
          unitUC: "[POUCE]/12",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["ligne", "Paris lines", "lignes"],
      printSymbol: null),
  DefinedUnit(
      code: "[didot]",
      codeUC: "[DIDOT]",
      value: Value(
          unit: "[ligne]/6",
          unitUC: "[LIGNE]/6",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["didot", "Didot point", "dd", "Didots Point", "didots", "points"],
      printSymbol: null),
  DefinedUnit(
      code: "[cicero]",
      codeUC: "[CICERO]",
      value: Value(
          unit: "[didot]",
          unitUC: "[DIDOT]",
          value: Decimal.fromString('12'),
          text: "12"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["cicero", "Didot's pica", "ciceros", "picas"],
      printSymbol: null),
  DefinedUnit(
      code: "[degF]",
      codeUC: "[DEGF]",
      value: Value(unit: 'K', unitUC: null, value: null, text: null),
      property: "temperature",
      isMetric: false,
      isSpecial: true,
      class_: null,
      names: ["degrees Fahrenheit", "°F", "deg F"],
      printSymbol: "°F"),
  DefinedUnit(
      code: "[degR]",
      codeUC: "[degR]",
      value: Value(
          unit: "K/9",
          unitUC: "K/9",
          value: Decimal.fromString('5'),
          text: "5"),
      property: "temperature",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["degrees Rankine", "°R", "°Ra", "Rankine"],
      printSymbol: "°R"),
  DefinedUnit(
      code: "[degRe]",
      codeUC: "[degRe]",
      value: Value(unit: 'K', unitUC: null, value: null, text: null),
      property: "temperature",
      isMetric: false,
      isSpecial: true,
      class_: null,
      names: [
        "degrees Réaumur",
        "°Ré, °Re, °r",
        "Réaumur",
        "degree Reaumur",
        "Reaumur"
      ],
      printSymbol: "°Ré"),
  DefinedUnit(
      code: "cal_[15]",
      codeUC: "CAL_[15]",
      value: Value(
          unit: 'J',
          unitUC: "J",
          value: Decimal.fromString('4.1858'),
          text: "4.1858"),
      property: "energy",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "calorie at 15°C",
        "calorie 15 C",
        "cals 15 C",
        "calories at 15 C"
      ],
      printSymbol: "cal<sub>15°C</sub>"),
  DefinedUnit(
      code: "cal_[20]",
      codeUC: "CAL_[20]",
      value: Value(
          unit: 'J',
          unitUC: "J",
          value: Decimal.fromString('4.1819'),
          text: "4.1819"),
      property: "energy",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "calorie at 20°C",
        "calorie 20 C",
        "cal 20 C",
        "calories at 20 C"
      ],
      printSymbol: "cal<sub>20°C</sub>"),
  DefinedUnit(
      code: "cal_m",
      codeUC: "CAL_M",
      value: Value(
          unit: "J",
          unitUC: "J",
          value: Decimal.fromString('4.19002'),
          text: "4.19002"),
      property: "energy",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["mean calorie", "mean cals", "mean calories"],
      printSymbol: "cal<sub>m</sub>"),
  DefinedUnit(
      code: "cal_IT",
      codeUC: "CAL_IT",
      value: Value(
          unit: 'J',
          unitUC: "J",
          value: Decimal.fromString('4.1868'),
          text: "4.1868"),
      property: "energy",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "international table calorie",
        "calories IT",
        "IT cals",
        "international steam table calories"
      ],
      printSymbol: "cal<sub>IT</sub>"),
  DefinedUnit(
      code: "cal_th",
      codeUC: "CAL_TH",
      value: Value(
          unit: 'J',
          unitUC: "J",
          value: Decimal.fromString('4.184'),
          text: "4.184"),
      property: "energy",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["thermochemical calorie", "thermochemical calories", "th cals"],
      printSymbol: "cal<sub>th</sub>"),
  DefinedUnit(
      code: "cal",
      codeUC: "CAL",
      value: Value(
          unit: "cal_th",
          unitUC: "CAL_TH",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "energy",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["calorie", "gram calories", "small calories"],
      printSymbol: "cal"),
  DefinedUnit(
      code: "[Cal]",
      codeUC: "[CAL]",
      value: Value(
          unit: "kcal_th",
          unitUC: "KCAL_TH",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "energy",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["nutrition label Calories", "food calories", "Cal", "kcal"],
      printSymbol: "Cal"),
  DefinedUnit(
      code: "[Btu_39]",
      codeUC: "[BTU_39]",
      value: Value(
          unit: "kJ",
          unitUC: "kJ",
          value: Decimal.fromString('1.05967'),
          text: "1.05967"),
      property: "energy",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "British thermal unit at 39°F",
        "BTU 39F",
        "BTU 39 F",
        "B.T.U. 39 F",
        "B.Th.U. 39 F",
        "BThU 39 F",
        "British thermal units"
      ],
      printSymbol: "Btu<sub>39°F</sub>"),
  DefinedUnit(
      code: "[Btu_59]",
      codeUC: "[BTU_59]",
      value: Value(
          unit: "kJ",
          unitUC: "kJ",
          value: Decimal.fromString('1.0548'),
          text: "1.0548"),
      property: "energy",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "British thermal unit at 59°F",
        "BTU 59 F",
        "BTU 59F",
        "B.T.U. 59 F",
        "B.Th.U. 59 F",
        "BThU 59F",
        "British thermal units"
      ],
      printSymbol: "Btu<sub>59°F</sub>"),
  DefinedUnit(
      code: "[Btu_60]",
      codeUC: "[BTU_60]",
      value: Value(
          unit: "kJ",
          unitUC: "kJ",
          value: Decimal.fromString('1.05468'),
          text: "1.05468"),
      property: "energy",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "British thermal unit at 60°F",
        "BTU 60 F",
        "BTU 60F",
        "B.T.U. 60 F",
        "B.Th.U. 60 F",
        "BThU 60 F",
        "British thermal units 60 F"
      ],
      printSymbol: "Btu<sub>60°F</sub>"),
  DefinedUnit(
      code: "[Btu_m]",
      codeUC: "[BTU_M]",
      value: Value(
          unit: "kJ",
          unitUC: "kJ",
          value: Decimal.fromString('1.05587'),
          text: "1.05587"),
      property: "energy",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "mean British thermal unit",
        "BTU mean",
        "B.T.U. mean",
        "B.Th.U. mean",
        "BThU mean",
        "British thermal units mean",
        ""
      ],
      printSymbol: "Btu<sub>m</sub>"),
  DefinedUnit(
      code: "[Btu_IT]",
      codeUC: "[BTU_IT]",
      value: Value(
          unit: "kJ",
          unitUC: "kJ",
          value: Decimal.fromString('1.05505585262'),
          text: "1.05505585262"),
      property: "energy",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "international table British thermal unit",
        "BTU IT",
        "B.T.U. IT",
        "B.Th.U. IT",
        "BThU IT",
        "British thermal units IT"
      ],
      printSymbol: "Btu<sub>IT</sub>"),
  DefinedUnit(
      code: "[Btu_th]",
      codeUC: "[BTU_TH]",
      value: Value(
          unit: "kJ",
          unitUC: "kJ",
          value: Decimal.fromString('1.05435'),
          text: "1.05435"),
      property: "energy",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "thermochemical British thermal unit",
        "BTU Th",
        "B.T.U. Th",
        "B.Th.U. Th",
        "BThU Th",
        "thermochemical British thermal units"
      ],
      printSymbol: "Btu<sub>th</sub>"),
  DefinedUnit(
      code: "[Btu]",
      codeUC: "[BTU]",
      value: Value(
          unit: "[Btu_th]",
          unitUC: "[BTU_TH]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "energy",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "British thermal unit",
        "BTU",
        "B.T.U.",
        "B.Th.U.",
        "BThU",
        "British thermal units"
      ],
      printSymbol: "btu"),
  DefinedUnit(
      code: "[HP]",
      codeUC: "[HP]",
      value: Value(
          unit: "[ft_i].[lbf_av]/s",
          unitUC: "[FT_I].[LBF_AV]/S",
          value: Decimal.fromString('550'),
          text: "550"),
      property: "power",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["horsepower - mechanical", "imperial horsepowers"],
      printSymbol: null),
  DefinedUnit(
      code: "tex",
      codeUC: "TEX",
      value: Value(
          unit: "g/km",
          unitUC: "G/KM",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "linear mass density (of textile thread)",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["tex", "linear mass density", "texes"],
      printSymbol: "tex"),
  DefinedUnit(
      code: "[den]",
      codeUC: "[DEN]",
      value: Value(
          unit: "g/9/km",
          unitUC: "G/9/KM",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "linear mass density (of textile thread)",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["Denier (linear mass density)", "den", "deniers"],
      printSymbol: "den"),
  DefinedUnit(
      code: "m[H2O]",
      codeUC: "M[H2O]",
      value: Value(
          unit: "kPa",
          unitUC: "KPAL",
          value: Decimal.fromString('9.80665'),
          text: "9.80665"),
      property: "pressure",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "meter of water column",
        "mH2O",
        "m H2O",
        "meters of water column",
        "metres",
        "pressure"
      ],
      printSymbol: "m HO<sub><r>2</r></sub>"),
  DefinedUnit(
      code: "m[Hg]",
      codeUC: "M[HG]",
      value: Value(
          unit: "kPa",
          unitUC: "KPAL",
          value: Decimal.fromString('133.322'),
          text: "133.322"),
      property: "pressure",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "meter of mercury column",
        "mHg",
        "m Hg",
        "meters of mercury column",
        "metres",
        "pressure"
      ],
      printSymbol: "m Hg"),
  DefinedUnit(
      code: "[in_i'H2O]",
      codeUC: "[IN_I'H2O]",
      value: Value(
          unit: "m[H2O].[in_i]/m",
          unitUC: "M[H2O].[IN_I]/M",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "pressure",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "inch of water column",
        "inches WC",
        "inAq",
        "in H2O",
        "inch of water gauge",
        "iwg",
        "pressure"
      ],
      printSymbol: "in HO<sub><r>2</r></sub>"),
  DefinedUnit(
      code: "[in_i'Hg]",
      codeUC: "[IN_I'HG]",
      value: Value(
          unit: "m[Hg].[in_i]/m",
          unitUC: "M[HG].[IN_I]/M",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "pressure",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["inch of mercury column", "inHg", "in Hg", "pressure", "inches"],
      printSymbol: "in Hg"),
  DefinedUnit(
      code: "[PRU]",
      codeUC: "[PRU]",
      value: Value(
          unit: "mm[Hg].s/ml",
          unitUC: "MM[HG].S/ML",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "fluid resistance",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "peripheral vascular resistance unit",
        "peripheral vascular resistance units",
        "peripheral resistance unit",
        "peripheral resistance units",
        "PRU"
      ],
      printSymbol: "P.R.U."),
  DefinedUnit(
      code: "[wood'U]",
      codeUC: "[WOOD'U]",
      value: Value(
          unit: "mm[Hg].min/L",
          unitUC: "MM[HG].MIN/L",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "fluid resistance",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "Wood unit",
        "hybrid reference units",
        "HRU",
        "mmHg.min/L",
        "vascular resistance"
      ],
      printSymbol: "Wood U."),
  DefinedUnit(
      code: "[diop]",
      codeUC: "[DIOP]",
      value: Value(
          unit: "m", unitUC: "/M", value: Decimal.fromString('1'), text: "1"),
      property: "refraction of a lens",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "diopter (lens)",
        "diopters",
        "diop",
        "dioptre",
        "dpt",
        "refractive power"
      ],
      printSymbol: "dpt"),
  DefinedUnit(
      code: "[p'diop]",
      codeUC: "[P'DIOP]",
      value: Value(unit: 'rad', unitUC: null, value: null, text: null),
      property: "refraction of a prism",
      isMetric: false,
      isSpecial: true,
      class_: null,
      names: [
        "prism diopter (magnifying power)",
        "diopters",
        "dioptres",
        "p diops",
        "pdiop",
        "dpt",
        "pdptr",
        "Δ",
        "cm/m",
        "centimeter per meter",
        "centimetre",
        "metre"
      ],
      printSymbol: "PD"),
  DefinedUnit(
      code: "%[slope]",
      codeUC: "%[SLOPE]",
      value: Value(unit: 'deg', unitUC: null, value: null, text: null),
      property: "slope",
      isMetric: false,
      isSpecial: true,
      class_: null,
      names: ["percent of slope", "% slope", "%slope", "percents slopes"],
      printSymbol: "%"),
  DefinedUnit(
      code: "[mesh_i]",
      codeUC: "[MESH_I]",
      value: Value(
          unit: "[in_i]",
          unitUC: "/[IN_I]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "lineic number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["mesh", "meshes"],
      printSymbol: null),
  DefinedUnit(
      code: "[Ch]",
      codeUC: "[CH]",
      value: Value(
          unit: "mm/3",
          unitUC: "MM/3",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "gauge of catheters",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "French (catheter gauge) ",
        "Charrières, French scales",
        "French gauges",
        "Fr, Fg, Ga, FR, Ch"
      ],
      printSymbol: "Ch"),
  DefinedUnit(
      code: "[drp]",
      codeUC: "[DRP]",
      value: Value(
          unit: "ml/20",
          unitUC: "ML/20",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "volume",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "drop - metric (1/20 mL)",
        "drop dosing units",
        "metric drops",
        "gtt"
      ],
      printSymbol: "drp"),
  DefinedUnit(
      code: "[hnsf'U]",
      codeUC: "[HNSF'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "x-ray attenuation",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["Hounsfield unit", "HU", "units"],
      printSymbol: "HF"),
  DefinedUnit(
      code: "[MET]",
      codeUC: "[MET]",
      value: Value(
          unit: "mL/min/kg",
          unitUC: "ML/MIN/KG",
          value: Decimal.fromString('3.5'),
          text: "3.5"),
      property: "metabolic cost of physical activity",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["Metabolic Equivalent of Task ", "metabolic equivalents"],
      printSymbol: "MET"),
  DefinedUnit(
      code: "[hp'_X]",
      codeUC: "[HP'_X]",
      value: Value(unit: '1', unitUC: null, value: null, text: null),
      property: "homeopathic potency (retired)",
      isMetric: false,
      isSpecial: true,
      class_: null,
      names: ["homeopathic potency of decimal series (retired)"],
      printSymbol: "X"),
  DefinedUnit(
      code: "[hp'_C]",
      codeUC: "[HP'_C]",
      value: Value(unit: '1', unitUC: null, value: null, text: null),
      property: "homeopathic potency (retired)",
      isMetric: false,
      isSpecial: true,
      class_: null,
      names: ["homeopathic potency of centesimal series (retired)"],
      printSymbol: "C"),
  DefinedUnit(
      code: "[hp'_M]",
      codeUC: "[HP'_M]",
      value: Value(unit: '1', unitUC: null, value: null, text: null),
      property: "homeopathic potency (retired)",
      isMetric: false,
      isSpecial: true,
      class_: null,
      names: ["homeopathic potency of millesimal series (retired)"],
      printSymbol: "M"),
  DefinedUnit(
      code: "[hp'_Q]",
      codeUC: "[HP'_Q]",
      value: Value(unit: '1', unitUC: null, value: null, text: null),
      property: "homeopathic potency (retired)",
      isMetric: false,
      isSpecial: true,
      class_: null,
      names: ["homeopathic potency of quintamillesimal series (retired)"],
      printSymbol: "Q"),
  DefinedUnit(
      code: "[hp_X]",
      codeUC: "[HP_X]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "homeopathic potency (Hahnemann)",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["homeopathic potency of decimal hahnemannian series"],
      printSymbol: "X"),
  DefinedUnit(
      code: "[hp_C]",
      codeUC: "[HP_C]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "homeopathic potency (Hahnemann)",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["homeopathic potency of centesimal hahnemannian series"],
      printSymbol: "C"),
  DefinedUnit(
      code: "[hp_M]",
      codeUC: "[HP_M]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "homeopathic potency (Hahnemann)",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["homeopathic potency of millesimal hahnemannian series"],
      printSymbol: "M"),
  DefinedUnit(
      code: "[hp_Q]",
      codeUC: "[HP_Q]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "homeopathic potency (Hahnemann)",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["homeopathic potency of quintamillesimal hahnemannian series"],
      printSymbol: "Q"),
  DefinedUnit(
      code: "[kp_X]",
      codeUC: "[KP_X]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "homeopathic potency (Korsakov)",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["homeopathic potency of decimal korsakovian series"],
      printSymbol: "X"),
  DefinedUnit(
      code: "[kp_C]",
      codeUC: "[KP_C]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "homeopathic potency (Korsakov)",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["homeopathic potency of centesimal korsakovian series"],
      printSymbol: "C"),
  DefinedUnit(
      code: "[kp_M]",
      codeUC: "[KP_M]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "homeopathic potency (Korsakov)",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["homeopathic potency of millesimal korsakovian series"],
      printSymbol: "M"),
  DefinedUnit(
      code: "[kp_Q]",
      codeUC: "[KP_Q]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "homeopathic potency (Korsakov)",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["homeopathic potency of quintamillesimal korsakovian series"],
      printSymbol: "Q"),
  DefinedUnit(
      code: "eq",
      codeUC: "EQ",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["equivalent", "equivalents"],
      printSymbol: "eq"),
  DefinedUnit(
      code: "osm",
      codeUC: "OSM",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance (dissolved particles)",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["osmole", "osmoles", "osmols"],
      printSymbol: "osm"),
  DefinedUnit(
      code: "[pH]",
      codeUC: "[PH]",
      value: Value(unit: 'mol/l', unitUC: null, value: null, text: null),
      property: "acidity",
      isMetric: false,
      isSpecial: true,
      class_: null,
      names: ["pH", "pH scale"],
      printSymbol: "pH"),
  DefinedUnit(
      code: "g%",
      codeUC: "G%",
      value: Value(
          unit: "g/dl",
          unitUC: "G/DL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "mass concentration",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "gram percent",
        "gram %",
        "gram%",
        "grams per deciliter",
        "g/dL",
        "gm per dL",
        "gram percents"
      ],
      printSymbol: "g%"),
  DefinedUnit(
      code: "[S]",
      codeUC: "[S]",
      value: Value(
          unit: "s",
          unitUC: "10*-13.S",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "sedimentation coefficient",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "Svedberg unit",
        "Sv",
        "10^-13 seconds",
        "100 fs",
        "100 femtoseconds"
      ],
      printSymbol: "S"),
  DefinedUnit(
      code: "[HPF]",
      codeUC: "[HPF]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "view area in microscope",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["high power field (microscope)", "HPF"],
      printSymbol: "HPF"),
  DefinedUnit(
      code: "[LPF]",
      codeUC: "[LPF]",
      value: Value(
          unit: "1",
          unitUC: "1",
          value: Decimal.fromString('100'),
          text: "100"),
      property: "view area in microscope",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["low power field (microscope)", "LPF", "fields"],
      printSymbol: "LPF"),
  DefinedUnit(
      code: "kat",
      codeUC: "KAT",
      value: Value(
          unit: "mol/s",
          unitUC: "MOL/S",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "katal",
        "mol/secs",
        "moles per second",
        "mol*sec-1",
        "mol*s-1",
        "mol.s-1",
        "katals",
        "catalytic activity",
        "enzymatic",
        "enzyme units",
        "activities"
      ],
      printSymbol: "kat"),
  DefinedUnit(
      code: "U",
      codeUC: "U",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit",
        "micromoles per minute",
        "umol/min",
        "umol per minute",
        "umol min-1",
        "enzymatic activity",
        "enzyme activity"
      ],
      printSymbol: "U"),
  DefinedUnit(
      code: "[iU]",
      codeUC: "[IU]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "international unit - arbitrary",
        "international units",
        "IE",
        "F2"
      ],
      printSymbol: "IU"),
  DefinedUnit(
      code: "[IU]",
      codeUC: "[IU]",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "international unit - arbitrary",
        "international units",
        "IE",
        "F2"
      ],
      printSymbol: "i.U."),
  DefinedUnit(
      code: "[arb'U]",
      codeUC: "[ARB'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "arbitrary",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["arbitary unit", "arbitary units", "arb units", "arbU"],
      printSymbol: "arb. U"),
  DefinedUnit(
      code: "[USP'U]",
      codeUC: "[USP'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "arbitrary",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["United States Pharmacopeia unit", "USP U", "USP'U"],
      printSymbol: "U.S.P."),
  DefinedUnit(
      code: "[GPL'U]",
      codeUC: "[GPL'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "biologic activity of anticardiolipin IgG",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "GPL unit",
        "GPL Units",
        "GPL U",
        "IgG anticardiolipin units",
        "IgG Phospholipid"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[MPL'U]",
      codeUC: "[MPL'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "biologic activity of anticardiolipin IgM",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "MPL unit",
        "MPL units",
        "MPL U",
        "MPL'U",
        "IgM anticardiolipin units",
        "IgM Phospholipid Units"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[APL'U]",
      codeUC: "[APL'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "biologic activity of anticardiolipin IgA",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "APL unit",
        "APL units",
        "APL U",
        "IgA anticardiolipin",
        "IgA Phospholipid",
        "biologic activity of"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[beth'U]",
      codeUC: "[BETH'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "biologic activity of factor VIII inhibitor",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["Bethesda unit", "BU"],
      printSymbol: null),
  DefinedUnit(
      code: "[anti'Xa'U]",
      codeUC: "[ANTI'XA'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "biologic activity of factor Xa inhibitor (heparin)",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["anti factor Xa unit", "units"],
      printSymbol: null),
  DefinedUnit(
      code: "[todd'U]",
      codeUC: "[TODD'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "biologic activity antistreptolysin O",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["Todd unit", "units"],
      printSymbol: null),
  DefinedUnit(
      code: "[dye'U]",
      codeUC: "[DYE'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "biologic activity of amylase",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["Dye unit", "units"],
      printSymbol: null),
  DefinedUnit(
      code: "[smgy'U]",
      codeUC: "[SMGY'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "biologic activity of amylase",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["Somogyi unit", "Somogyi units", "smgy U"],
      printSymbol: null),
  DefinedUnit(
      code: "[bdsk'U]",
      codeUC: "[BDSK'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "biologic activity of phosphatase",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["Bodansky unit", ""],
      printSymbol: null),
  DefinedUnit(
      code: "[ka'U]",
      codeUC: "[KA'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "biologic activity of phosphatase",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["King-Armstrong unit", "King-Armstrong Units", "King units"],
      printSymbol: null),
  DefinedUnit(
      code: "[knk'U]",
      codeUC: "[KNK'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "arbitrary biologic activity",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["Kunkel unit"],
      printSymbol: null),
  DefinedUnit(
      code: "[mclg'U]",
      codeUC: "[MCLG'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "arbitrary biologic activity",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "Mac Lagan unit",
        "galactose index",
        "galactose tolerance test",
        "thymol turbidity test unit",
        "mclg U",
        "units",
        "indexes"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[tb'U]",
      codeUC: "[TB'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "biologic activity of tuberculin",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["tuberculin unit", "TU", "units"],
      printSymbol: null),
  DefinedUnit(
      code: "[CCID_50]",
      codeUC: "[CCID_50]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property:
          "biologic activity (infectivity) of an infectious agent preparation",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "50% cell culture infectious dose",
        "CCID50",
        "50% cell culture infective doses"
      ],
      printSymbol: "CCID<sub>50</sub>"),
  DefinedUnit(
      code: "[TCID_50]",
      codeUC: "[TCID_50]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property:
          "biologic activity (infectivity) of an infectious agent preparation",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "50% tissue culture infectious dose",
        "TCID50",
        "50% tissue culture infective dose"
      ],
      printSymbol: "TCID<sub>50</sub>"),
  DefinedUnit(
      code: "[EID_50]",
      codeUC: "[EID_50]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property:
          "biologic activity (infectivity) of an infectious agent preparation",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "50% embryo infectious dose",
        "EID50",
        "50% embryo infective doses",
        "EID50 Egg Infective Dosage"
      ],
      printSymbol: "EID<sub>50</sub>"),
  DefinedUnit(
      code: "[PFU]",
      codeUC: "[PFU]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "amount of an infectious agent",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["plaque forming units", "PFU"],
      printSymbol: "PFU"),
  DefinedUnit(
      code: "[FFU]",
      codeUC: "[FFU]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "amount of an infectious agent",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["focus forming units (cells)", "FFU"],
      printSymbol: "FFU"),
  DefinedUnit(
      code: "[CFU]",
      codeUC: "[CFU]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "amount of a proliferating organism",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["colony forming units", "CFU"],
      printSymbol: "CFU"),
  DefinedUnit(
      code: "[IR]",
      codeUC: "[IR]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property:
          "amount of an allergen callibrated through in-vivo testing using the Stallergenes® method.",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["index of reactivity (allergen)", "IR", "indexes"],
      printSymbol: "IR"),
  DefinedUnit(
      code: "[BAU]",
      codeUC: "[BAU]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property:
          "amount of an allergen callibrated through in-vivo testing based on the ID50EAL method of (intradermal dilution for 50mm sum of erythema diameters",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "bioequivalent allergen unit",
        "BAU",
        "Bioequivalent Allergy Units",
        "bioequivalent allergen units"
      ],
      printSymbol: "BAU"),
  DefinedUnit(
      code: "[AU]",
      codeUC: "[AU]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property:
          "procedure defined amount of an allergen using some reference standard",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["allergy unit", "allergy units", "allergen units", "AU"],
      printSymbol: "AU"),
  DefinedUnit(
      code: "[Amb'a'1'U]",
      codeUC: "[AMB'A'1'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "procedure defined amount of the major allergen of ragweed.",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "allergen unit for Ambrosia artemisiifolia",
        "Amb a 1 unit",
        "Antigen E",
        "AgE U",
        "allergen units"
      ],
      printSymbol: "Amb a 1 U"),
  DefinedUnit(
      code: "[PNU]",
      codeUC: "[PNU]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "procedure defined amount of a protein substance",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "protein nitrogen unit (allergen testing)",
        "protein nitrogen units",
        "PNU"
      ],
      printSymbol: "PNU"),
  DefinedUnit(
      code: "[Lf]",
      codeUC: "[LF]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "procedure defined amount of an antigen substance",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["Limit of flocculation", "Lf doses"],
      printSymbol: "Lf"),
  DefinedUnit(
      code: "[D'ag'U]",
      codeUC: "[D'AG'U]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property:
          "procedure defined amount of a poliomyelitis d-antigen substance",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["D-antigen unit (polio)", "DAgU", "units"],
      printSymbol: null),
  DefinedUnit(
      code: "[FEU]",
      codeUC: "[FEU]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "amount of fibrinogen broken down into the measured d-dimers",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["fibrinogen equivalent units", "FEU"],
      printSymbol: null),
  DefinedUnit(
      code: "[ELU]",
      codeUC: "[ELU]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "arbitrary ELISA unit",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "ELISA unit",
        "Enzyme-Linked Immunosorbent Assay Units",
        "ELU",
        "EL. U"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "[EU]",
      codeUC: "[EU]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "Ehrlich unit",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "Ehrlich units (urobilinogen)",
        "EU/dL",
        "mgDefinedUnit(urobilinogen)/dL"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "Np",
      codeUC: "NEP",
      value: Value(unit: '1', unitUC: null, value: null, text: null),
      property: "level",
      isMetric: true,
      isSpecial: true,
      class_: null,
      names: ["neper", "nepers"],
      printSymbol: "Np"),
  DefinedUnit(
      code: "B",
      codeUC: "B",
      value: Value(unit: '1', unitUC: null, value: null, text: null),
      property: "level",
      isMetric: true,
      isSpecial: true,
      class_: null,
      names: ["bel", "bels"],
      printSymbol: "B"),
  DefinedUnit(
      code: "B[SPL]",
      codeUC: "B[SPL]",
      value: Value(unit: 'Pa', unitUC: null, value: null, text: null),
      property: "pressure level",
      isMetric: true,
      isSpecial: true,
      class_: null,
      names: ["bel sound pressure", "bel SPL", "B SPL", "sound pressure bels"],
      printSymbol: "B(SPL)"),
  DefinedUnit(
      code: "B[V]",
      codeUC: "B[V]",
      value: Value(unit: 'V', unitUC: null, value: null, text: null),
      property: "electric potential level",
      isMetric: true,
      isSpecial: true,
      class_: null,
      names: ["bel volt", "bel V", "B V", "volts bels"],
      printSymbol: "B(V)"),
  DefinedUnit(
      code: "B[mV]",
      codeUC: "B[MV]",
      value: Value(unit: 'mV', unitUC: null, value: null, text: null),
      property: "electric potential level",
      isMetric: true,
      isSpecial: true,
      class_: null,
      names: [
        "bel millivolt",
        "bel mV",
        "B mV",
        "millivolt bels",
        "10^-3V bels",
        "10*-3V"
      ],
      printSymbol: "B(mV)"),
  DefinedUnit(
      code: "B[uV]",
      codeUC: "B[UV]",
      value: Value(unit: 'uV', unitUC: null, value: null, text: null),
      property: "electric potential level",
      isMetric: true,
      isSpecial: true,
      class_: null,
      names: [
        "bel microvolt",
        "bel uV",
        "B uV",
        "microvolts bels",
        "10^-6V bel",
        "10*-6V bel"
      ],
      printSymbol: "B(μV)"),
  DefinedUnit(
      code: "B[10.nV]",
      codeUC: "B[10.NV]",
      value: Value(unit: 'nV', unitUC: null, value: null, text: null),
      property: "electric potential level",
      isMetric: true,
      isSpecial: true,
      class_: null,
      names: ["bel 10 nanovolt", "bel 10 nV", "B 10 nV", "10 nanovolts bels"],
      printSymbol: "B(10 nV)"),
  DefinedUnit(
      code: "B[W]",
      codeUC: "B[W]",
      value: Value(unit: 'W', unitUC: null, value: null, text: null),
      property: "power level",
      isMetric: true,
      isSpecial: true,
      class_: null,
      names: ["bel watt", "bel W", "b W", "b Watt", "Watts bels"],
      printSymbol: "B(W)"),
  DefinedUnit(
      code: "B[kW]",
      codeUC: "B[KW]",
      value: Value(unit: 'kW', unitUC: null, value: null, text: null),
      property: "power level",
      isMetric: true,
      isSpecial: true,
      class_: null,
      names: [
        "bel kilowatt",
        "bel kW",
        "B kW",
        "kilowatt bel",
        "kW bel",
        "kW B"
      ],
      printSymbol: "B(kW)"),
  DefinedUnit(
      code: "st",
      codeUC: "STR",
      value: Value(
          unit: "m3", unitUC: "M3", value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "stere",
        "stère",
        "m3",
        "cubic meter",
        "m^3",
        "meters cubed",
        "metre"
      ],
      printSymbol: "st"),
  DefinedUnit(
      code: "Ao",
      codeUC: "AO",
      value: Value(
          unit: 'nm',
          unitUC: "NM",
          value: Decimal.fromString('0.1'),
          text: "0.1"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["Ångström", "Å", "Angstroms", "Ao", "Ångströms"],
      printSymbol: "Å"),
  DefinedUnit(
      code: "b",
      codeUC: "BRN",
      value: Value(
          unit: "fm2",
          unitUC: "FM2",
          value: Decimal.fromString('100'),
          text: "100"),
      property: "action area",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["barn", "barns"],
      printSymbol: "b"),
  DefinedUnit(
      code: "att",
      codeUC: "ATT",
      value: Value(
          unit: "kgf/cm2",
          unitUC: "KGF/CM2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "pressure",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "technical atmosphere",
        "at",
        "tech atm",
        "tech atmosphere",
        "kgf/cm2",
        "atms",
        "atmospheres"
      ],
      printSymbol: "at"),
  DefinedUnit(
      code: "mho",
      codeUC: "MHO",
      value: Value(
          unit: "S", unitUC: "S", value: Decimal.fromString('1'), text: "1"),
      property: "electric conductance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["mho", "siemens", "ohm reciprocals", "Ω^−1", "Ω-1"],
      printSymbol: "mho"),
  DefinedUnit(
      code: "[psi]",
      codeUC: "[PSI]",
      value: Value(
          unit: "[lbf_av]/[in_i]2",
          unitUC: "[LBF_AV]/[IN_I]2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "pressure",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["pound per square inch", "psi", "lb/in2", "lb per in2"],
      printSymbol: "psi"),
  DefinedUnit(
      code: "circ",
      codeUC: "CIRC",
      value: Value(
          unit: "[pi].rad",
          unitUC: "[PI].RAD",
          value: Decimal.fromString('2'),
          text: "2"),
      property: "plane angle",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["circle - plane angle", "angles", "circles"],
      printSymbol: "circ"),
  DefinedUnit(
      code: "sph",
      codeUC: "SPH",
      value: Value(
          unit: "[pi].sr",
          unitUC: "[PI].SR",
          value: Decimal.fromString('4'),
          text: "4"),
      property: "solid angle",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["spere - solid angle", "speres"],
      printSymbol: "sph"),
  DefinedUnit(
      code: "[car_m]",
      codeUC: "[CAR_M]",
      value: Value(
          unit: 'g',
          unitUC: "G",
          value: Decimal.fromString('0.2'),
          text: "0.2"),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["metric carat", "carats", "ct", "car m"],
      printSymbol: "ct<sub>m</sub>"),
  DefinedUnit(
      code: "[car_Au]",
      codeUC: "[CAR_AU]",
      value: Value(
          unit: "/24",
          unitUC: "/24",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "mass fraction",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["carat of gold alloys", "karats", "k", "kt", "car au", "carats"],
      printSymbol: "ct<sub><r>Au</r></sub>"),
  DefinedUnit(
      code: "[smoot]",
      codeUC: "[SMOOT]",
      value: Value(
          unit: "[in_i]",
          unitUC: "[IN_I]",
          value: Decimal.fromString('67'),
          text: "67"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["Smoot", ""],
      printSymbol: null),
  DefinedUnit(
      code: "[m/s2/Hz^(1/2)]",
      codeUC: "[M/S2/HZ^(1/2)]",
      value: Value(unit: "m2/s4/Hz", unitUC: null, value: null, text: null),
      property: "amplitude spectral density",
      isMetric: false,
      isSpecial: true,
      class_: null,
      names: [
        "meter per square seconds per square root of hertz",
        "m/s2/(Hz^.5)",
        "m/s2/(Hz^(1/2))",
        "m per s2 per Hz^1/2"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "bit_s",
      codeUC: "BIT_S",
      value: Value(unit: '1', unitUC: null, value: null, text: null),
      property: "amount of information",
      isMetric: false,
      isSpecial: true,
      class_: null,
      names: ["bit - logarithmic", "bit-s", "bit s", "bit logarithmic"],
      printSymbol: "bit<sub>s</sub>"),
  DefinedUnit(
      code: "bit",
      codeUC: "BIT",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "amount of information",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["bit", "bits"],
      printSymbol: "bit"),
  DefinedUnit(
      code: "By",
      codeUC: "BY",
      value: Value(
          unit: "bit",
          unitUC: "bit",
          value: Decimal.fromString('8'),
          text: "8"),
      property: "amount of information",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["byte", "bytes"],
      printSymbol: "B"),
  DefinedUnit(
      code: "Bd",
      codeUC: "BD",
      value: Value(
          unit: "s", unitUC: "/s", value: Decimal.fromString('1'), text: "1"),
      property: "signal transmission rate",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["baud", "Bd", "bauds"],
      printSymbol: "Bd"),
  DefinedUnit(
      code: "/(12.h)",
      codeUC: "/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per twelve hour", "per 12 hours", "12hrs", "12 hrs", "/12hrs"],
      printSymbol: "/h"),
  DefinedUnit(
      code: "/[arb'U]",
      codeUC: "/[ARB'U]",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per arbitrary unit", "/arbU"],
      printSymbol: "/arb/ U"),
  DefinedUnit(
      code: "/[HPF]",
      codeUC: "/[HPF]",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per high power field", "/HPF", "per HPF"],
      printSymbol: "/HPF"),
  DefinedUnit(
      code: "/[IU]",
      codeUC: "/[IU]",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per international unit", "international units", "/IU", "per IU"],
      printSymbol: "/i/U."),
  DefinedUnit(
      code: "/[LPF]",
      codeUC: "/[LPF]",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per low power field", "/LPF", "per LPF"],
      printSymbol: "/LPF"),
  DefinedUnit(
      code: "/10*10",
      codeUC: "/10*10",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per 10 billion  ", "/10^10", "per 10*10"],
      printSymbol: "/10<sup>10<.sup>"),
  DefinedUnit(
      code: "/10*12",
      codeUC: "/10*12",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per trillion ", "/10^12", "per 10*12"],
      printSymbol: "/10<sup>12<.sup>"),
  DefinedUnit(
      code: "/10*3",
      codeUC: "/10*3",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per thousand", "/10^3", "per 10*3"],
      printSymbol: "/10<sup>3<.sup>"),
  DefinedUnit(
      code: "/10*6",
      codeUC: "/10*6",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per million", "/10^6", "per 10*6", ""],
      printSymbol: "/10<sup>6<.sup>"),
  DefinedUnit(
      code: "/10*9",
      codeUC: "/10*9",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per billion", "/10^9", "per 10*9"],
      printSymbol: "/10<sup>9<.sup>"),
  DefinedUnit(
      code: "/100",
      codeUC: "",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per 100", "per hundred", "10^2", "10*2"],
      printSymbol: null),
  DefinedUnit(
      code: "/100DefinedUnit(cells)",
      codeUC: "",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per 100 cells", "/100 cells", "/100cells", "per hundred"],
      printSymbol: null),
  DefinedUnit(
      code: "/100DefinedUnit(neutrophils)",
      codeUC: "",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "per 100 neutrophils",
        "/100 neutrophils",
        "/100neutrophils",
        "per hundred"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "/100DefinedUnit(spermatozoa)",
      codeUC: "",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "per 100 spermatozoa",
        "/100 spermatozoa",
        "/100spermatozoa",
        "per hundred"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "/100DefinedUnit(WBCs)",
      codeUC: "",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "per 100 white blood cells",
        "/100 WBCs",
        "/100WBCs",
        "per hundred"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "/a",
      codeUC: "/ANN",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per year", "/Years", "/yrs", "yearly"],
      printSymbol: "/a"),
  DefinedUnit(
      code: "/cm[H2O]",
      codeUC: "/CM[H2O]",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "per centimeter of water",
        "/cmH2O",
        "/cm H2O",
        "centimeters",
        "centimetres"
      ],
      printSymbol: "/cm HO<sub><r>2<.r></sub>"),
  DefinedUnit(
      code: "/d",
      codeUC: "/D",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per day", "/dy", "per day"],
      printSymbol: "/d"),
  DefinedUnit(
      code: "/dL",
      codeUC: "/DL",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per deciliter", "per dL", "/deciliter", "decilitre"],
      printSymbol: "/dL"),
  DefinedUnit(
      code: "/g",
      codeUC: "/G",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per gram", "/gm", "/gram", "per g"],
      printSymbol: "/g"),
  DefinedUnit(
      code: "/h",
      codeUC: "/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per hour", "/hr", "/hour", "per hr"],
      printSymbol: "/h"),
  DefinedUnit(
      code: "/kg",
      codeUC: "/KG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per kilogram", "per kg", "per kilogram"],
      printSymbol: "/kg"),
  DefinedUnit(
      code: "/L",
      codeUC: "/L",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per liter", "/liter", "litre"],
      printSymbol: "/L"),
  DefinedUnit(
      code: "/m2",
      codeUC: "/M2",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "per square meter",
        "/m^2",
        "/m*2",
        "/sq. m",
        "per square meter",
        "meter squared",
        "metre"
      ],
      printSymbol: "/m<sup>2<.sup>"),
  DefinedUnit(
      code: "/m3",
      codeUC: "/M3",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "per cubic meter",
        "/m^3",
        "/m*3",
        "/cu. m",
        "per cubic meter",
        "meter cubed",
        "per m3",
        "metre"
      ],
      printSymbol: "/m<sup>3<.sup>"),
  DefinedUnit(
      code: "/mg",
      codeUC: "/MG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per milligram", "/milligram", "per mg"],
      printSymbol: "/mg"),
  DefinedUnit(
      code: "/min",
      codeUC: "/MIN",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per minute", "/minute", "per mins", "breaths beats per minute"],
      printSymbol: "/min"),
  DefinedUnit(
      code: "/mL",
      codeUC: "/ML",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per milliliter", "/milliliter", "per mL", "millilitre"],
      printSymbol: "/mL"),
  DefinedUnit(
      code: "/mm",
      codeUC: "/MM",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per millimeter", "/millimeter", "per mm", "millimetre"],
      printSymbol: "/mm"),
  DefinedUnit(
      code: "/mo",
      codeUC: "/MO",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per month", "/month", "per mo", "monthly", "month"],
      printSymbol: "/mo"),
  DefinedUnit(
      code: "/s",
      codeUC: "/S",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "per second",
        "/second",
        "/sec",
        "per sec",
        "frequency",
        "Hertz",
        "Herz",
        "Hz",
        "becquerels",
        "Bq",
        "s-1",
        "s^-1"
      ],
      printSymbol: "/s"),
  DefinedUnit(
      code: "/U",
      codeUC: "/U",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per enzyme unit", "/enzyme units", "per U"],
      printSymbol: "/U"),
  DefinedUnit(
      code: "/uL",
      codeUC: "/UL",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per microliter", "/microliter", "microlitre", "/mcl", "per uL"],
      printSymbol: "/μL"),
  DefinedUnit(
      code: "/wk",
      codeUC: "/WK",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["per week", "/week", "per wk", "weekly, weeks"],
      printSymbol: "/wk"),
  DefinedUnit(
      code: "[APL'U]/mL",
      codeUC: "[APL'U]/ML",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "biologic activity of anticardiolipin IgA",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "APL unit per milliliter",
        "APL/mL",
        "APL'U/mL",
        "APL U/mL",
        "APL/milliliter",
        "IgA anticardiolipin units per milliliter",
        "IgA Phospholipid Units",
        "millilitre",
        "biologic activity of"
      ],
      printSymbol: "/mL"),
  DefinedUnit(
      code: "[arb'U]/mL",
      codeUC: "[ARB'U]/ML",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "arbitrary",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "arbitrary unit per milliliter",
        "arb'U/mL",
        "arbU/mL",
        "arb U/mL",
        "arbitrary units per milliliter",
        "millilitre"
      ],
      printSymbol: "(arb. U)/mL"),
  DefinedUnit(
      code: "[CFU]/L",
      codeUC: "[CFU]/L",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "amount of a proliferating organism",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["colony forming units per liter", "CFU per Liter", "CFU/L"],
      printSymbol: "CFU/L"),
  DefinedUnit(
      code: "[CFU]/mL",
      codeUC: "[CFU]/ML",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "amount of a proliferating organism",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["colony forming units per milliliter", "CFU per mL", "CFU/mL"],
      printSymbol: "CFU/mL"),
  DefinedUnit(
      code: "[ft_us]/[ft_us]",
      codeUC: "[FT_US]/[FT_US]",
      value: Value(
          unit: "m/3937",
          unitUC: "M/3937",
          value: Decimal.fromString('1200'),
          text: "1200"),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "foot per foot - US",
        "ft/ft",
        "ft per ft",
        "feet per feet",
        "visual acuity"
      ],
      printSymbol: "(ft<sub>us</sub>)/(ft<sub>us</sub>)"),
  DefinedUnit(
      code: "[GPL'U]/mL",
      codeUC: "[GPL'U]/ML",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "biologic activity of anticardiolipin IgG",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "GPL unit per milliliter",
        "GPL U/mL",
        "GPL'U/mL",
        "GPL/mL",
        "GPL U per mL",
        "IgG Phospholipid Units per milliliters",
        "IgG anticardiolipin units",
        "millilitres"
      ],
      printSymbol: "/mL"),
  DefinedUnit(
      code: "[IU]/(2.h)",
      codeUC: "[IU]/HR",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "international unit per 2 hour",
        "IU/2hrs",
        "IU/2 hours",
        "IU per 2 hrs",
        "international units per 2 hours"
      ],
      printSymbol: "(i.U.)/h"),
  DefinedUnit(
      code: "[IU]/(24.h)",
      codeUC: "[IU]/HR",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "international unit per 24 hour",
        "IU/24hr",
        "IU/24 hours",
        "IU per 24 hrs",
        "international units per 24 hours"
      ],
      printSymbol: "(i.U.)/h"),
  DefinedUnit(
      code: "[IU]/d",
      codeUC: "[IU]/D",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "international unit per day",
        "IU/dy",
        "IU/days",
        "IU per dys",
        "international units per day"
      ],
      printSymbol: "(i.U.)/d"),
  DefinedUnit(
      code: "[IU]/dL",
      codeUC: "[IU]/DL",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "international unit per deciliter",
        "IU/dL",
        "IU per dL",
        "international units per deciliters",
        "decilitres"
      ],
      printSymbol: "(i.U.)/dL"),
  DefinedUnit(
      code: "[IU]/g",
      codeUC: "[IU]/G",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "international unit per gram",
        "IU/gm",
        "IU/gram",
        "IU per gm",
        "IU per g",
        "international units per gram"
      ],
      printSymbol: "(i.U.)/g"),
  DefinedUnit(
      code: "[IU]/h",
      codeUC: "[IU]/HR",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "international unit per hour",
        "IU/hrs",
        "IU per hours",
        "international units per hour"
      ],
      printSymbol: "(i.U.)/h"),
  DefinedUnit(
      code: "[IU]/kg",
      codeUC: "[IU]/KG",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "international unit per kilogram",
        "IU/kg",
        "IU/kilogram",
        "IU per kg",
        "units"
      ],
      printSymbol: "(i.U.)/kg"),
  DefinedUnit(
      code: "[IU]/kg/d",
      codeUC: "([IU]/KG)/D",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "international unit per kilogram per day",
        "IU/kg/dy",
        "IU/kg/day",
        "IU/kilogram/day",
        "IU per kg per day",
        "units"
      ],
      printSymbol: "((i.U.)/kg)/d"),
  DefinedUnit(
      code: "[IU]/L",
      codeUC: "[IU]/L",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "international unit per liter",
        "IU/L",
        "IU/liter",
        "IU per liter",
        "units",
        "litre"
      ],
      printSymbol: "(i.U.)/L"),
  DefinedUnit(
      code: "[IU]/min",
      codeUC: "[IU]/MIN",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "international unit per minute",
        "IU/min",
        "IU/minute",
        "IU per minute",
        "international units"
      ],
      printSymbol: "(i.U.)/min"),
  DefinedUnit(
      code: "[IU]/mL",
      codeUC: "[IU]/ML",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "international unit per milliliter",
        "IU/mL",
        "IU per mL",
        "international units per milliliter",
        "millilitre"
      ],
      printSymbol: "(i.U.)/mL"),
  DefinedUnit(
      code: "[MPL'U]/mL",
      codeUC: "[MPL'U]/ML",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('1'), text: "1"),
      property: "biologic activity of anticardiolipin IgM",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "MPL unit per milliliter",
        "MPL/mL",
        "MPL U/mL",
        "MPL'U/mL",
        "IgM anticardiolipin units",
        "IgM Phospholipid Units",
        "millilitre"
      ],
      printSymbol: "/mL"),
  DefinedUnit(
      code: "DefinedUnit(#)/[HPF]",
      codeUC: "/[HPF]",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "number per high power field",
        "#/HPF",
        "# per HPF",
        "number/HPF",
        "numbers per high power field"
      ],
      printSymbol: "/HPF"),
  DefinedUnit(
      code: "DefinedUnit(#)/[LPF]",
      codeUC: "/[LPF]",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "number per low power field",
        "#/LPF",
        "# per LPF",
        "number/LPF",
        "numbers per low power field"
      ],
      printSymbol: "/LPF"),
  DefinedUnit(
      code: "DefinedUnit(APS'U)",
      codeUC: "",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "IgA antiphosphatidylserine unit ",
        "APS Unit",
        "Phosphatidylserine Antibody IgA Units"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "DefinedUnit(EIA_index)",
      codeUC: "",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["EIA index", "enzyme immunoassay index"],
      printSymbol: null),
  DefinedUnit(
      code: "DefinedUnit(KCT'U)",
      codeUC: "",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["kaolin clotting time", "KCT"],
      printSymbol: null),
  DefinedUnit(
      code: "DefinedUnit(MPS'U)",
      codeUC: "",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "IgM antiphosphatidylserine unit",
        "Phosphatidylserine Antibody IgM Measurement"
      ],
      printSymbol: null),
  DefinedUnit(
      code: "10*12/L",
      codeUC: "(10*12)/L",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "trillion per liter",
        "10^12/L",
        "10*12 per Liter",
        "trillion per liter",
        "litre"
      ],
      printSymbol: "(10<sup>12</sup>)/L"),
  DefinedUnit(
      code: "10*3",
      codeUC: "10*3",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["10^3 (used for cell count)", "10^3", "thousand"],
      printSymbol: "10<sup>3</sup>"),
  DefinedUnit(
      code: "10*3/L",
      codeUC: "(10*3)/L",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["thousand per liter", "10^3/L", "10*3 per liter", "litre"],
      printSymbol: "(10<sup>3</sup>)/L"),
  DefinedUnit(
      code: "10*3/mL",
      codeUC: "(10*3)/ML",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "thousand per milliliter",
        "10^3/mL",
        "10*3 per mL",
        "thousand per milliliter",
        "millilitre"
      ],
      printSymbol: "(10<sup>3</sup>)/mL"),
  DefinedUnit(
      code: "10*3/uL",
      codeUC: "(10*3)/UL",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "thousand per microliter",
        "10^3/uL",
        "10*3 per uL",
        "thousand per microliter",
        "microlitre"
      ],
      printSymbol: "(10<sup>3</sup>)/μL"),
  DefinedUnit(
      code: "10*4/uL",
      codeUC: "(10*4)/UL",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "10 thousand per microliter",
        "10^4/uL",
        "10*4 per uL",
        "microlitre"
      ],
      printSymbol: "(10<sup>4</sup>)/μL"),
  DefinedUnit(
      code: "10*5",
      codeUC: "10*5",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["10^5 ", "one hundred thousand"],
      printSymbol: "10<sup>5</sup>"),
  DefinedUnit(
      code: "10*6",
      codeUC: "10*6",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["10^6", ""],
      printSymbol: "10<sup>6</sup>"),
  DefinedUnit(
      code: "10*6.[CFU]/L",
      codeUC: "((10*6).[CFU])/L",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "million colony forming unit per liter",
        "10*6 CFU/L",
        "10^6 CFU/L",
        "10^6CFU",
        "10^6 CFU per liter",
        "million colony forming units",
        "litre"
      ],
      printSymbol: "((10<sup>6</sup>).CFU)/L"),
  DefinedUnit(
      code: "10*6.[IU]",
      codeUC: "(10*6).[IU]",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "million international unit",
        "10*6 IU",
        "10^6 IU",
        "international units"
      ],
      printSymbol: "(10<sup>6</sup>).(i.U.)"),
  DefinedUnit(
      code: "10*6/(24.h)",
      codeUC: "(10*6)/HR",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "million per 24 hour",
        "10*6/24hrs",
        "10^6/24 hrs",
        "10*6 per 24 hrs",
        "10^6 per 24 hours"
      ],
      printSymbol: "(10<sup>6</sup>)/h"),
  DefinedUnit(
      code: "10*6/kg",
      codeUC: "(10*6)/KG",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "million per kilogram",
        "10^6/kg",
        "10*6 per kg",
        "10*6 per kilogram",
        "millions"
      ],
      printSymbol: "(10<sup>6</sup>)/kg"),
  DefinedUnit(
      code: "10*6/L",
      codeUC: "(10*6)/L",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "million per liter",
        "10^6/L",
        "10*6 per Liter",
        "10^6 per Liter",
        "litre"
      ],
      printSymbol: "(10<sup>6</sup>)/L"),
  DefinedUnit(
      code: "10*6/mL",
      codeUC: "(10*6)/ML",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "million per milliliter",
        "10^6/mL",
        "10*6 per mL",
        "10*6 per milliliter",
        "millilitre"
      ],
      printSymbol: "(10<sup>6</sup>)/mL"),
  DefinedUnit(
      code: "10*6/uL",
      codeUC: "(10*6)/UL",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "million per microliter",
        "10^6/uL",
        "10^6 per uL",
        "10^6/mcl",
        "10^6 per mcl",
        "10^6 per microliter",
        "microlitre"
      ],
      printSymbol: "(10<sup>6</sup>)/μL"),
  DefinedUnit(
      code: "10*8",
      codeUC: "10*8",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["10^8", "100 million", "one hundred million", "10^8"],
      printSymbol: "10<sup>8</sup>"),
  DefinedUnit(
      code: "10*9/L",
      codeUC: "(10*9)/L",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["billion per liter", "10^9/L", "10*9 per Liter", "litre"],
      printSymbol: "(10<sup>9</sup>)/L"),
  DefinedUnit(
      code: "10*9/mL",
      codeUC: "(10*9)/ML",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "billion per milliliter",
        "10^9/mL",
        "10*9 per mL",
        "10^9 per mL",
        "10*9 per milliliter",
        "millilitre"
      ],
      printSymbol: "(10<sup>9</sup>)/mL"),
  DefinedUnit(
      code: "10*9/uL",
      codeUC: "(10*9)/UL",
      value: Value(
          unit: "1", unitUC: "1", value: Decimal.fromString('10'), text: "10"),
      property: "number",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "billion per microliter",
        "10^9/uL",
        "10^9 per uL",
        "10^9/mcl",
        "10^9 per mcl",
        "10*9 per uL",
        "10*9 per mcl",
        "10*9/mcl",
        "10^9 per microliter",
        "microlitre"
      ],
      printSymbol: "(10<sup>9</sup>)/μL"),
  DefinedUnit(
      code: "10.L/(min.m2)",
      codeUC: "L/(MIN.M2)",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "10 liter per minute per square meter",
        "10 liters per minutes per square meter",
        "10 L per min per m2",
        "m^2",
        "10 L/(min*m2)",
        "10L/(min*m^2)",
        "litres",
        "sq. meter",
        "metre",
        "meters squared"
      ],
      printSymbol: "L/(min.(m<sup>2</sup>))"),
  DefinedUnit(
      code: "10.L/min",
      codeUC: "L/MIN",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "10 liter per minute",
        "10 liters per minute",
        "10 L per min",
        "10L",
        "10 L/min",
        "litre"
      ],
      printSymbol: "L/min"),
  DefinedUnit(
      code: "10.uN.s/(cm5.m2)",
      codeUC: "(UN.S)/(CM5.M2)",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "10 micronewton second per centimeter to the fifth power per square meter",
        "dyne seconds per centimeter5 and square meter",
        "dyn.s/(cm5.m2)",
        "dyn.s/cm5/m2",
        "cm^5",
        "m^2"
      ],
      printSymbol: "(μN.s)/(cm<sup>5</sup>).(m<sup>2</sup>)"),
  DefinedUnit(
      code: "24.h",
      codeUC: "HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["24 hour", "24hrs", "24 hrs", "24 hours", "days", "dy"],
      printSymbol: "h"),
  DefinedUnit(
      code: "A/m",
      codeUC: "A/M",
      value: Value(
          unit: "C/s",
          unitUC: "C/S",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "electric current",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "ampere per meter",
        "A/m",
        "amp/meter",
        "magnetic field strength",
        "H",
        "B",
        "amperes per meter",
        "metre"
      ],
      printSymbol: "A/m"),
  DefinedUnit(
      code: "cg",
      codeUC: "CG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["centigram", "centigrams", "cg", "cgm"],
      printSymbol: "cg"),
  DefinedUnit(
      code: "cL",
      codeUC: "CL",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["centiliter", "centiliters", "centilitres"],
      printSymbol: "cL"),
  DefinedUnit(
      code: "cm",
      codeUC: "CM",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["centimeter", "centimeters", "centimetres"],
      printSymbol: "cm"),
  DefinedUnit(
      code: "cm[H2O]",
      codeUC: "CM[H2O]",
      value: Value(
          unit: "kPa",
          unitUC: "KPAL",
          value: Decimal.fromString('9.80665'),
          text: "9.80665"),
      property: "pressure",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "centimeter of water",
        "cm H2O",
        "cmH2O",
        "centimetres",
        "pressure"
      ],
      printSymbol: "cm HO<sub><r>2</r></sub>"),
  DefinedUnit(
      code: "cm[H2O]/L/s",
      codeUC: "(CM[H2O]/L)/S",
      value: Value(
          unit: "kPa",
          unitUC: "KPAL",
          value: Decimal.fromString('9.80665'),
          text: "9.80665"),
      property: "pressure",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "centimeter of water per liter per second",
        "cm[H2O]/(L/s)",
        "cm[H2O].s/L",
        "cm H2O/L/sec",
        "cmH2O/L/sec",
        "cmH2O/Liter",
        "cmH2O per L per secs",
        "centimeters of water per liters per second",
        "centimetres",
        "litres",
        "cm[H2O]/(L/s)"
      ],
      printSymbol: "((cm HO<sub><r>2</r></sub>)/L)/s"),
  DefinedUnit(
      code: "cm[H2O]/s/m",
      codeUC: "(CM[H2O]/S)/M",
      value: Value(
          unit: "kPa",
          unitUC: "KPAL",
          value: Decimal.fromString('9.80665'),
          text: "9.80665"),
      property: "pressure",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "centimeter of water per second per meter",
        "cm[H2O]/(s.m)",
        "cm H2O/s/m",
        "cmH2O",
        "cmH2O/sec/m",
        "cmH2O per secs per meters",
        "centimeters of water per seconds per meter",
        "centimetres",
        "metre"
      ],
      printSymbol: "((cm HO<sub><r>2</r></sub>)/s)/m"),
  DefinedUnit(
      code: "cm[Hg]",
      codeUC: "CM[HG]",
      value: Value(
          unit: "kPa",
          unitUC: "KPAL",
          value: Decimal.fromString('133.322'),
          text: "133.322"),
      property: "pressure",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "centimeter of mercury",
        "centimeters of mercury",
        "centimetres",
        "cmHg",
        "cm Hg"
      ],
      printSymbol: "cm Hg"),
  DefinedUnit(
      code: "cm2",
      codeUC: "CM2",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "square centimeter",
        "cm^2",
        "sq cm",
        "centimeters squared",
        "square centimeters",
        "centimetre",
        "area"
      ],
      printSymbol: "cm<sup>2</sup>"),
  DefinedUnit(
      code: "cm2/s",
      codeUC: "CM2/S",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "square centimeter per second",
        "cm^2/sec",
        "square centimeters per second",
        "sq cm per sec",
        "cm2",
        "centimeters squared",
        "centimetres"
      ],
      printSymbol: "(cm<sup>2</sup>)/s"),
  DefinedUnit(
      code: "cP",
      codeUC: "CP",
      value: Value(
          unit: "dyn.s/cm2",
          unitUC: "DYN.S/CM2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "dynamic viscosity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["centipoise", "cps", "centiposes"],
      printSymbol: "cP"),
  DefinedUnit(
      code: "cSt",
      codeUC: "CST",
      value: Value(
          unit: "cm2/s",
          unitUC: "CM2/S",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "kinematic viscosity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["centistoke", "centistokes"],
      printSymbol: "cSt"),
  DefinedUnit(
      code: "daL/min",
      codeUC: "DAL/MIN",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "dekaliter per minute",
        "dekalitres",
        "dekaliters per minute",
        "per min"
      ],
      printSymbol: "daL/min"),
  DefinedUnit(
      code: "daL/min/m2",
      codeUC: "(DAL/MIN)/M2",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "dekaliter per minute per square meter",
        "daL/min/m^2",
        "daL/minute/m2",
        "sq. meter",
        "dekaliters per minutes per square meter",
        "meter squared",
        "dekalitres",
        "metre"
      ],
      printSymbol: "(daL/min)/(m<sup>2</sup>)"),
  DefinedUnit(
      code: "dB",
      codeUC: "DB",
      value: Value(unit: '1', unitUC: null, value: null, text: null),
      property: "level",
      isMetric: true,
      isSpecial: true,
      class_: null,
      names: ["decibel", "decibels"],
      printSymbol: "dB"),
  DefinedUnit(
      code: "deg/s",
      codeUC: "DEG/S",
      value: Value(
          unit: "[pi].rad/360",
          unitUC: "[PI].RAD/360",
          value: Decimal.fromString('2'),
          text: "2"),
      property: "plane angle",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "degree per second",
        "deg/sec",
        "deg per sec",
        "°/sec",
        "twist rate",
        "angular speed",
        "rotational speed"
      ],
      printSymbol: "°/s"),
  DefinedUnit(
      code: "dg",
      codeUC: "DG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["decigram", "decigrams", "dgm", "0.1 grams", "1/10 gm"],
      printSymbol: "dg"),
  DefinedUnit(
      code: "dL",
      codeUC: "DL",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["deciliter", "deciliters", "decilitres", "0.1 liters", "1/10 L"],
      printSymbol: "dL"),
  DefinedUnit(
      code: "dm",
      codeUC: "DM",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "decimeter",
        "decimeters",
        "decimetres",
        "0.1 meters",
        "1/10 m",
        "10 cm",
        "centimeters"
      ],
      printSymbol: "dm"),
  DefinedUnit(
      code: "dm2/s2",
      codeUC: "DM2/S2",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "square decimeter per square second",
        "dm2 per s2",
        "dm^2/s^2",
        "decimeters squared per second squared",
        "sq dm",
        "sq sec"
      ],
      printSymbol: "(dm<sup>2</sup>)/(s<sup>2</sup>)"),
  DefinedUnit(
      code: "dyn.s/(cm.m2)",
      codeUC: "(DYN.S)/(CM.M2)",
      value: Value(
          unit: "g.cm/s2",
          unitUC: "G.CM/S2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "force",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "dyne second per centimeter per square meter",
        "(dyn*s)/(cm*m2)",
        "(dyn*s)/(cm*m^2)",
        "dyn s per cm per m2",
        "m^2",
        "dyne seconds per centimeters per square meter",
        "centimetres",
        "sq. meter",
        "squared"
      ],
      printSymbol: "(dyn.s)/(cm.(m<sup>2</sup>))"),
  DefinedUnit(
      code: "dyn.s/cm",
      codeUC: "(DYN.S)/CM",
      value: Value(
          unit: "g.cm/s2",
          unitUC: "G.CM/S2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "force",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "dyne second per centimeter",
        "(dyn*s)/cm",
        "dyn sec per cm",
        "seconds",
        "centimetre",
        "dyne seconds"
      ],
      printSymbol: "(dyn.s)/cm"),
  DefinedUnit(
      code: "eq/L",
      codeUC: "EQ/L",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "equivalent per liter",
        "eq/liter",
        "eq/litre",
        "eqs",
        "equivalents per liter",
        "litre"
      ],
      printSymbol: "eq/L"),
  DefinedUnit(
      code: "eq/mL",
      codeUC: "EQ/ML",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "equivalent per milliliter",
        "equivalent/milliliter",
        "equivalents per milliliter",
        "eq per mL",
        "millilitre"
      ],
      printSymbol: "eq/mL"),
  DefinedUnit(
      code: "eq/mmol",
      codeUC: "EQ/MMOL",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "equivalent per millimole",
        "equivalent/millimole",
        "equivalents per millimole",
        "eq per mmol"
      ],
      printSymbol: "eq/mmol"),
  DefinedUnit(
      code: "eq/umol",
      codeUC: "EQ/UMOL",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "equivalent per micromole",
        "equivalent/micromole",
        "equivalents per micromole",
        "eq per umol"
      ],
      printSymbol: "eq/μmol"),
  DefinedUnit(
      code: "fg",
      codeUC: "FG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["femtogram", "fg", "fgm", "femtograms", "weight"],
      printSymbol: "fg"),
  DefinedUnit(
      code: "fL",
      codeUC: "FL",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["femtoliter", "femtolitres", "femtoliters"],
      printSymbol: "fL"),
  DefinedUnit(
      code: "fm",
      codeUC: "FM",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["femtometer", "femtometres", "femtometers"],
      printSymbol: "fm"),
  DefinedUnit(
      code: "fmol",
      codeUC: "FMOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["femtomole", "femtomoles"],
      printSymbol: "fmol"),
  DefinedUnit(
      code: "fmol/g",
      codeUC: "FMOL/G",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["femtomole per gram", "femtomoles", "fmol/gm", "fmol per gm"],
      printSymbol: "fmol/g"),
  DefinedUnit(
      code: "fmol/L",
      codeUC: "FMOL/L",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["femtomole per liter", "femtomoles", "fmol per liter", "litre"],
      printSymbol: "fmol/L"),
  DefinedUnit(
      code: "fmol/mg",
      codeUC: "FMOL/MG",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["femtomole per milligram", "fmol per mg", "femtomoles"],
      printSymbol: "fmol/mg"),
  DefinedUnit(
      code: "fmol/mL",
      codeUC: "FMOL/ML",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "femtomole per milliliter",
        "femtomoles",
        "millilitre",
        "fmol per mL",
        "fmol per milliliter"
      ],
      printSymbol: "fmol/mL"),
  DefinedUnit(
      code: "g.m",
      codeUC: "G.M",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["gram meter", "g*m", "gxm", "meters", "metres"],
      printSymbol: "g.m"),
  DefinedUnit(
      code: "g/(100.g)",
      codeUC: "G/G",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per 100 gram",
        "g/100 gm",
        "100gm",
        "grams per 100 grams",
        "gm per 100 gm"
      ],
      printSymbol: "g/g"),
  DefinedUnit(
      code: "g/(12.h)",
      codeUC: "G/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per 12 hour",
        "gm/12hrs",
        "12 hrs",
        "gm per 12 hrs",
        "12hrs",
        "grams per 12 hours"
      ],
      printSymbol: "g/h"),
  DefinedUnit(
      code: "g/(24.h)",
      codeUC: "G/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per 24 hour",
        "gm/24hrs",
        "gm/24 hrs",
        "gm per 24 hrs",
        "24hrs",
        "grams per 24 hours",
        "gm/dy",
        "gm per dy",
        "grams per day"
      ],
      printSymbol: "g/h"),
  DefinedUnit(
      code: "g/(3.d)",
      codeUC: "G/D",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["gram per 3 days", "gm/3dy", "gm/3 dy", "gm per 3 days", "grams"],
      printSymbol: "g/d"),
  DefinedUnit(
      code: "g/(4.h)",
      codeUC: "G/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per 4 hour",
        "gm/4hrs",
        "gm/4 hrs",
        "gm per 4 hrs",
        "4hrs",
        "grams per 4 hours"
      ],
      printSymbol: "g/h"),
  DefinedUnit(
      code: "g/(48.h)",
      codeUC: "G/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per 48 hour",
        "gm/48hrs",
        "gm/48 hrs",
        "gm per 48 hrs",
        "48hrs",
        "grams per 48 hours"
      ],
      printSymbol: "g/h"),
  DefinedUnit(
      code: "g/(5.h)",
      codeUC: "G/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per 5 hour",
        "gm/5hrs",
        "gm/5 hrs",
        "gm per 5 hrs",
        "5hrs",
        "grams per 5 hours"
      ],
      printSymbol: "g/h"),
  DefinedUnit(
      code: "g/(6.h)",
      codeUC: "G/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per 6 hour",
        "gm/6hrs",
        "gm/6 hrs",
        "gm per 6 hrs",
        "6hrs",
        "grams per 6 hours"
      ],
      printSymbol: "g/h"),
  DefinedUnit(
      code: "g/(72.h)",
      codeUC: "G/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per 72 hour",
        "gm/72hrs",
        "gm/72 hrs",
        "gm per 72 hrs",
        "72hrs",
        "grams per 72 hours"
      ],
      printSymbol: "g/h"),
  DefinedUnit(
      code: "g/cm3",
      codeUC: "G/CM3",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per cubic centimeter",
        "g/cm^3",
        "gm per cm3",
        "g per cm^3",
        "grams per centimeter cubed",
        "cu. cm",
        "centimetre",
        "g/mL",
        "gram per milliliter",
        "millilitre"
      ],
      printSymbol: "g/(cm<sup>3</sup>)"),
  DefinedUnit(
      code: "g/d",
      codeUC: "G/D",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per day",
        "gm/dy",
        "gm per dy",
        "grams per day",
        "gm/24hrs",
        "gm/24 hrs",
        "gm per 24 hrs",
        "24hrs",
        "grams per 24 hours",
        "serving"
      ],
      printSymbol: "g/d"),
  DefinedUnit(
      code: "g/dL",
      codeUC: "G/DL",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per deciliter",
        "gm/dL",
        "gm per dL",
        "grams per deciliter",
        "decilitre"
      ],
      printSymbol: "g/dL"),
  DefinedUnit(
      code: "g/g",
      codeUC: "G/G",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["gram per gram", "gm", "grams"],
      printSymbol: "g/g"),
  DefinedUnit(
      code: "g/h",
      codeUC: "G/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per hour",
        "gm/hr",
        "gm per hr",
        "grams",
        "intake",
        "output"
      ],
      printSymbol: "g/h"),
  DefinedUnit(
      code: "g/h/m2",
      codeUC: "(G/HR)/M2",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per hour per square meter",
        "gm/hr/m2",
        "gm/h/m2",
        "/m^2",
        "sq. m",
        "g per hr per m2",
        "grams per hours per square meter",
        "meter squared",
        "metre"
      ],
      printSymbol: "(g/h)/(m<sup>2</sup>)"),
  DefinedUnit(
      code: "g/kg ",
      codeUC: "G/KG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["gram per kilogram", "g per kg", "gram per kilograms"],
      printSymbol: "g/kg"),
  DefinedUnit(
      code: "g/kg/(8.h)",
      codeUC: "(G/KG)/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per kilogram per 8 hour ",
        "g/(8.kg.h)",
        "gm/kg/8hrs",
        "8 hrs",
        "g per kg per 8 hrs",
        "8hrs",
        "grams per kilograms per 8 hours",
        "shift"
      ],
      printSymbol: "(g/kg)/h"),
  DefinedUnit(
      code: "g/kg/d",
      codeUC: "(G/KG)/D",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per kilogram per day",
        "g/(kg.d)",
        "gm/kg/dy",
        "gm per kg per dy",
        "grams per kilograms per day"
      ],
      printSymbol: "(g/kg)/d"),
  DefinedUnit(
      code: "g/kg/h",
      codeUC: "(G/KG)/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per kilogram per hour",
        "g/(kg.h)",
        "g/kg/hr",
        "g per kg per hrs",
        "grams per kilograms per hour"
      ],
      printSymbol: "(g/kg)/h"),
  DefinedUnit(
      code: "g/kg/min",
      codeUC: "(G/KG)/MIN",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per kilogram per minute",
        "g/(kg.min)",
        "g/kg/min",
        "g per kg per min",
        "grams per kilograms per minute"
      ],
      printSymbol: "(g/kg)/min"),
  DefinedUnit(
      code: "g/L",
      codeUC: "G/L",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per liter",
        "gm per liter",
        "g/liter",
        "grams per liter",
        "litre"
      ],
      printSymbol: "g/L"),
  DefinedUnit(
      code: "g/m2",
      codeUC: "G/M2",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per square meter",
        "g/m^2",
        "gram/square meter",
        "g/sq m",
        "g per m2",
        "g per m^2",
        "grams per square meter",
        "meters squared",
        "metre"
      ],
      printSymbol: "g/(m<sup>2</sup>)"),
  DefinedUnit(
      code: "g/mg",
      codeUC: "G/MG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["gram per milligram", "g per mg", "grams per milligram"],
      printSymbol: "g/mg"),
  DefinedUnit(
      code: "g/min",
      codeUC: "G/MIN",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per minute",
        "g per min",
        "grams per minute",
        "gram/minute"
      ],
      printSymbol: "g/min"),
  DefinedUnit(
      code: "g/mL",
      codeUC: "G/ML",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "gram per milliliter",
        "g per mL",
        "grams per milliliter",
        "millilitre"
      ],
      printSymbol: "g/mL"),
  DefinedUnit(
      code: "g/mmol",
      codeUC: "G/MMOL",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["gram per millimole", "grams per millimole", "g per mmol"],
      printSymbol: "g/mmol"),
  DefinedUnit(
      code: "J/L",
      codeUC: "J/L",
      value: Value(
          unit: "N.m",
          unitUC: "N.M",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "energy",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["joule per liter", "joules per liter", "litre", "J per L"],
      printSymbol: "J/L"),
  DefinedUnit(
      code: "K/W",
      codeUC: "K/W",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "temperature",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "degree Kelvin per Watt",
        "degree Kelvin/Watt",
        "K per W",
        "thermal ohm",
        "thermal resistance",
        "degrees"
      ],
      printSymbol: "K/W"),
  DefinedUnit(
      code: "k[IU]/L",
      codeUC: "K[IU]/L",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "kilo international unit per liter",
        "kIU/L",
        "kIU per L",
        "kIU per liter",
        "kilo international units",
        "litre",
        "allergens",
        "allergy units"
      ],
      printSymbol: "(ki.U.)/L"),
  DefinedUnit(
      code: "k[IU]/mL",
      codeUC: "K[IU]/ML",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "kilo international unit per milliliter",
        "kIU/mL",
        "kIU per mL",
        "kIU per milliliter",
        "kilo international units",
        "millilitre",
        "allergens",
        "allergy units"
      ],
      printSymbol: "(ki.U.)/mL"),
  DefinedUnit(
      code: "kat/kg",
      codeUC: "KAT/KG",
      value: Value(
          unit: "mol/s",
          unitUC: "MOL/S",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "katal per kilogram",
        "kat per kg",
        "katals per kilogram",
        "mol/s/kg",
        "moles per seconds per kilogram"
      ],
      printSymbol: "kat/kg"),
  DefinedUnit(
      code: "kat/L",
      codeUC: "KAT/L",
      value: Value(
          unit: "mol/s",
          unitUC: "MOL/S",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "katal per liter",
        "kat per L",
        "katals per liter",
        "litre",
        "mol/s/L",
        "moles per seconds per liter"
      ],
      printSymbol: "kat/L"),
  DefinedUnit(
      code: "kcal",
      codeUC: "KCAL",
      value: Value(
          unit: "cal_th",
          unitUC: "CAL_TH",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "energy",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "kilocalorie",
        "kilogram calories",
        "large calories",
        "food calories",
        "kcals"
      ],
      printSymbol: "kcal"),
  DefinedUnit(
      code: "kcal/(24.h)",
      codeUC: "KCAL/HR",
      value: Value(
          unit: "cal_th",
          unitUC: "CAL_TH",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "energy",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "kilocalorie per 24 hour",
        "kcal/24hrs",
        "kcal/24 hrs",
        "kcal per 24hrs",
        "kilocalories per 24 hours",
        "kilojoules",
        "kJ/24hr",
        "kJ/(24.h)",
        "kJ/dy",
        "kilojoules per days",
        "intake",
        "calories burned",
        "metabolic rate",
        "food calories"
      ],
      printSymbol: "kcal/h"),
  DefinedUnit(
      code: "kcal/[oz_av]",
      codeUC: "KCAL/[OZ_AV]",
      value: Value(
          unit: "cal_th",
          unitUC: "CAL_TH",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "energy",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "kilocalorie per ounce",
        "kcal/oz",
        "kcal per ozs",
        "large calories per ounces",
        "food calories",
        "servings",
        "international"
      ],
      printSymbol: "kcal/oz"),
  DefinedUnit(
      code: "kcal/d",
      codeUC: "KCAL/D",
      value: Value(
          unit: "cal_th",
          unitUC: "CAL_TH",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "energy",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "kilocalorie per day",
        "kcal/dy",
        "kcal per day",
        "kilocalories per days",
        "kilojoules",
        "kJ/dy",
        "kilojoules per days",
        "intake",
        "calories burned",
        "metabolic rate",
        "food calories"
      ],
      printSymbol: "kcal/d"),
  DefinedUnit(
      code: "kcal/h",
      codeUC: "KCAL/HR",
      value: Value(
          unit: "cal_th",
          unitUC: "CAL_TH",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "energy",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "kilocalorie per hour",
        "kcal/hrs",
        "kcals per hr",
        "intake",
        "kilocalories per hours",
        "kilojoules"
      ],
      printSymbol: "kcal/h"),
  DefinedUnit(
      code: "kcal/kg/(24.h)",
      codeUC: "(KCAL/KG)/HR",
      value: Value(
          unit: "cal_th",
          unitUC: "CAL_TH",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "energy",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "kilocalorie per kilogram per 24 hour",
        "kcal/kg/24hrs",
        "24 hrs",
        "kcal per kg per 24hrs",
        "kilocalories per kilograms per 24 hours",
        "kilojoules"
      ],
      printSymbol: "(kcal/kg)/h"),
  DefinedUnit(
      code: "kg",
      codeUC: "KG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["kilogram", "kilograms", "kgs"],
      printSymbol: "kg"),
  DefinedUnit(
      code: "kg.m/s",
      codeUC: "(KG.M)/S",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "kilogram meter per second",
        "kg*m/s",
        "kg.m per sec",
        "kg*m per sec",
        "p",
        "momentum"
      ],
      printSymbol: "(kg.m)/s"),
  DefinedUnit(
      code: "kg/(s.m2)",
      codeUC: "KG/(S.M2)",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "kilogram per second per square meter",
        "kg/(s*m2)",
        "kg/(s*m^2)",
        "kg per s per m2",
        "per sec",
        "per m^2",
        "kilograms per seconds per square meter",
        "meter squared",
        "metre"
      ],
      printSymbol: "kg/(s.(m<sup>2</sup>))"),
  DefinedUnit(
      code: "kg/h",
      codeUC: "KG/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["kilogram per hour", "kg/hr", "kg per hr", "kilograms per hour"],
      printSymbol: "kg/h"),
  DefinedUnit(
      code: "kg/L",
      codeUC: "KG/L",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["kilogram per liter", "kg per liter", "litre", "kilograms"],
      printSymbol: "kg/L"),
  DefinedUnit(
      code: "kg/m2",
      codeUC: "KG/M2",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "kilogram per square meter",
        "kg/m^2",
        "kg/sq. m",
        "kg per m2",
        "per m^2",
        "per sq. m",
        "kilograms",
        "meter squared",
        "metre",
        "BMI"
      ],
      printSymbol: "kg/(m<sup>2</sup>)"),
  DefinedUnit(
      code: "kg/m3",
      codeUC: "KG/M3",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "kilogram per cubic meter",
        "kg/m^3",
        "kg/cu. m",
        "kg per m3",
        "per m^3",
        "per cu. m",
        "kilograms",
        "meters cubed",
        "metre"
      ],
      printSymbol: "kg/(m<sup>3</sup>)"),
  DefinedUnit(
      code: "kg/min",
      codeUC: "KG/MIN",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "kilogram per minute",
        "kilogram/minute",
        "kg per min",
        "kilograms per minute"
      ],
      printSymbol: "kg/min"),
  DefinedUnit(
      code: "kg/mol",
      codeUC: "KG/MOL",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "kilogram per mole",
        "kilogram/mole",
        "kg per mol",
        "kilograms per mole"
      ],
      printSymbol: "kg/mol"),
  DefinedUnit(
      code: "kg/s",
      codeUC: "KG/S",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "kilogram per second",
        "kg/sec",
        "kilogram/second",
        "kg per sec",
        "kilograms",
        "second"
      ],
      printSymbol: "kg/s"),
  DefinedUnit(
      code: "kL",
      codeUC: "KL",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "kiloliter",
        "kiloliters",
        "kilolitres",
        "m3",
        "m^3",
        "meters cubed",
        "metre"
      ],
      printSymbol: "kL"),
  DefinedUnit(
      code: "km",
      codeUC: "KM",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["kilometer", "kilometers", "kilometres", "distance"],
      printSymbol: "km"),
  DefinedUnit(
      code: "kPa",
      codeUC: "KPAL",
      value: Value(
          unit: "N/m2",
          unitUC: "N/M2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "pressure",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["kilopascal", "kilopascals", "pressure"],
      printSymbol: "kPa"),
  DefinedUnit(
      code: "ks",
      codeUC: "KS",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["kilosecond", "kiloseconds", "ksec"],
      printSymbol: "ks"),
  DefinedUnit(
      code: "kU",
      codeUC: "KU",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["kilo enzyme unit", "units", "mmol/min", "millimoles per minute"],
      printSymbol: "kU"),
  DefinedUnit(
      code: "kU/g",
      codeUC: "KU/G",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["kilo enzyme unit per gram", "units per grams", "kU per gm"],
      printSymbol: "kU/g"),
  DefinedUnit(
      code: "kU/L",
      codeUC: "KU/L",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "kilo enzyme unit per liter",
        "units per liter",
        "litre",
        "enzymatic activity",
        "enzyme activity per volume",
        "activities"
      ],
      printSymbol: "kU/L"),
  DefinedUnit(
      code: "kU/mL",
      codeUC: "KU/ML",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "kilo enzyme unit per milliliter",
        "kU per mL",
        "units per milliliter",
        "millilitre",
        "enzymatic activity per volume",
        "enzyme activities"
      ],
      printSymbol: "kU/mL"),
  DefinedUnit(
      code: "L/(24.h)",
      codeUC: "L/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "Liters per 24 hour",
        "L/24hrs",
        "L/24 hrs",
        "L per 24hrs",
        "liters per 24 hours",
        "day",
        "dy",
        "litres",
        "volume flow rate"
      ],
      printSymbol: "L/h"),
  DefinedUnit(
      code: "L/(8.h)",
      codeUC: "L/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "Liters per 8 hour",
        "L/8hrs",
        "L/8 hrs",
        "L per 8hrs",
        "liters per 8 hours",
        "litres",
        "volume flow rate",
        "shift"
      ],
      printSymbol: "L/h"),
  DefinedUnit(
      code: "L/(min.m2) ",
      codeUC: "L/(MIN.M2)",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "Liters per minute per square meter",
        "L/(min.m2)",
        "L/min/m^2",
        "L/min/sq. meter",
        "L per min per m2",
        "m^2",
        "liters per minutes per square meter",
        "meter squared",
        "litres",
        "metre"
      ],
      printSymbol: "L/(min.(m<sup>2</sup>))"),
  DefinedUnit(
      code: "L/d",
      codeUC: "L/D",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "Liters per day",
        "L/dy",
        "L per day",
        "24hrs",
        "24 hrs",
        "24 hours",
        "liters",
        "litres"
      ],
      printSymbol: "L/d"),
  DefinedUnit(
      code: "L/h",
      codeUC: "L/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Liters per hour", "L/hr", "L per hr", "litres"],
      printSymbol: "L/h"),
  DefinedUnit(
      code: "L/kg",
      codeUC: "L/KG",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Liters per kilogram", "L per kg", "litre"],
      printSymbol: "L/kg"),
  DefinedUnit(
      code: "L/L",
      codeUC: "L/L",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Liters per liter", "L per L", "liter/liter", "litre"],
      printSymbol: "L/L"),
  DefinedUnit(
      code: "L/min",
      codeUC: "L/MIN",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Liters per minute", "liters per minute", "litre"],
      printSymbol: "L/min"),
  DefinedUnit(
      code: "L/min/m2",
      codeUC: "(L/MIN)/M2",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "Liters per minute per square meter",
        "L/(min.m2)",
        "L/min/m^2",
        "L/min/sq. meter",
        "L per min per m2",
        "m^2",
        "liters per minutes per square meter",
        "meter squared",
        "litres",
        "metre"
      ],
      printSymbol: "(L/min)/(m<sup>2</sup>)"),
  DefinedUnit(
      code: "L/s",
      codeUC: "L/S",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Liters per second", "L per sec", "litres"],
      printSymbol: "L/s"),
  DefinedUnit(
      code: "L/s/s2",
      codeUC: "(L/S)/S2",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "Liters per second per square second",
        "L/s/s^2",
        "L/sec/sec2",
        "L/sec/sec^2",
        "L/sec/sq. sec",
        "L per s per s2",
        "L per sec per sec2",
        "s^2",
        "sec^2",
        "liters per seconds per square second",
        "second squared",
        "litres"
      ],
      printSymbol: "(L/s)/(s<sup>2</sup>)"),
  DefinedUnit(
      code: "lm.m2",
      codeUC: "LM.M2",
      value: Value(
          unit: "cd.sr",
          unitUC: "CD.SR",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "luminous flux",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "lumen square meter",
        "lm*m2",
        "lm*m^2",
        "lumen meters squared",
        "lumen sq. meters",
        "metres"
      ],
      printSymbol: "lm.(m<sup>2</sup>)"),
  DefinedUnit(
      code: "m/s",
      codeUC: "M/S",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "meter per second",
        "meter/second",
        "m per sec",
        "meters per second",
        "metres",
        "velocity",
        "speed"
      ],
      printSymbol: "m/s"),
  DefinedUnit(
      code: "m/s2",
      codeUC: "M/S2",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "meter per square second",
        "m/s^2",
        "m/sq. sec",
        "m per s2",
        "per s^2",
        "meters per square second",
        "second squared",
        "sq second",
        "metres",
        "acceleration"
      ],
      printSymbol: "m/(s<sup>2</sup>)"),
  DefinedUnit(
      code: "m[IU]/L",
      codeUC: "M[IU]/L",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milli international unit per liter",
        "mIU/L",
        "m IU/L",
        "mIU per liter",
        "units",
        "litre"
      ],
      printSymbol: "(mi.U.)/L"),
  DefinedUnit(
      code: "m[IU]/mL",
      codeUC: "M[IU]/ML",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milli  international unit per milliliter",
        "mIU/mL",
        "m IU/mL",
        "mIU per mL",
        "milli international units per milliliter",
        "millilitre"
      ],
      printSymbol: "(mi.U.)/mL"),
  DefinedUnit(
      code: "m2",
      codeUC: "M2",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "square meter",
        "m^2",
        "sq m",
        "square meters",
        "meters squared",
        "metres"
      ],
      printSymbol: "m<sup>2</sup>"),
  DefinedUnit(
      code: "m2/s",
      codeUC: "M2/S",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "square meter per second",
        "m^2/sec",
        "m2 per sec",
        "m^2 per sec",
        "sq m/sec",
        "meters squared/seconds",
        "sq m per sec",
        "meters squared",
        "metres"
      ],
      printSymbol: "(m<sup>2</sup>)/s"),
  DefinedUnit(
      code: "m3/s",
      codeUC: "M3/S",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "cubic meter per second",
        "m^3/sec",
        "m3 per sec",
        "m^3 per sec",
        "cu m/sec",
        "cubic meters per seconds",
        "meters cubed",
        "metres"
      ],
      printSymbol: "(m<sup>3</sup>)/s"),
  DefinedUnit(
      code: "mA",
      codeUC: "MA",
      value: Value(
          unit: "C/s",
          unitUC: "C/S",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "electric current",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["milliampere", "mamp", "milliamperes"],
      printSymbol: "mA"),
  DefinedUnit(
      code: "mbar",
      codeUC: "MBAR",
      value: Value(
          unit: "Pa",
          unitUC: "PAL",
          value: Decimal.fromString('100000.0'),
          text: "100000.0"),
      property: "pressure",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["millibar", "millibars"],
      printSymbol: "mbar"),
  DefinedUnit(
      code: "mbar.s/L",
      codeUC: "(MBAR.S)/L",
      value: Value(
          unit: "Pa",
          unitUC: "PAL",
          value: Decimal.fromString('100000.0'),
          text: "100000.0"),
      property: "pressure",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millibar second per liter",
        "mbar*s/L",
        "mbar.s per L",
        "mbar*s per L",
        "millibar seconds per liter",
        "millibar second per litre"
      ],
      printSymbol: "(mbar.s)/L"),
  DefinedUnit(
      code: "mbar/L/s",
      codeUC: "(MBAR/L)/S",
      value: Value(
          unit: "Pa",
          unitUC: "PAL",
          value: Decimal.fromString('100000.0'),
          text: "100000.0"),
      property: "pressure",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millibar per liter per second",
        "mbar/(L.s)",
        "mbar/L/sec",
        "mbar/liter/second",
        "mbar per L per sec",
        "mbar per liter per second",
        "millibars per liters per seconds",
        "litres"
      ],
      printSymbol: "(mbar/L)/s"),
  DefinedUnit(
      code: "meq",
      codeUC: "MEQ",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["milliequivalent", "milliequivalents", "meqs"],
      printSymbol: "meq"),
  DefinedUnit(
      code: "meq/(2.h)",
      codeUC: "MEQ/HR",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliequivalent per 2 hour",
        "meq/2hrs",
        "meq/2 hrs",
        "meq per 2 hrs",
        "milliequivalents per 2 hours"
      ],
      printSymbol: "meq/h"),
  DefinedUnit(
      code: "meq/(24.h)",
      codeUC: "MEQ/HR",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliequivalent per 24 hour",
        "meq/24hrs",
        "meq/24 hrs",
        "meq per 24 hrs",
        "milliequivalents per 24 hours"
      ],
      printSymbol: "meq/h"),
  DefinedUnit(
      code: "meq/(8.h)",
      codeUC: "MEQ/HR",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliequivalent per 8 hour",
        "meq/8hrs",
        "meq/8 hrs",
        "meq per 8 hrs",
        "milliequivalents per 8 hours",
        "shift"
      ],
      printSymbol: "meq/h"),
  DefinedUnit(
      code: "meq/d",
      codeUC: "MEQ/D",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliequivalent per day",
        "meq/dy",
        "meq per day",
        "milliquivalents per days",
        "meq/24hrs",
        "meq/24 hrs",
        "meq per 24 hrs",
        "milliequivalents per 24 hours"
      ],
      printSymbol: "meq/d"),
  DefinedUnit(
      code: "meq/dL",
      codeUC: "MEQ/DL",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliequivalent per deciliter",
        "meq per dL",
        "milliequivalents per deciliter",
        "decilitre"
      ],
      printSymbol: "meq/dL"),
  DefinedUnit(
      code: "meq/g",
      codeUC: "MEQ/G",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliequivalent per gram",
        "mgq/gm",
        "meq per gm",
        "milliequivalents per gram"
      ],
      printSymbol: "meq/g"),
  DefinedUnit(
      code: "meq/h",
      codeUC: "MEQ/HR",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliequivalent per hour",
        "meq/hrs",
        "meq per hrs",
        "milliequivalents per hour"
      ],
      printSymbol: "meq/h"),
  DefinedUnit(
      code: "meq/kg",
      codeUC: "MEQ/KG",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliequivalent per kilogram",
        "meq per kg",
        "milliequivalents per kilogram"
      ],
      printSymbol: "meq/kg"),
  DefinedUnit(
      code: "meq/kg/h",
      codeUC: "(MEQ/KG)/HR",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliequivalent per kilogram per hour",
        "meq/(kg.h)",
        "meq/kg/hr",
        "meq per kg per hr",
        "milliequivalents per kilograms per hour"
      ],
      printSymbol: "(meq/kg)/h"),
  DefinedUnit(
      code: "meq/L",
      codeUC: "MEQ/L",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliequivalent per liter",
        "milliequivalents per liter",
        "litre",
        "meq per l",
        "acidity"
      ],
      printSymbol: "meq/L"),
  DefinedUnit(
      code: "meq/m2",
      codeUC: "MEQ/M2",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliequivalent per square meter",
        "meq/m^2",
        "meq/sq. m",
        "milliequivalents per square meter",
        "meter squared",
        "metre"
      ],
      printSymbol: "meq/(m<sup>2</sup>)"),
  DefinedUnit(
      code: "meq/min",
      codeUC: "MEQ/MIN",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliequivalent per minute",
        "meq per min",
        "milliequivalents per minute"
      ],
      printSymbol: "meq/min"),
  DefinedUnit(
      code: "meq/mL",
      codeUC: "MEQ/ML",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliequivalent per milliliter",
        "meq per mL",
        "milliequivalents per milliliter",
        "millilitre"
      ],
      printSymbol: "meq/mL"),
  DefinedUnit(
      code: "mg",
      codeUC: "MG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["milligram", "milligrams"],
      printSymbol: "mg"),
  DefinedUnit(
      code: "mg/(10.h)",
      codeUC: "MG/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per 10 hour",
        "mg/10hrs",
        "mg/10 hrs",
        "mg per 10 hrs",
        "milligrams per 10 hours"
      ],
      printSymbol: "mg/h"),
  DefinedUnit(
      code: "mg/(12.h)",
      codeUC: "MG/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per 12 hour",
        "mg/12hrs",
        "mg/12 hrs",
        "per 12 hrs",
        "12hrs",
        "milligrams per 12 hours"
      ],
      printSymbol: "mg/h"),
  DefinedUnit(
      code: "mg/(2.h)",
      codeUC: "MG/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per 2 hour",
        "mg/2hrs",
        "mg/2 hrs",
        "mg per 2 hrs",
        "2hrs",
        "milligrams per 2 hours"
      ],
      printSymbol: "mg/h"),
  DefinedUnit(
      code: "mg/(24.h)",
      codeUC: "MG/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per 24 hour",
        "mg/24hrs",
        "mg/24 hrs",
        "milligrams per 24 hours",
        "mg/kg/dy",
        "mg per kg per day",
        "milligrams per kilograms per days"
      ],
      printSymbol: "mg/h"),
  DefinedUnit(
      code: "mg/(6.h)",
      codeUC: "MG/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per 6 hour",
        "mg/6hrs",
        "mg/6 hrs",
        "mg per 6 hrs",
        "6hrs",
        "milligrams per 6 hours"
      ],
      printSymbol: "mg/h"),
  DefinedUnit(
      code: "mg/(72.h)",
      codeUC: "MG/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per 72 hour",
        "mg/72hrs",
        "mg/72 hrs",
        "72 hrs",
        "72hrs",
        "milligrams per 72 hours"
      ],
      printSymbol: "mg/h"),
  DefinedUnit(
      code: "mg/(8.h)",
      codeUC: "MG/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per 8 hour",
        "mg/8hrs",
        "mg/8 hrs",
        "milligrams per 8 hours",
        "shift"
      ],
      printSymbol: "mg/h"),
  DefinedUnit(
      code: "mg/d",
      codeUC: "MG/D",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per day",
        "mg/24hrs",
        "mg/24 hrs",
        "milligrams per 24 hours",
        "mg/dy",
        "mg per day",
        "milligrams"
      ],
      printSymbol: "mg/d"),
  DefinedUnit(
      code: "mg/dL",
      codeUC: "MG/DL",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per deciliter",
        "mg per dL",
        "milligrams per deciliter",
        "decilitre"
      ],
      printSymbol: "mg/dL"),
  DefinedUnit(
      code: "mg/g",
      codeUC: "MG/G",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["milligram per gram", "mg per gm", "milligrams per gram"],
      printSymbol: "mg/g"),
  DefinedUnit(
      code: "mg/h",
      codeUC: "MG/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["milligram per hour", "mg/hr", "mg per hr", "milligrams"],
      printSymbol: "mg/h"),
  DefinedUnit(
      code: "mg/kg",
      codeUC: "MG/KG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per kilogram",
        "mg per kg",
        "milligrams per kilograms"
      ],
      printSymbol: "mg/kg"),
  DefinedUnit(
      code: "mg/kg/(8.h)",
      codeUC: "(MG/KG)/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per kilogram per 8 hour",
        "mg/(8.h.kg)",
        "mg/kg/8hrs",
        "mg/kg/8 hrs",
        "mg per kg per 8hrs",
        "8 hrs",
        "milligrams per kilograms per 8 hours",
        "shift"
      ],
      printSymbol: "(mg/kg)/h"),
  DefinedUnit(
      code: "mg/kg/d",
      codeUC: "(MG/KG)/D",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per kilogram per day",
        "mg/(kg.d)",
        "mg/(kg.24.h)mg/kg/dy",
        "mg per kg per day",
        "milligrams per kilograms per days",
        "mg/kg/(24.h)",
        "mg/kg/24hrs",
        "24 hrs",
        "24 hours"
      ],
      printSymbol: "(mg/kg)/d"),
  DefinedUnit(
      code: "mg/kg/h",
      codeUC: "(MG/KG)/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per kilogram per hour",
        "mg/(kg.h)",
        "mg/kg/hr",
        "mg per kg per hr",
        "milligrams per kilograms per hour"
      ],
      printSymbol: "(mg/kg)/h"),
  DefinedUnit(
      code: "mg/kg/min",
      codeUC: "(MG/KG)/MIN",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per kilogram per minute",
        "mg/(kg.min)",
        "mg per kg per min",
        "milligrams per kilograms per minute"
      ],
      printSymbol: "(mg/kg)/min"),
  DefinedUnit(
      code: "mg/L",
      codeUC: "MG/L",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per liter",
        "mg per l",
        "milligrams per liter",
        "litre"
      ],
      printSymbol: "mg/L"),
  DefinedUnit(
      code: "mg/m2",
      codeUC: "MG/M2",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per square meter",
        "mg/m^2",
        "mg/sq. m",
        "mg per m2",
        "mg per m^2",
        "mg per sq. milligrams",
        "meter squared",
        "metre"
      ],
      printSymbol: "mg/(m<sup>2</sup>)"),
  DefinedUnit(
      code: "mg/m3",
      codeUC: "MG/M3",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per cubic meter",
        "mg/m^3",
        "mg/cu. m",
        "mg per m3",
        "milligrams per cubic meter",
        "meter cubed",
        "metre"
      ],
      printSymbol: "mg/(m<sup>3</sup>)"),
  DefinedUnit(
      code: "mg/mg",
      codeUC: "MG/MG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per milligram",
        "mg per mg",
        "milligrams",
        "milligram/milligram"
      ],
      printSymbol: "mg/mg"),
  DefinedUnit(
      code: "mg/min",
      codeUC: "MG/MIN",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per minute",
        "mg per min",
        "milligrams per minutes",
        "milligram/minute"
      ],
      printSymbol: "mg/min"),
  DefinedUnit(
      code: "mg/mL",
      codeUC: "MG/ML",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per milliliter",
        "mg per mL",
        "milligrams per milliliters",
        "millilitre"
      ],
      printSymbol: "mg/mL"),
  DefinedUnit(
      code: "mg/mmol",
      codeUC: "MG/MMOL",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per millimole",
        "mg per mmol",
        "milligrams per millimole",
        ""
      ],
      printSymbol: "mg/mmol"),
  DefinedUnit(
      code: "mg/wk",
      codeUC: "MG/WK",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "milligram per week",
        "mg/week",
        "mg per wk",
        "milligrams per weeks",
        "milligram/week"
      ],
      printSymbol: "mg/wk"),
  DefinedUnit(
      code: "mL",
      codeUC: "ML",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["milliliter", "milliliters", "millilitres"],
      printSymbol: "mL"),
  DefinedUnit(
      code: "mL/(10.h)",
      codeUC: "ML/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per 10 hour",
        "ml/10hrs",
        "ml/10 hrs",
        "mL per 10hrs",
        "10 hrs",
        "milliliters per 10 hours",
        "millilitres"
      ],
      printSymbol: "mL/h"),
  DefinedUnit(
      code: "mL/(12.h)",
      codeUC: "ML/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per 12 hour",
        "ml/12hrs",
        "ml/12 hrs",
        "mL per 12hrs",
        "12 hrs",
        "milliliters per 12 hours",
        "millilitres"
      ],
      printSymbol: "mL/h"),
  DefinedUnit(
      code: "mL/(2.h)",
      codeUC: "ML/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per 2 hour",
        "ml/2hrs",
        "ml/2 hrs",
        "mL per 2hrs",
        "2 hrs",
        "milliliters per 2 hours",
        "millilitres"
      ],
      printSymbol: "mL/h"),
  DefinedUnit(
      code: "mL/(24.h)",
      codeUC: "ML/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per 24 hour",
        "ml/24hrs",
        "ml/24 hrs",
        "mL per 24hrs",
        "24 hrs",
        "milliliters per 24 hours",
        "millilitres",
        "ml/dy",
        "/day",
        "ml per dy",
        "days",
        "fluid outputs",
        "fluid inputs",
        "flow rate"
      ],
      printSymbol: "mL/h"),
  DefinedUnit(
      code: "mL/(4.h)",
      codeUC: "ML/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per 4 hour",
        "ml/4hrs",
        "ml/4 hrs",
        "mL per 4hrs",
        "4 hrs",
        "milliliters per 4 hours",
        "millilitres"
      ],
      printSymbol: "mL/h"),
  DefinedUnit(
      code: "mL/(5.h)",
      codeUC: "ML/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per 5 hour",
        "ml/5hrs",
        "ml/5 hrs",
        "mL per 5hrs",
        "5 hrs",
        "milliliters per 5 hours",
        "millilitres"
      ],
      printSymbol: "mL/h"),
  DefinedUnit(
      code: "mL/(6.h)",
      codeUC: "ML/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per 6 hour",
        "ml/6hrs",
        "ml/6 hrs",
        "mL per 6hrs",
        "6 hrs",
        "milliliters per 6 hours",
        "millilitres"
      ],
      printSymbol: "mL/h"),
  DefinedUnit(
      code: "mL/(72.h)",
      codeUC: "ML/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per 72 hour",
        "ml/72hrs",
        "ml/72 hrs",
        "mL per 72hrs",
        "72 hrs",
        "milliliters per 72 hours",
        "millilitres"
      ],
      printSymbol: "mL/h"),
  DefinedUnit(
      code: "mL/(8.h)",
      codeUC: "ML/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per 8 hour",
        "ml/8hrs",
        "ml/8 hrs",
        "mL per 8hrs",
        "8 hrs",
        "milliliters per 8 hours",
        "millilitres",
        "shift"
      ],
      printSymbol: "mL/h"),
  DefinedUnit(
      code: "mL/(8.h)/kg",
      codeUC: "(ML/HR)/KG",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per 8 hour per kilogram",
        "mL/kg/(8.h)",
        "ml/8h/kg",
        "ml/8 h/kg",
        "ml/8hr/kg",
        "ml/8 hr/kgr",
        "mL per 8h per kg",
        "8 h",
        "8hr",
        "8 hr",
        "milliliters per 8 hours per kilogram",
        "millilitres",
        "shift"
      ],
      printSymbol: "(mL/h)/kg"),
  DefinedUnit(
      code: "mL/[sin_i]",
      codeUC: "ML/[SIN_I]",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per square inch (international)",
        "mL/sin",
        "mL/in2",
        "mL/in^2",
        "mL per sin",
        "in2",
        "in^2",
        "sq. in",
        "milliliters per square inch",
        "inch squared"
      ],
      printSymbol: "mL"),
  DefinedUnit(
      code: "mL/cm[H2O]",
      codeUC: "ML/CM[H2O]",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per centimeter of water",
        "milliliters per centimeter of water",
        "millilitre per centimetre of water",
        "millilitres per centimetre of water",
        "mL/cmH2O",
        "mL/cm H2O",
        "mL per cmH2O",
        "mL per cm H2O"
      ],
      printSymbol: "mL/(cm HO<sub><r>2</r></sub>)"),
  DefinedUnit(
      code: "mL/d",
      codeUC: "ML/D",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per day",
        "ml/day",
        "ml per day",
        "milliliters per day",
        "24 hours",
        "24hrs",
        "millilitre",
        ""
      ],
      printSymbol: "mL/d"),
  DefinedUnit(
      code: "mL/dL",
      codeUC: "ML/DL",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per deciliter",
        "mL per dL",
        "millilitres",
        "decilitre",
        "milliliters"
      ],
      printSymbol: "mL/dL"),
  DefinedUnit(
      code: "mL/h",
      codeUC: "ML/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per hour",
        "mL/hr",
        "mL per hr",
        "milliliters per hour",
        "millilitres",
        "fluid intake",
        "fluid output"
      ],
      printSymbol: "mL/h"),
  DefinedUnit(
      code: "mL/kg",
      codeUC: "ML/KG",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per kilogram",
        "mL per kg",
        "milliliters per kilogram",
        "millilitres"
      ],
      printSymbol: "mL/kg"),
  DefinedUnit(
      code: "mL/kg/(8.h)",
      codeUC: "(ML/KG)/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per kilogram per 8 hour",
        "mL/(8.h.kg)",
        "mL/kg/8hrs",
        "mL/kg/8 hrs",
        "mL per kg per 8hrs",
        "8 hrs",
        "milliliters per kilograms per 8 hours",
        "millilitres",
        "shift"
      ],
      printSymbol: "(mL/kg)/h"),
  DefinedUnit(
      code: "mL/kg/d",
      codeUC: "(ML/KG)/D",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per kilogram per day",
        "mL/(kg.d)",
        "mL/kg/dy",
        "mL per kg per day",
        "milliliters per kilograms per day",
        "mg/kg/24hrs",
        "24 hrs",
        "per 24 hours millilitres"
      ],
      printSymbol: "(mL/kg)/d"),
  DefinedUnit(
      code: "mL/kg/h",
      codeUC: "(ML/KG)/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per kilogram per hour",
        "mL/(kg.h)",
        "mL/kg/hr",
        "mL per kg per hr",
        "milliliters per kilograms per hour",
        "millilitres"
      ],
      printSymbol: "(mL/kg)/h"),
  DefinedUnit(
      code: "mL/kg/min",
      codeUC: "(ML/KG)/MIN",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per kilogram per minute",
        "mL/(kg.min)",
        "mL/kg/dy",
        "mL per kg per day",
        "milliliters per kilograms per day",
        "millilitres"
      ],
      printSymbol: "(mL/kg)/min"),
  DefinedUnit(
      code: "mL/m2",
      codeUC: "ML/M2",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per square meter",
        "mL/m^2",
        "mL/sq. meter",
        "mL per m2",
        "m^2",
        "sq. meter",
        "milliliters per square meter",
        "millilitres",
        "meter squared"
      ],
      printSymbol: "mL/(m<sup>2</sup>)"),
  DefinedUnit(
      code: "mL/mbar",
      codeUC: "ML/MBAR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per millibar",
        "mL per mbar",
        "milliliters per millibar",
        "millilitres"
      ],
      printSymbol: "mL/mbar"),
  DefinedUnit(
      code: "mL/min",
      codeUC: "ML/MIN",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per minute",
        "mL per min",
        "milliliters",
        "millilitres"
      ],
      printSymbol: "mL/min"),
  DefinedUnit(
      code: "mL/min/m2",
      codeUC: "(ML/MIN)/M2",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per minute per square meter",
        "ml/min/m^2",
        "ml/min/sq. meter",
        "mL per min per m2",
        "m^2",
        "sq. meter",
        "milliliters per minutes per square meter",
        "millilitres",
        "metre",
        "meter squared"
      ],
      printSymbol: "(mL/min)/(m<sup>2</sup>)"),
  DefinedUnit(
      code: "mL/mm",
      codeUC: "ML/MM",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per millimeter",
        "mL per mm",
        "milliliters per millimeter",
        "millilitres",
        "millimetre"
      ],
      printSymbol: "mL/mm"),
  DefinedUnit(
      code: "mL/s",
      codeUC: "ML/S",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliliter per second",
        "ml/sec",
        "mL per sec",
        "milliliters per second",
        "millilitres"
      ],
      printSymbol: "mL/s"),
  DefinedUnit(
      code: "mm",
      codeUC: "MM",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "millimeter",
        "millimeters",
        "millimetres",
        "height",
        "length",
        "diameter",
        "thickness",
        "axis",
        "curvature",
        "size"
      ],
      printSymbol: "mm"),
  DefinedUnit(
      code: "mm/h",
      codeUC: "MM/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "millimeter per hour",
        "mm/hr",
        "mm per hr",
        "millimeters per hour",
        "millimetres"
      ],
      printSymbol: "mm/h"),
  DefinedUnit(
      code: "mm/min",
      codeUC: "MM/MIN",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "millimeter per minute",
        "mm per min",
        "millimeters per minute",
        "millimetres"
      ],
      printSymbol: "mm/min"),
  DefinedUnit(
      code: "mm[H2O]",
      codeUC: "MM[H2O]",
      value: Value(
          unit: "kPa",
          unitUC: "KPAL",
          value: Decimal.fromString('9.80665'),
          text: "9.80665"),
      property: "pressure",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimeter of water",
        "mmH2O",
        "mm H2O",
        "millimeters of water",
        "millimetres"
      ],
      printSymbol: "mm HO<sub><r>2</r></sub>"),
  DefinedUnit(
      code: "mm[Hg]",
      codeUC: "MM[HG]",
      value: Value(
          unit: "kPa",
          unitUC: "KPAL",
          value: Decimal.fromString('133.322'),
          text: "133.322"),
      property: "pressure",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimeter of mercury",
        "mmHg",
        "mm Hg",
        "millimeters of mercury",
        "millimetres"
      ],
      printSymbol: "mm Hg"),
  DefinedUnit(
      code: "mm2",
      codeUC: "MM2",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "square millimeter",
        "mm^2",
        "sq. mm.",
        "sq. millimeters",
        "millimeters squared",
        "millimetres"
      ],
      printSymbol: "mm<sup>2</sup>"),
  DefinedUnit(
      code: "mmol",
      codeUC: "MMOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["millimole", "millimoles"],
      printSymbol: "mmol"),
  DefinedUnit(
      code: "mmol/(12.h)",
      codeUC: "MMOL/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per 12 hour",
        "mmol/12hrs",
        "mmol/12 hrs",
        "mmol per 12 hrs",
        "12hrs",
        "millimoles per 12 hours"
      ],
      printSymbol: "mmol/h"),
  DefinedUnit(
      code: "mmol/(2.h)",
      codeUC: "MMOL/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per 2 hour",
        "mmol/2hrs",
        "mmol/2 hrs",
        "mmol per 2 hrs",
        "2hrs",
        "millimoles per 2 hours"
      ],
      printSymbol: "mmol/h"),
  DefinedUnit(
      code: "mmol/(24.h)",
      codeUC: "MMOL/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per 24 hour",
        "mmol/24hrs",
        "mmol/24 hrs",
        "mmol per 24 hrs",
        "24hrs",
        "millimoles per 24 hours"
      ],
      printSymbol: "mmol/h"),
  DefinedUnit(
      code: "mmol/(5.h)",
      codeUC: "MMOL/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per 5 hour",
        "mmol/5hrs",
        "mmol/5 hrs",
        "mmol per 5 hrs",
        "5hrs",
        "millimoles per 5 hours"
      ],
      printSymbol: "mmol/h"),
  DefinedUnit(
      code: "mmol/(6.h)",
      codeUC: "MMOL/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per 6 hour",
        "mmol/6hrs",
        "mmol/6 hrs",
        "mmol per 6 hrs",
        "6hrs",
        "millimoles per 6 hours"
      ],
      printSymbol: "mmol/h"),
  DefinedUnit(
      code: "mmol/(8.h)",
      codeUC: "MMOL/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per 8 hour",
        "mmol/8hrs",
        "mmol/8 hrs",
        "mmol per 8 hrs",
        "8hrs",
        "millimoles per 8 hours",
        "shift"
      ],
      printSymbol: "mmol/h"),
  DefinedUnit(
      code: "mmol/d",
      codeUC: "MMOL/D",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per day",
        "mmol/24hrs",
        "mmol/24 hrs",
        "mmol per 24 hrs",
        "24hrs",
        "millimoles per 24 hours"
      ],
      printSymbol: "mmol/d"),
  DefinedUnit(
      code: "mmol/dL",
      codeUC: "MMOL/DL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per deciliter",
        "mmol per dL",
        "millimoles",
        "decilitre"
      ],
      printSymbol: "mmol/dL"),
  DefinedUnit(
      code: "mmol/g",
      codeUC: "MMOL/G",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["millimole per gram", "mmol per gram", "millimoles"],
      printSymbol: "mmol/g"),
  DefinedUnit(
      code: "mmol/h",
      codeUC: "MMOL/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per hour",
        "mmol/hr",
        "mmol per hr",
        "millimoles per hour"
      ],
      printSymbol: "mmol/h"),
  DefinedUnit(
      code: "mmol/kg",
      codeUC: "MMOL/KG",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per kilogram",
        "mmol per kg",
        "millimoles per kilogram"
      ],
      printSymbol: "mmol/kg"),
  DefinedUnit(
      code: "mmol/kg/(8.h)",
      codeUC: "(MMOL/KG)/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per kilogram per 8 hour",
        "mmol/(8.h.kg)",
        "mmol/kg/8hrs",
        "mmol/kg/8 hrs",
        "mmol per kg per 8hrs",
        "8 hrs",
        "millimoles per kilograms per 8 hours",
        "shift"
      ],
      printSymbol: "(mmol/kg)/h"),
  DefinedUnit(
      code: "mmol/kg/d",
      codeUC: "(MMOL/KG)/D",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per kilogram per day",
        "mmol/kg/dy",
        "mmol/kg/day",
        "mmol per kg per dy",
        "millimoles per kilograms per day"
      ],
      printSymbol: "(mmol/kg)/d"),
  DefinedUnit(
      code: "mmol/kg/h",
      codeUC: "(MMOL/KG)/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per kilogram per hour",
        "mmol/kg/hr",
        "mmol per kg per hr",
        "millimoles per kilograms per hour"
      ],
      printSymbol: "(mmol/kg)/h"),
  DefinedUnit(
      code: "mmol/kg/min",
      codeUC: "(MMOL/KG)/MIN",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per kilogram per minute",
        "mmol/(kg.min)",
        "mmol/kg/min",
        "mmol per kg per min",
        "millimoles per kilograms per minute"
      ],
      printSymbol: "(mmol/kg)/min"),
  DefinedUnit(
      code: "mmol/L",
      codeUC: "MMOL/L",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per liter",
        "mmol per L",
        "millimoles per liter",
        "litre"
      ],
      printSymbol: "mmol/L"),
  DefinedUnit(
      code: "mmol/m2",
      codeUC: "MMOL/M2",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per square meter",
        "mmol/m^2",
        "mmol/sq. meter",
        "mmol per m2",
        "m^2",
        "sq. meter",
        "millimoles",
        "meter squared",
        "metre"
      ],
      printSymbol: "mmol/(m<sup>2</sup>)"),
  DefinedUnit(
      code: "mmol/min",
      codeUC: "MMOL/MIN",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["millimole per minute", "mmol per min", "millimoles per minute"],
      printSymbol: "mmol/min"),
  DefinedUnit(
      code: "mmol/mmol",
      codeUC: "MMOL/MMOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per millimole",
        "mmol per mmol",
        "millimoles per millimole"
      ],
      printSymbol: "mmol/mmol"),
  DefinedUnit(
      code: "mmol/mol",
      codeUC: "MMOL/MOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["millimole per mole", "mmol per mol", "millimoles per mole"],
      printSymbol: "mmol/mol"),
  DefinedUnit(
      code: "mmol/s/L",
      codeUC: "(MMOL/S)/L",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millimole per second per liter",
        "mmol/sec/L",
        "mmol per s per L",
        "per sec",
        "millimoles per seconds per liter",
        "litre"
      ],
      printSymbol: "(mmol/s)/L"),
  DefinedUnit(
      code: "mol/kg",
      codeUC: "MOL/KG",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["mole per kilogram", "mol per kg", "moles", "mols"],
      printSymbol: "mol/kg"),
  DefinedUnit(
      code: "mol/kg/s",
      codeUC: "(MOL/KG)/S",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "mole per kilogram per second",
        "mol/kg/sec",
        "mol per kg per sec",
        "moles per kilograms per second",
        "mols"
      ],
      printSymbol: "(mol/kg)/s"),
  DefinedUnit(
      code: "mol/L",
      codeUC: "MOL/L",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "mole per liter",
        "mol per L",
        "moles per liter",
        "litre",
        "moles",
        "mols"
      ],
      printSymbol: "mol/L"),
  DefinedUnit(
      code: "mol/m3",
      codeUC: "MOL/M3",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "mole per cubic meter",
        "mol/m^3",
        "mol/cu. m",
        "mol per m3",
        "m^3",
        "cu. meter",
        "mols",
        "moles",
        "meters cubed",
        "metre",
        "mole per kiloliter",
        "kilolitre",
        "mol/kL"
      ],
      printSymbol: "mol/(m<sup>3</sup>)"),
  DefinedUnit(
      code: "mol/mL",
      codeUC: "MOL/ML",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "mole per milliliter",
        "mol per mL",
        "moles",
        "millilitre",
        "mols"
      ],
      printSymbol: "mol/mL"),
  DefinedUnit(
      code: "mol/mol",
      codeUC: "MOL/MOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["mole per mole", "mol per mol", "moles per mol", "mols"],
      printSymbol: "mol/mol"),
  DefinedUnit(
      code: "mol/s",
      codeUC: "MOL/S",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["mole per second", "mol per sec", "moles per second", "mols"],
      printSymbol: "mol/s"),
  DefinedUnit(
      code: "mosm",
      codeUC: "MOSM",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance (dissolved particles)",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["milliosmole", "milliosmoles"],
      printSymbol: "mosm"),
  DefinedUnit(
      code: "mosm/kg",
      codeUC: "MOSM/KG",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance (dissolved particles)",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliosmole per kilogram",
        "mosm per kg",
        "milliosmoles per kilogram"
      ],
      printSymbol: "mosm/kg"),
  DefinedUnit(
      code: "mosm/L",
      codeUC: "MOSM/L",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance (dissolved particles)",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milliosmole per liter",
        "mosm per liter",
        "litre",
        "milliosmoles"
      ],
      printSymbol: "mosm/L"),
  DefinedUnit(
      code: "mPa",
      codeUC: "MPAL",
      value: Value(
          unit: "N/m2",
          unitUC: "N/M2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "pressure",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["millipascal", "millipascals"],
      printSymbol: "mPa"),
  DefinedUnit(
      code: "mPa.s",
      codeUC: "MPAL.S",
      value: Value(
          unit: "N/m2",
          unitUC: "N/M2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "pressure",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "millipascal second",
        "mPa*s",
        "millipoise",
        "mP",
        "dynamic viscosity"
      ],
      printSymbol: "mPa.s"),
  DefinedUnit(
      code: "Ms",
      codeUC: "MAS",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["megasecond", "megaseconds"],
      printSymbol: "Ms"),
  DefinedUnit(
      code: "ms",
      codeUC: "MS",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["millisecond", "milliseconds", "duration"],
      printSymbol: "ms"),
  DefinedUnit(
      code: "mU/g",
      codeUC: "MU/G",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milli enzyme unit per gram",
        "mU per gm",
        "milli enzyme units per gram",
        "enzyme activity",
        "enzymatic activity per mass"
      ],
      printSymbol: "mU/g"),
  DefinedUnit(
      code: "mU/L",
      codeUC: "MU/L",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milli enzyme unit per liter",
        "mU per liter",
        "litre",
        "milli enzyme units enzymatic activity per volume",
        "enzyme activity"
      ],
      printSymbol: "mU/L"),
  DefinedUnit(
      code: "mU/mg",
      codeUC: "MU/MG",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milli enzyme unit per milligram",
        "mU per mg",
        "milli enzyme units per milligram"
      ],
      printSymbol: "mU/mg"),
  DefinedUnit(
      code: "mU/mL",
      codeUC: "MU/ML",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milli enzyme unit per milliliter",
        "mU per mL",
        "milli enzyme units per milliliter",
        "millilitre",
        "enzymatic activity per volume",
        "enzyme activity"
      ],
      printSymbol: "mU/mL"),
  DefinedUnit(
      code: "mU/mL/min",
      codeUC: "(MU/ML)/MIN",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "milli enzyme unit per milliliter per minute",
        "mU per mL per min",
        "mU per milliliters per minute",
        "millilitres",
        "milli enzyme units",
        "enzymatic activity",
        "enzyme activity"
      ],
      printSymbol: "(mU/mL)/min"),
  DefinedUnit(
      code: "mV",
      codeUC: "MV",
      value: Value(
          unit: "J/C",
          unitUC: "J/C",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "electric potential",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["millivolt", "millivolts"],
      printSymbol: "mV"),
  DefinedUnit(
      code: "N.cm",
      codeUC: "N.CM",
      value: Value(
          unit: "kg.m/s2",
          unitUC: "KG.M/S2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "force",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "Newton centimeter",
        "N*cm",
        "Ncm",
        "N cm",
        "Newton*centimeters",
        "Newton* centimetres",
        "torque",
        "work"
      ],
      printSymbol: "N.cm"),
  DefinedUnit(
      code: "N.s",
      codeUC: "N.S",
      value: Value(
          unit: "kg.m/s2",
          unitUC: "KG.M/S2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "force",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "Newton second",
        "Newton*seconds",
        "N*s",
        "N s",
        "Ns",
        "impulse",
        "imp"
      ],
      printSymbol: "N.s"),
  DefinedUnit(
      code: "ng",
      codeUC: "NG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["nanogram", "nanograms"],
      printSymbol: "ng"),
  DefinedUnit(
      code: "ng/(24.h)",
      codeUC: "NG/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "nanogram per 24 hour",
        "ng/24hrs",
        "ng/24 hrs",
        "nanograms per 24 hours"
      ],
      printSymbol: "ng/h"),
  DefinedUnit(
      code: "ng/(8.h)",
      codeUC: "NG/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "nanogram per 8 hour",
        "ng/8hrs",
        "ng/8 hrs",
        "nanograms per 8 hours"
      ],
      printSymbol: "ng/h"),
  DefinedUnit(
      code: "ng/10*6",
      codeUC: "NG/(10*6)",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "nanogram per million",
        "ng/10^6",
        "ng per 10*6",
        "10^6",
        "nanograms"
      ],
      printSymbol: "ng/(10<sup>6</sup>)"),
  DefinedUnit(
      code: "ng/d",
      codeUC: "NG/D",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["nanogram per day", "ng/dy", "ng per day", "nanograms"],
      printSymbol: "ng/d"),
  DefinedUnit(
      code: "ng/dL",
      codeUC: "NG/DL",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "nanogram per deciliter",
        "ng per dL",
        "nanograms per deciliter",
        "decilitre"
      ],
      printSymbol: "ng/dL"),
  DefinedUnit(
      code: "ng/g",
      codeUC: "NG/G",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["nanogram per gram", "ng/gm", "ng per gm", "nanograms per gram"],
      printSymbol: "ng/g"),
  DefinedUnit(
      code: "ng/h",
      codeUC: "NG/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["nanogram per hour", "ng/hr", "ng per hr", "nanograms per hour"],
      printSymbol: "ng/h"),
  DefinedUnit(
      code: "ng/kg",
      codeUC: "NG/KG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["nanogram per kilogram", "ng per kg", "nanograms per kilogram"],
      printSymbol: "ng/kg"),
  DefinedUnit(
      code: "ng/kg/(8.h)",
      codeUC: "(NG/KG)/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "nanogram per kilogram per 8 hour",
        "ng/(8.h.kg)",
        "ng/kg/8hrs",
        "ng/kg/8 hrs",
        "ng per kg per 8hrs",
        "8 hrs",
        "nanograms per kilograms per 8 hours",
        "shift"
      ],
      printSymbol: "(ng/kg)/h"),
  DefinedUnit(
      code: "ng/kg/h",
      codeUC: "(NG/KG)/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "nanogram per kilogram per hour",
        "ng/(kg.h)",
        "ng/kg/hr",
        "ng per kg per hr",
        "nanograms per kilograms per hour"
      ],
      printSymbol: "(ng/kg)/h"),
  DefinedUnit(
      code: "ng/kg/min",
      codeUC: "(NG/KG)/MIN",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "nanogram per kilogram per minute",
        "ng/(kg.min)",
        "ng per kg per min",
        "nanograms per kilograms per minute"
      ],
      printSymbol: "(ng/kg)/min"),
  DefinedUnit(
      code: "ng/L",
      codeUC: "NG/L",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["nanogram per liter", "ng per L", "nanograms per liter", "litre"],
      printSymbol: "ng/L"),
  DefinedUnit(
      code: "ng/m2",
      codeUC: "NG/M2",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "nanogram per square meter",
        "ng/m^2",
        "ng/sq. m",
        "ng per m2",
        "m^2",
        "sq. meter",
        "nanograms",
        "meter squared",
        "metre"
      ],
      printSymbol: "ng/(m<sup>2</sup>)"),
  DefinedUnit(
      code: "ng/mg",
      codeUC: "NG/MG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["nanogram per milligram", "ng per mg", "nanograms"],
      printSymbol: "ng/mg"),
  DefinedUnit(
      code: "ng/mg/h",
      codeUC: "(NG/MG)/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "nanogram per milligram per hour",
        "ng/mg/hr",
        "ng per mg per hr",
        "nanograms per milligrams per hour"
      ],
      printSymbol: "(ng/mg)/h"),
  DefinedUnit(
      code: "ng/min",
      codeUC: "NG/MIN",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["nanogram per minute", "ng per min", "nanograms"],
      printSymbol: "ng/min"),
  DefinedUnit(
      code: "ng/mL",
      codeUC: "NG/ML",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "nanogram per millliiter",
        "ng per mL",
        "nanograms",
        "millilitre"
      ],
      printSymbol: "ng/mL"),
  DefinedUnit(
      code: "ng/mL/h",
      codeUC: "(NG/ML)/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "nanogram per milliliter per hour",
        "ng/mL/hr",
        "ng per mL per mL",
        "nanograms per milliliter per hour",
        "nanogram per millilitre per hour",
        "nanograms per millilitre per hour",
        "enzymatic activity per volume",
        "enzyme activity per milliliters"
      ],
      printSymbol: "(ng/mL)/h"),
  DefinedUnit(
      code: "ng/s",
      codeUC: "NG/S",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "nanogram per second",
        "ng/sec",
        "ng per sec",
        "nanograms per second"
      ],
      printSymbol: "ng/s"),
  DefinedUnit(
      code: "ng/U",
      codeUC: "NG/U",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "nanogram per enzyme unit",
        "ng per U",
        "nanograms per enzyme unit"
      ],
      printSymbol: "ng/U"),
  DefinedUnit(
      code: "nkat",
      codeUC: "NKAT",
      value: Value(
          unit: "mol/s",
          unitUC: "MOL/S",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["nanokatal", "nanokatals"],
      printSymbol: "nkat"),
  DefinedUnit(
      code: "nL",
      codeUC: "NL",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["nanoliter", "nanoliters", "nanolitres"],
      printSymbol: "nL"),
  DefinedUnit(
      code: "nm",
      codeUC: "NM",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["nanometer", "nanometers", "nanometres"],
      printSymbol: "nm"),
  DefinedUnit(
      code: "nm/s/L",
      codeUC: "(NM/S)/L",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "nanometer per second per liter",
        "nm/sec/liter",
        "nm/sec/litre",
        "nm per s per l",
        "nm per sec per l",
        "nanometers per second per liter",
        "nanometre per second per litre",
        "nanometres per second per litre"
      ],
      printSymbol: "(nm/s)/L"),
  DefinedUnit(
      code: "nmol",
      codeUC: "NMOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["nanomole", "nanomoles"],
      printSymbol: "nmol"),
  DefinedUnit(
      code: "nmol/(24.h)",
      codeUC: "NMOL/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per 24 hour",
        "nmol/24hr",
        "nmol/24 hr",
        "nanomoles per 24 hours",
        "nmol/day",
        "nanomoles per day",
        "nmol per day",
        "nanomole/day",
        "nanomol/day"
      ],
      printSymbol: "nmol/h"),
  DefinedUnit(
      code: "nmol/d",
      codeUC: "NMOL/D",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per day",
        "nmol/day",
        "nanomoles per day",
        "nmol per day",
        "nanomole/day",
        "nanomol/day",
        "nmol/24hr",
        "nmol/24 hr",
        "nanomoles per 24 hours",
        ""
      ],
      printSymbol: "nmol/d"),
  DefinedUnit(
      code: "nmol/dL",
      codeUC: "NMOL/DL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per deciliter",
        "nmol per dL",
        "nanomoles per deciliter",
        "nanomole per decilitre",
        "nanomoles per decilitre",
        "nanomole/deciliter",
        "nanomole/decilitre",
        "nanomol/deciliter",
        "nanomol/decilitre"
      ],
      printSymbol: "nmol/dL"),
  DefinedUnit(
      code: "nmol/g",
      codeUC: "NMOL/G",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per gram",
        "nmol per gram",
        "nanomoles per gram",
        "nanomole/gram"
      ],
      printSymbol: "nmol/g"),
  DefinedUnit(
      code: "nmol/h/L",
      codeUC: "(NMOL/HR)/L",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per hour per liter",
        "nmol/hrs/L",
        "nmol per hrs per L",
        "nanomoles per hours per liter",
        "litre",
        "enzymatic activity per volume",
        "enzyme activities"
      ],
      printSymbol: "(nmol/h)/L"),
  DefinedUnit(
      code: "nmol/L",
      codeUC: "NMOL/L",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per liter",
        "nmol per L",
        "nanomoles per liter",
        "litre"
      ],
      printSymbol: "nmol/L"),
  DefinedUnit(
      code: "nmol/mg",
      codeUC: "NMOL/MG",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per milligram",
        "nmol per mg",
        "nanomoles per milligram"
      ],
      printSymbol: "nmol/mg"),
  DefinedUnit(
      code: "nmol/mg/h",
      codeUC: "(NMOL/MG)/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per milligram per hour",
        "nmol/mg/hr",
        "nmol per mg per hr",
        "nanomoles per milligrams per hour"
      ],
      printSymbol: "(nmol/mg)/h"),
  DefinedUnit(
      code: "nmol/mgDefinedUnit(prot)",
      codeUC: "NMOL/MG",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per milligram of protein",
        "nanomoles",
        "nmol/mg prot",
        "nmol per mg prot"
      ],
      printSymbol: "nmol/mg"),
  DefinedUnit(
      code: "nmol/min",
      codeUC: "NMOL/MIN",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per minute",
        "nmol per min",
        "nanomoles per minute",
        "milli enzyme units",
        "enzyme activity per volume",
        "enzymatic activity"
      ],
      printSymbol: "nmol/min"),
  DefinedUnit(
      code: "nmol/min/mL",
      codeUC: "(NMOL/MIN)/ML",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per minute per milliliter",
        "nmol per min per mL",
        "nanomoles per minutes per milliliter",
        "millilitre",
        "milli enzyme units per volume",
        "enzyme activity",
        "enzymatic activity"
      ],
      printSymbol: "(nmol/min)/mL"),
  DefinedUnit(
      code: "nmol/mL",
      codeUC: "NMOL/ML",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per milliliter",
        "nmol per mL",
        "nanomoles per milliliter",
        "millilitre"
      ],
      printSymbol: "nmol/mL"),
  DefinedUnit(
      code: "nmol/mL/h",
      codeUC: "(NMOL/ML)/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per milliliter per hour",
        "nmol/mL/hr",
        "nmol per mL per hr",
        "nanomoles per milliliters per hour",
        "millilitres",
        "milli enzyme units per volume",
        "enzyme activity",
        "enzymatic activity"
      ],
      printSymbol: "(nmol/mL)/h"),
  DefinedUnit(
      code: "nmol/mL/min",
      codeUC: "(NMOL/ML)/MIN",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per milliliter per minute",
        "nmol per mL per min",
        "nanomoles per milliliters per min",
        "millilitres",
        "milli enzyme units per volume",
        "enzyme activity",
        "enzymatic activity"
      ],
      printSymbol: "(nmol/mL)/min"),
  DefinedUnit(
      code: "nmol/mmol",
      codeUC: "NMOL/MMOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per millimole",
        "nmol per mmol",
        "nanomoles per millimole"
      ],
      printSymbol: "nmol/mmol"),
  DefinedUnit(
      code: "nmol/mmolDefinedUnit(creat)",
      codeUC: "NMOL/MMOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["nanomole per millimole of creatinine", "nanomoles"],
      printSymbol: "nmol/mmol"),
  DefinedUnit(
      code: "nmol/mol",
      codeUC: "NMOL/MOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["nanomole per mole", "nmol per mole", "nanomoles"],
      printSymbol: "nmol/mol"),
  DefinedUnit(
      code: "nmol/nmol",
      codeUC: "NMOL/NMOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["nanomole per nanomole", "nmol per nmol", "nanomoles"],
      printSymbol: "nmol/nmol"),
  DefinedUnit(
      code: "nmol/s",
      codeUC: "NMOL/S",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per second",
        "nmol/sec",
        "nmol per sec",
        "nanomoles per sercond",
        "milli enzyme units",
        "enzyme activity",
        "enzymatic activity"
      ],
      printSymbol: "nmol/s"),
  DefinedUnit(
      code: "nmol/s/L",
      codeUC: "(NMOL/S)/L",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanomole per second per liter",
        "nmol/sec/L",
        "nmol per s per L",
        "nmol per sec per L",
        "nanomoles per seconds per liter",
        "litre",
        "milli enzyme units per volume",
        "enzyme activity",
        "enzymatic activity"
      ],
      printSymbol: "(nmol/s)/L"),
  DefinedUnit(
      code: "ns",
      codeUC: "NS",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["nanosecond", "nanoseconds"],
      printSymbol: "ns"),
  DefinedUnit(
      code: "nU/mL",
      codeUC: "NU/ML",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "nanoenzyme unit per milliliter",
        "nU per mL",
        "nanoenzyme units per milliliter",
        "millilitre",
        "enzymatic activity per volume",
        "enzyme activity"
      ],
      printSymbol: "nU/mL"),
  DefinedUnit(
      code: "Ohm.m",
      codeUC: "OHM.M",
      value: Value(
          unit: "V/A",
          unitUC: "V/A",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "electric resistance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["Ohm meter", "electric resistivity", "meters", "metres"],
      printSymbol: "Ω.m"),
  DefinedUnit(
      code: "osm/kg",
      codeUC: "OSM/KG",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance (dissolved particles)",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "osmole per kilogram",
        "osm per kg",
        "osmoles per kilogram",
        "osmols"
      ],
      printSymbol: "osm/kg"),
  DefinedUnit(
      code: "osm/L",
      codeUC: "OSM/L",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance (dissolved particles)",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "osmole per liter",
        "osm per L",
        "osmoles per liter",
        "litre",
        "osmols"
      ],
      printSymbol: "osm/L"),
  DefinedUnit(
      code: "pA",
      codeUC: "PA",
      value: Value(
          unit: "C/s",
          unitUC: "C/S",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "electric current",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["picoampere", "picoamperes"],
      printSymbol: "pA"),
  DefinedUnit(
      code: "pg",
      codeUC: "PG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["picogram", "picograms"],
      printSymbol: "pg"),
  DefinedUnit(
      code: "pg/dL",
      codeUC: "PG/DL",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["picogram per deciliter", "pg per dL", "picograms", "decilitre"],
      printSymbol: "pg/dL"),
  DefinedUnit(
      code: "pg/L",
      codeUC: "PG/L",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["picogram per liter", "pg per L", "picograms", "litre"],
      printSymbol: "pg/L"),
  DefinedUnit(
      code: "pg/mg",
      codeUC: "PG/MG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["picogram per milligram", "pg per mg", "picograms"],
      printSymbol: "pg/mg"),
  DefinedUnit(
      code: "pg/mL",
      codeUC: "PG/ML",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "picogram per milliliter",
        "pg per mL",
        "picograms per milliliter",
        "millilitre"
      ],
      printSymbol: "pg/mL"),
  DefinedUnit(
      code: "pg/mm",
      codeUC: "PG/MM",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "picogram per millimeter",
        "pg per mm",
        "picogram/millimeter",
        "picogram/millimetre",
        "picograms per millimeter",
        "millimetre"
      ],
      printSymbol: "pg/mm"),
  DefinedUnit(
      code: "pkat",
      codeUC: "PKAT",
      value: Value(
          unit: "mol/s",
          unitUC: "MOL/S",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["picokatal", "pkats", "picokatals"],
      printSymbol: "pkat"),
  DefinedUnit(
      code: "pL",
      codeUC: "PL",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["picoliter", "picoliters", "picolitres"],
      printSymbol: "pL"),
  DefinedUnit(
      code: "pm",
      codeUC: "PM",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["picometer", "picometers", "picometres"],
      printSymbol: "pm"),
  DefinedUnit(
      code: "pmol",
      codeUC: "PMOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["picomole", "picomoles", "pmols"],
      printSymbol: "pmol"),
  DefinedUnit(
      code: "pmol/(24.h)",
      codeUC: "PMOL/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "picomole per 24 hour",
        "pmol/24hrs",
        "pmol/24 hrs",
        "pmol per 24 hrs",
        "24hrs",
        "days",
        "dy",
        "picomoles per 24 hours"
      ],
      printSymbol: "pmol/h"),
  DefinedUnit(
      code: "pmol/d",
      codeUC: "PMOL/D",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "picomole per day",
        "pmol/dy",
        "pmol per day",
        "24 hours",
        "24hrs",
        "24 hrs",
        "picomoles"
      ],
      printSymbol: "pmol/d"),
  DefinedUnit(
      code: "pmol/dL",
      codeUC: "PMOL/DL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "picomole per deciliter",
        "pmol per dL",
        "picomoles per deciliter",
        "decilitre"
      ],
      printSymbol: "pmol/dL"),
  DefinedUnit(
      code: "pmol/g",
      codeUC: "PMOL/G",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "picomole per gram",
        "pmol per gm",
        "picomoles per gram",
        "picomole/gram"
      ],
      printSymbol: "pmol/g"),
  DefinedUnit(
      code: "pmol/h/mL",
      codeUC: "(PMOL/HR)/ML",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "picomole per hour per milliliter ",
        "pmol/hrs/mL",
        "pmol per hrs per mL",
        "picomoles per hour per milliliter",
        "millilitre",
        "micro enzyme units per volume",
        "enzymatic activity",
        "enzyme activity"
      ],
      printSymbol: "(pmol/h)/mL"),
  DefinedUnit(
      code: "pmol/L",
      codeUC: "PMOL/L",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "picomole per liter",
        "picomole/liter",
        "pmol per L",
        "picomoles",
        "litre"
      ],
      printSymbol: "pmol/L"),
  DefinedUnit(
      code: "pmol/min",
      codeUC: "PMOL/MIN",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "picomole per minute",
        "picomole/minute",
        "pmol per min",
        "picomoles per minute",
        "micro enzyme units",
        "enzymatic activity",
        "enzyme activity"
      ],
      printSymbol: "pmol/min"),
  DefinedUnit(
      code: "pmol/mL",
      codeUC: "PMOL/ML",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "picomole per milliliter",
        "picomole/milliliter",
        "picomole/millilitre",
        "pmol per mL",
        "picomoles",
        "millilitre",
        "picomols",
        "pmols"
      ],
      printSymbol: "pmol/mL"),
  DefinedUnit(
      code: "pmol/umol",
      codeUC: "PMOL/UMOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "picomole per micromole",
        "pmol/mcgmol",
        "picomole/micromole",
        "pmol per umol",
        "pmol per mcgmol",
        "picomoles"
      ],
      printSymbol: "pmol/μmol"),
  DefinedUnit(
      code: "ps",
      codeUC: "PS",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["picosecond", "picoseconds", "psec"],
      printSymbol: "ps"),
  DefinedUnit(
      code: "pT",
      codeUC: "PT",
      value: Value(
          unit: "Wb/m2",
          unitUC: "WB/M2",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "magnetic flux density",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["picotesla", "picoteslas"],
      printSymbol: "pT"),
  DefinedUnit(
      code: "U/(12.h)",
      codeUC: "U/HR",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit per 12 hour",
        "U/12hrs",
        "U/ 12hrs",
        "U per 12 hrs",
        "12hrs",
        "enzyme units per 12 hours",
        "enzyme activity",
        "enzymatic activity per time",
        "umol per min per 12 hours",
        "micromoles per minute per 12 hours",
        "umol/min/12hr"
      ],
      printSymbol: "U/h"),
  DefinedUnit(
      code: "U/(2.h)",
      codeUC: "U/HR",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit per 2 hour",
        "U/2hrs",
        "U/ 2hrs",
        "U per 2 hrs",
        "2hrs",
        "enzyme units per 2 hours",
        "enzyme activity",
        "enzymatic activity per time",
        "umol per minute per 2 hours",
        "micromoles per minute",
        "umol/min/2hr",
        "umol per min per 2hr"
      ],
      printSymbol: "U/h"),
  DefinedUnit(
      code: "U/(24.h)",
      codeUC: "U/HR",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit per 24 hour",
        "U/24hrs",
        "U/ 24hrs",
        "U per 24 hrs",
        "24hrs",
        "enzyme units per 24 hours",
        "enzyme activity",
        "enzymatic activity per time",
        "micromoles per minute per 24 hours",
        "umol/min/24hr",
        "umol per min per 24hr"
      ],
      printSymbol: "U/h"),
  DefinedUnit(
      code: "U/10",
      codeUC: "U",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit per 10",
        "enzyme unit/10",
        "U per 10",
        "enzyme units per 10",
        "enzymatic activity",
        "enzyme activity",
        "micromoles per minute",
        "umol/min/10"
      ],
      printSymbol: "U"),
  DefinedUnit(
      code: "U/10*10",
      codeUC: "U/(10*10)",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit per 10 billion",
        "U per 10*10",
        "enzyme units per 10*10",
        "U per 10 billion",
        "enzyme units",
        "enzymatic activity",
        "micromoles per minute per 10 billion",
        "umol/min/10*10"
      ],
      printSymbol: "U/(10<sup>10</sup>)"),
  DefinedUnit(
      code: "U/10*12",
      codeUC: "U/(10*12)",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit per trillion",
        "enzyme unit/10*12",
        "U per 10*12",
        "enzyme units per 10*12",
        "enzyme units per trillion",
        "enzymatic activity",
        "micromoles per minute per trillion",
        "umol/min/10*12",
        "umol per min per 10*12"
      ],
      printSymbol: "U/(10<sup>12</sup>)"),
  DefinedUnit(
      code: "U/10*6",
      codeUC: "U/(10*6)",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit per million",
        "enzyme unit/10*6",
        "U per 10*6",
        "enzyme units per 10*6",
        "enzyme units",
        "enzymatic activity per volume",
        "micromoles per minute per million",
        "umol/min/10*6",
        "umol per min per 10*6"
      ],
      printSymbol: "U/(10<sup>6</sup>)"),
  DefinedUnit(
      code: "U/10*9",
      codeUC: "U/(10*9)",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit per billion",
        "enzyme unit/10*9",
        "U per 10*9",
        "enzyme units per 10*9",
        "enzymatic activity per volume",
        "micromoles per minute per billion",
        "umol/min/10*9",
        "umol per min per 10*9"
      ],
      printSymbol: "U/(10<sup>9</sup>)"),
  DefinedUnit(
      code: "U/d",
      codeUC: "U/D",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit per day",
        "U/dy",
        "enzyme units per day",
        "enzyme units",
        "enzyme activity",
        "enzymatic activity per time",
        "micromoles per minute per day",
        "umol/min/day",
        "umol per min per day"
      ],
      printSymbol: "U/d"),
  DefinedUnit(
      code: "U/dL",
      codeUC: "U/DL",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit per deciliter",
        "U per dL",
        "enzyme units per deciliter",
        "decilitre",
        "micromoles per minute per deciliter",
        "umol/min/dL",
        "umol per min per dL"
      ],
      printSymbol: "U/dL"),
  DefinedUnit(
      code: "U/g",
      codeUC: "U/G",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit per gram",
        "U/gm",
        "U per gm",
        "enzyme units per gram",
        "micromoles per minute per gram",
        "umol/min/g",
        "umol per min per g"
      ],
      printSymbol: "U/g"),
  DefinedUnit(
      code: "U/h",
      codeUC: "U/HR",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit per hour",
        "U/hr",
        "U per hr",
        "enzyme units per hour",
        "micromoles per minute per hour",
        "umol/min/hr",
        "umol per min per hr"
      ],
      printSymbol: "U/h"),
  DefinedUnit(
      code: "U/L",
      codeUC: "U/L",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit per liter",
        "enzyme unit/liter",
        "enzyme unit/litre",
        "U per L",
        "enzyme units per liter",
        "enzyme unit per litre",
        "micromoles per minute per liter",
        "umol/min/L",
        "umol per min per L"
      ],
      printSymbol: "U/L"),
  DefinedUnit(
      code: "U/min",
      codeUC: "U/MIN",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit per minute",
        "enzyme unit/minute",
        "U per min",
        "enzyme units",
        "umol/min/min",
        "micromoles per minute per minute",
        "micromoles per min per min",
        "umol"
      ],
      printSymbol: "U/min"),
  DefinedUnit(
      code: "U/mL",
      codeUC: "U/ML",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit per milliliter",
        "U per mL",
        "enzyme units per milliliter",
        "millilitre",
        "micromoles per minute per milliliter",
        "umol/min/mL",
        "umol per min per mL"
      ],
      printSymbol: "U/mL"),
  DefinedUnit(
      code: "U/s",
      codeUC: "U/S",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "enzyme unit per second",
        "U/sec",
        "U per second",
        "enzyme units per second",
        "micromoles per minute per second",
        "umol/min/sec",
        "umol per min per sec"
      ],
      printSymbol: "U/s"),
  DefinedUnit(
      code: "u[IU]",
      codeUC: "U[IU]",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micro international unit",
        "uIU",
        "u IU",
        "microinternational units"
      ],
      printSymbol: "μi.U."),
  DefinedUnit(
      code: "u[IU]/L",
      codeUC: "U[IU]/L",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micro international unit per liter",
        "uIU/L",
        "u IU/L",
        "uIU per L",
        "microinternational units per liter",
        "litre",
        ""
      ],
      printSymbol: "(μi.U.)/L"),
  DefinedUnit(
      code: "u[IU]/mL",
      codeUC: "U[IU]/ML",
      value: Value(
          unit: "[iU]",
          unitUC: "[IU]",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "arbitrary",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micro international unit per milliliter",
        "uIU/mL",
        "u IU/mL",
        "uIU per mL",
        "microinternational units per milliliter",
        "millilitre"
      ],
      printSymbol: "(μi.U.)/mL"),
  DefinedUnit(
      code: "ueq",
      codeUC: "UEQ",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "microequivalent",
        "microequivalents",
        "10^-6 equivalents",
        "10-6 equivalents"
      ],
      printSymbol: "μeq"),
  DefinedUnit(
      code: "ueq/L",
      codeUC: "UEQ/L",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "microequivalent per liter",
        "ueq per liter",
        "litre",
        "microequivalents"
      ],
      printSymbol: "μeq/L"),
  DefinedUnit(
      code: "ueq/mL",
      codeUC: "UEQ/ML",
      value: Value(
          unit: "mol",
          unitUC: "MOL",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "microequivalent per milliliter",
        "ueq per milliliter",
        "millilitre",
        "microequivalents"
      ],
      printSymbol: "μeq/mL"),
  DefinedUnit(
      code: "ug",
      codeUC: "UG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["microgram", "mcg", "micrograms", "10^-6 grams", "10-6 grams"],
      printSymbol: "μg"),
  DefinedUnit(
      code: "ug/(100.g)",
      codeUC: "UG/G",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per 100 gram",
        "ug/100gm",
        "ug/100 gm",
        "mcg",
        "ug per 100g",
        "100 gm",
        "mcg per 100g",
        "micrograms per 100 grams"
      ],
      printSymbol: "μg/g"),
  DefinedUnit(
      code: "ug/(24.h)",
      codeUC: "UG/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per 24 hour",
        "ug/24hrs",
        "ug/24 hrs",
        "mcg/24hrs",
        "ug per 24hrs",
        "mcg per 24hrs",
        "24 hrs",
        "micrograms per 24 hours"
      ],
      printSymbol: "μg/h"),
  DefinedUnit(
      code: "ug/(8.h)",
      codeUC: "UG/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per 8 hour",
        "ug/8hrs",
        "ug/8 hrs",
        "mcg/8hrs",
        "ug per 8hrs",
        "mcg per 8hrs",
        "8 hrs",
        "micrograms per 8 hours",
        "shift"
      ],
      printSymbol: "μg/h"),
  DefinedUnit(
      code: "ug/[sft_i]",
      codeUC: "UG/[SFT_I]",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per square foot (international)",
        "ug/sft",
        "ug/ft2",
        "ug/ft^2",
        "ug/sq. ft",
        "micrograms",
        "sq. foot",
        "foot squared"
      ],
      printSymbol: "μg"),
  DefinedUnit(
      code: "ug/d",
      codeUC: "UG/D",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per day",
        "ug/dy",
        "mcg/dy",
        "ug per day",
        "mcg",
        "micrograms per day"
      ],
      printSymbol: "μg/d"),
  DefinedUnit(
      code: "ug/dL",
      codeUC: "UG/DL",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per deciliter",
        "ug per dL",
        "mcg/dl",
        "mcg per dl",
        "micrograms per deciliter",
        "decilitre"
      ],
      printSymbol: "μg/dL"),
  DefinedUnit(
      code: "ug/g",
      codeUC: "UG/G",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per gram",
        "ug per gm",
        "mcg/gm",
        "mcg per g",
        "micrograms per gram"
      ],
      printSymbol: "μg/g"),
  DefinedUnit(
      code: "ug/h",
      codeUC: "UG/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per hour",
        "ug/hr",
        "mcg/hr",
        "mcg per hr",
        "ug per hr",
        "ug per hour",
        "micrograms"
      ],
      printSymbol: "μg/h"),
  DefinedUnit(
      code: "ug/kg",
      codeUC: "UG/KG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per kilogram",
        "ug per kg",
        "mcg/kg",
        "mcg per kg",
        "micrograms per kilogram"
      ],
      printSymbol: "μg/kg"),
  DefinedUnit(
      code: "ug/kg/(8.h)",
      codeUC: "(UG/KG)/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per kilogram per 8 hour",
        "ug/kg/8hrs",
        "mcg/kg/8hrs",
        "ug/kg/8 hrs",
        "mcg/kg/8 hrs",
        "ug per kg per 8hrs",
        "8 hrs",
        "mcg per kg per 8hrs",
        "micrograms per kilograms per 8 hours",
        "shift"
      ],
      printSymbol: "(μg/kg)/h"),
  DefinedUnit(
      code: "ug/kg/d",
      codeUC: "(UG/KG)/D",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per kilogram per day",
        "ug/(kg.d)",
        "ug/kg/dy",
        "mcg/kg/day",
        "ug per kg per dy",
        "24 hours",
        "24hrs",
        "mcg",
        "kilograms",
        "microgram per kilogram and day"
      ],
      printSymbol: "(μg/kg)/d"),
  DefinedUnit(
      code: "ug/kg/h",
      codeUC: "(UG/KG)/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per kilogram per hour",
        "ug/(kg.h)",
        "ug/kg/hr",
        "mcg/kg/hr",
        "ug per kg per hr",
        "mcg per kg per hr",
        "kilograms"
      ],
      printSymbol: "(μg/kg)/h"),
  DefinedUnit(
      code: "ug/kg/min",
      codeUC: "(UG/KG)/MIN",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per kilogram per minute",
        "ug/kg/min",
        "ug/kg/min",
        "mcg/kg/min",
        "ug per kg per min",
        "mcg",
        "micrograms per kilograms per minute"
      ],
      printSymbol: "(μg/kg)/min"),
  DefinedUnit(
      code: "ug/L",
      codeUC: "UG/L",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per liter",
        "mcg/L",
        "ug per L",
        "mcg",
        "micrograms per liter",
        "litre"
      ],
      printSymbol: "μg/L"),
  DefinedUnit(
      code: "ug/L/(24.h)",
      codeUC: "(UG/L)/HR",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per liter per 24 hour",
        "ug/L/24hrs",
        "ug/L/24 hrs",
        "mcg/L/24hrs",
        "ug per L per 24hrs",
        "24 hrs",
        "day",
        "dy mcg",
        "micrograms per liters per 24 hours",
        "litres"
      ],
      printSymbol: "(μg/L)/h"),
  DefinedUnit(
      code: "ug/m2",
      codeUC: "UG/M2",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per square meter",
        "ug/m^2",
        "ug/sq. m",
        "mcg/m2",
        "mcg/m^2",
        "mcg/sq. m",
        "ug per m2",
        "m^2",
        "sq. meter",
        "mcg",
        "micrograms per square meter",
        "meter squared",
        "metre"
      ],
      printSymbol: "μg/(m<sup>2</sup>)"),
  DefinedUnit(
      code: "ug/m3",
      codeUC: "UG/M3",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per cubic meter",
        "ug/m^3",
        "ug/cu. m",
        "mcg/m3",
        "mcg/m^3",
        "mcg/cu. m",
        "ug per m3",
        "ug per m^3",
        "ug per cu. m",
        "mcg",
        "micrograms per cubic meter",
        "meter cubed",
        "metre"
      ],
      printSymbol: "μg/(m<sup>3</sup>)"),
  DefinedUnit(
      code: "ug/mg",
      codeUC: "UG/MG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per milligram",
        "ug per mg",
        "mcg/mg",
        "mcg per mg",
        "micromilligrams per milligram"
      ],
      printSymbol: "μg/mg"),
  DefinedUnit(
      code: "ug/min",
      codeUC: "UG/MIN",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per minute",
        "ug per min",
        "mcg/min",
        "mcg per min",
        "microminutes per minute"
      ],
      printSymbol: "μg/min"),
  DefinedUnit(
      code: "ug/mL",
      codeUC: "UG/ML",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per milliliter",
        "ug per mL",
        "mcg/mL",
        "mcg per mL",
        "micrograms per milliliter",
        "millilitre"
      ],
      printSymbol: "μg/mL"),
  DefinedUnit(
      code: "ug/mmol",
      codeUC: "UG/MMOL",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per millimole",
        "ug per mmol",
        "mcg/mmol",
        "mcg per mmol",
        "micrograms per millimole"
      ],
      printSymbol: "μg/mmol"),
  DefinedUnit(
      code: "ug/ng",
      codeUC: "UG/NG",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "mass",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microgram per nanogram",
        "ug per ng",
        "mcg/ng",
        "mcg per ng",
        "micrograms per nanogram"
      ],
      printSymbol: "μg/ng"),
  DefinedUnit(
      code: "ukat",
      codeUC: "UKAT",
      value: Value(
          unit: "mol/s",
          unitUC: "MOL/S",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["microkatal", "microkatals", "ukats"],
      printSymbol: "μkat"),
  DefinedUnit(
      code: "uL",
      codeUC: "UL",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["microliter", "microliters", "microlitres", "mcl"],
      printSymbol: "μL"),
  DefinedUnit(
      code: "uL/(2.h)",
      codeUC: "UL/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "microliter per 2 hour",
        "uL/2hrs",
        "uL/2 hrs",
        "mcg/2hr",
        "mcg per 2hr",
        "uL per 2hr",
        "uL per 2 hrs",
        "microliters per 2 hours",
        "microlitres"
      ],
      printSymbol: "μL/h"),
  DefinedUnit(
      code: "uL/h",
      codeUC: "UL/HR",
      value: Value(
          unit: "l", unitUC: null, value: Decimal.fromString('1'), text: "1"),
      property: "volume",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "microliter per hour",
        "uL/hr",
        "mcg/hr",
        "mcg per hr",
        "uL per hr",
        "microliters per hour",
        "microlitres"
      ],
      printSymbol: "μL/h"),
  DefinedUnit(
      code: "um",
      codeUC: "UM",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["micrometer", "micrometers", "micrometres", "μm", "microns"],
      printSymbol: "μm"),
  DefinedUnit(
      code: "um/s",
      codeUC: "UM/S",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "length",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: [
        "microns per second",
        "um/sec",
        "micron/second",
        "microns/second",
        "um per sec",
        "micrometers per second",
        "micrometres"
      ],
      printSymbol: "μm/s"),
  DefinedUnit(
      code: "umol",
      codeUC: "UMOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["micromole", "micromoles", "umols"],
      printSymbol: "μmol"),
  DefinedUnit(
      code: "umol/(2.h)",
      codeUC: "UMOL/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per 2 hour",
        "umol/2hrs",
        "umol/2 hrs",
        "umol per 2 hrs",
        "2hrs",
        "micromoles per 2 hours"
      ],
      printSymbol: "μmol/h"),
  DefinedUnit(
      code: "umol/(24.h)",
      codeUC: "UMOL/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per 24 hour",
        "umol/24hrs",
        "umol/24 hrs",
        "umol per 24 hrs",
        "per 24hrs",
        "micromoles per 24 hours"
      ],
      printSymbol: "μmol/h"),
  DefinedUnit(
      code: "umol/(8.h)",
      codeUC: "UMOL/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per 8 hour",
        "umol/8hr",
        "umol/8 hr",
        "umol per 8 hr",
        "umol per 8hr",
        "umols per 8hr",
        "umol per 8 hours",
        "micromoles per 8 hours",
        "shift"
      ],
      printSymbol: "μmol/h"),
  DefinedUnit(
      code: "umol/d",
      codeUC: "UMOL/D",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per day",
        "umol/day",
        "umol per day",
        "umols per day",
        "umol per days",
        "micromoles per days",
        "umol/24hr",
        "umol/24 hr",
        "umol per 24 hr",
        "umol per 24hr",
        "umols per 24hr",
        "umol per 24 hours",
        "micromoles per 24 hours"
      ],
      printSymbol: "μmol/d"),
  DefinedUnit(
      code: "umol/dL",
      codeUC: "UMOL/DL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per deciliter",
        "micromole/deciliter",
        "micromole/decilitre",
        "umol per dL",
        "micromoles per deciliters",
        "micromole per decilitres"
      ],
      printSymbol: "μmol/dL"),
  DefinedUnit(
      code: "umol/g",
      codeUC: "UMOL/G",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per gram",
        "micromole/gram",
        "umol per g",
        "micromoles per gram"
      ],
      printSymbol: "μmol/g"),
  DefinedUnit(
      code: "umol/h",
      codeUC: "UMOL/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per hour",
        "umol/hr",
        "umol per hr",
        "umol per hour",
        "micromoles per hours"
      ],
      printSymbol: "μmol/h"),
  DefinedUnit(
      code: "umol/kg",
      codeUC: "UMOL/KG",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per kilogram",
        "umol per kg",
        "micromoles per kilogram"
      ],
      printSymbol: "μmol/kg"),
  DefinedUnit(
      code: "umol/L",
      codeUC: "UMOL/L",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per liter",
        "micromole/liter",
        "micromole/litre",
        "umol per liter",
        "micromoles per liter",
        "litre"
      ],
      printSymbol: "μmol/L"),
  DefinedUnit(
      code: "umol/L/h",
      codeUC: "(UMOL/L)/HR",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per liter per hour",
        "umol/liter/hr",
        "umol/litre/hr",
        "umol per L per hr",
        "umol per liter per hour",
        "micromoles per liters per hour",
        "litre"
      ],
      printSymbol: "(μmol/L)/h"),
  DefinedUnit(
      code: "umol/mg",
      codeUC: "UMOL/MG",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per milligram",
        "micromole/milligram",
        "umol per mg",
        "micromoles per milligram"
      ],
      printSymbol: "μmol/mg"),
  DefinedUnit(
      code: "umol/min",
      codeUC: "UMOL/MIN",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per minute",
        "micromole/minute",
        "umol per min",
        "micromoles per minute",
        "enzyme units"
      ],
      printSymbol: "μmol/min"),
  DefinedUnit(
      code: "umol/min/g",
      codeUC: "(UMOL/MIN)/G",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per minute per gram",
        "umol/min/gm",
        "umol per min per gm",
        "micromoles per minutes per gram",
        "U/g",
        "enzyme units"
      ],
      printSymbol: "(μmol/min)/g"),
  DefinedUnit(
      code: "umol/min/L",
      codeUC: "(UMOL/MIN)/L",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per minute per liter",
        "umol/min/liter",
        "umol/minute/liter",
        "micromoles per minutes per liter",
        "litre",
        "enzyme units",
        "U/L"
      ],
      printSymbol: "(μmol/min)/L"),
  DefinedUnit(
      code: "umol/mL",
      codeUC: "UMOL/ML",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per milliliter",
        "umol per mL",
        "micromoles per milliliter",
        "millilitre"
      ],
      printSymbol: "μmol/mL"),
  DefinedUnit(
      code: "umol/mL/min",
      codeUC: "(UMOL/ML)/MIN",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per milliliter per minute",
        "umol per mL per min",
        "micromoles per milliliters per minute",
        "millilitres"
      ],
      printSymbol: "(μmol/mL)/min"),
  DefinedUnit(
      code: "umol/mmol",
      codeUC: "UMOL/MMOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per millimole",
        "umol per mmol",
        "micromoles per millimole"
      ],
      printSymbol: "μmol/mmol"),
  DefinedUnit(
      code: "umol/mol",
      codeUC: "UMOL/MOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["micromole per mole", "umol per mol", "micromoles per mole"],
      printSymbol: "μmol/mol"),
  DefinedUnit(
      code: "umol/umol",
      codeUC: "UMOL/UMOL",
      value: Value(
          unit: "10*23",
          unitUC: "10*23",
          value: Decimal.fromString('6.0221367'),
          text: "6.0221367"),
      property: "amount of substance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micromole per micromole",
        "umol per umol",
        "micromoles per micromole"
      ],
      printSymbol: "μmol/μmol"),
  DefinedUnit(
      code: "uOhm",
      codeUC: "UOHM",
      value: Value(
          unit: "V/A",
          unitUC: "V/A",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "electric resistance",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["microOhm", "microOhms", "µΩ"],
      printSymbol: "μΩ"),
  DefinedUnit(
      code: "us",
      codeUC: "US",
      value: Value(unit: null, unitUC: null, value: null, text: null),
      property: "time",
      isMetric: false,
      isSpecial: false,
      class_: null,
      names: ["microsecond", "microseconds"],
      printSymbol: "μs"),
  DefinedUnit(
      code: "uU/g",
      codeUC: "UU/G",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micro enzyme unit per gram",
        "uU per gm",
        "micro enzyme units per gram",
        "micro enzymatic activity per mass",
        "enzyme activity"
      ],
      printSymbol: "μU/g"),
  DefinedUnit(
      code: "uU/L",
      codeUC: "UU/L",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micro enzyme unit per liter",
        "uU per L",
        "micro enzyme units per liter",
        "litre",
        "enzymatic activity per volume",
        "enzyme activity"
      ],
      printSymbol: "μU/L"),
  DefinedUnit(
      code: "uU/mL",
      codeUC: "UU/ML",
      value: Value(
          unit: "umol/min",
          unitUC: "UMOL/MIN",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "catalytic activity",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: [
        "micro enzyme unit per milliliter",
        "uU per mL",
        "micro enzyme units per milliliter",
        "millilitre",
        "enzymatic activity per volume",
        "enzyme activity"
      ],
      printSymbol: "μU/mL"),
  DefinedUnit(
      code: "uV",
      codeUC: "UV",
      value: Value(
          unit: "J/C",
          unitUC: "J/C",
          value: Decimal.fromString('1'),
          text: "1"),
      property: "electric potential",
      isMetric: true,
      isSpecial: false,
      class_: null,
      names: ["microvolt", "microvolts"],
      printSymbol: "μV")
];
